var _this=void 0;function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){var a;if(e)return"string"==typeof e?_arrayLikeToArray(e,t):"Map"===(a="Object"===(a={}.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:a)||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?_arrayLikeToArray(e,t):void 0}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=Array(t);a<t;a++)n[a]=e[a];return n}function _iterableToArrayLimit(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,l,o,i=[],u=!0,s=!1;try{if(l=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;u=!1}else for(;!(u=(n=l.call(a)).done)&&(i.push(n.value),i.length!==t);u=!0);}catch(e){s=!0,r=e}finally{try{if(!u&&null!=a.return&&(o=a.return(),Object(o)!==o))return}finally{if(s)throw r}}return i}}function _arrayWithHoles(e){if(Array.isArray(e))return e}var controllPanelCheckboxes=document.querySelectorAll(".simulation__control-panel-checkbox"),controllPanelInputs=document.querySelectorAll(".simulation__control-panel-input"),controllPanelInputRounds=document.querySelector(".simulation__control-panel-input--rounds"),controllPanelInputInitialCapital=document.querySelector(".simulation__control-panel-input--capital"),controllPanelInputBet=document.querySelector(".simulation__control-panel-input--bet"),controllPanelInputNumberOfPlayersForAStrategy=document.querySelector(".simulation__control-panel-input--number-players"),controllPanelInputChanseOfWinForStrategy=document.querySelector(".simulation__control-panel-input--chanse-of-win"),controllPanelInputInfoValues=document.querySelectorAll(".simulation__control-panel-input-value"),header=document.querySelector(".header"),rounds=+controllPanelInputRounds.value,initialCapital=(console.log(rounds),+controllPanelInputInitialCapital.value),numberOfPlayersForStrategy=+controllPanelInputNumberOfPlayersForAStrategy.value,chanseOfWinOfTheStrategy=+controllPanelInputChanseOfWinForStrategy.value/100,lastRounds=[],numLines=10,headerHeight=header.clientHeight,headerWidth=header.clientWidth;function generateRandomPath(){for(var e=[],t=15,a=0;a<=100;a+=10)t+=10*(Math.random()-.75),e.push({x:a,y:t});return e}var timeout,tickSpacing=Math.ceil(rounds/10),tickValues=d3.range(0,rounds+1,tickSpacing),headerScaleX=d3.scaleLinear().domain([0,100]).range([0,headerWidth]),headerScaleY=d3.scaleLinear().domain([-20,20]).range([headerHeight,0]),headerBackgroundSvg=d3.select(".header__svg").attr("width",headerWidth).attr("height",headerHeight+.3*headerHeight),headerCreateLines=d3.line().x(function(e){return headerScaleX(e.x)}).y(function(e){return headerScaleY(e.y)}).curve(d3.curveLinear),headerLinesGroup=headerBackgroundSvg.append("g"),headerLinesData=headerLinesGroup.selectAll(".header__svg-line").data(Array.from({length:numLines},generateRandomPath)),headerLines=headerLinesData.enter().append("path").attr("class","header__svg-line").merge(headerLinesData).attr("d",headerCreateLines).attr("stroke",function(e,t){return d3.interpolateBlues(t/numLines)}).attr("stroke-width",2).attr("fill","none").attr("opacity",.6),strategies=(headerBackgroundSvg.on("mousemove",function(e){var e=_slicedToArray(d3.pointer(e),2),r=e[0],l=e[1];headerLines.each(function(e){e=e.map(function(e){var t=headerScaleX(e.x)-r,a=headerScaleY(e.y)-l,n=Math.sqrt(t*t+a*a);return n<100?(a=Math.atan2(a,t),t=(100-n)/20,{x:e.x+Math.cos(a)*t,y:e.y+Math.sin(a)*t}):e});d3.select(this).transition().duration(200).ease(d3.easeLinear).attr("d",headerCreateLines(e))})}),headerBackgroundSvg.on("mouseleave",function(){clearTimeout(timeout),timeout=setTimeout(function(){headerLines.transition().duration(500).ease(d3.easeCubicOut).attr("d",function(e){return headerCreateLines(e)})},300)}),{flatBet:function(e,t){return t},martingale:function(e,t,a){return a?2*t:t},antiMartingale:function(e,t,a){return a?t:2*t}}),baseColors={flatBet:d3.hsl("green"),martingale:d3.hsl("red"),antiMartingale:d3.hsl("blue")},getShadedColor=function(e,t,a){e=baseColors[e];return d3.hsl(e.h+t/a*70,e.s,e.l*(1-t/(a+1)*.75)).formatRgb()},strategyPlayers={flatBet:[],martingale:[],antiMartingale:[]},width=600,height=350,margin=50,scaleX=d3.scaleLinear().domain([0,rounds]).range([margin,width-margin]),scaleY=d3.scaleLinear().domain([0,2*initialCapital]).range([height-margin,margin]),svg=d3.select(".simulation__chart").attr("width",width).attr("height",height),gridGroup=svg.append("g").attr("class","simulation__chart-grid-group"),xAxis=svg.append("g").attr("transform","translate(0,".concat(height-margin,")")).call(d3.axisBottom(scaleX).tickValues(tickValues)),yAxis=svg.append("g").attr("transform","translate(".concat(margin,",0)")).call(d3.axisLeft(scaleY)),yGrid=d3.axisLeft(scaleY).tickSize(2*margin-width).tickFormat(""),line=d3.line().x(function(e){return scaleX(e.index)}).y(function(e){return scaleY(e.value)}).curve(d3.curveLinear),pathGroup=svg.append("g"),pointsGroup=svg.append("g"),tooltip=svg.append("g").attr("class","simulation__chart-tooltip"),tooltipText=tooltip.append("text");function updateChart(){gridGroup.attr("transform","translate(".concat(margin,",0)")).call(yGrid);var e=Object.entries(strategyPlayers).flatMap(function(e){var e=_slicedToArray(e,2),a=e[0],n=e[1];return n.map(function(e,t){return{strategy:a,playerData:e,playerIndex:t,totalPlayers:n.length}})}),e=pathGroup.selectAll(".strategy-line").data(e);e.enter().append("path").attr("class","strategy-line").attr("stroke",function(e){return getShadedColor(e.strategy,e.playerIndex,e.totalPlayers)}).attr("stroke-width",2).attr("fill","none").attr("d",function(e){return line(e.playerData)}).each(function(e){var t=this.getTotalLength();d3.select(this).attr("stroke-dasharray",t+" "+t).attr("stroke-dashoffset",t).transition().duration(750).ease(d3.easeLinear).attr("stroke-dashoffset",0)}).merge(e).attr("d",function(e){return line(e.playerData)}),e.exit().remove()}var changeControllPanelInputInfoValues=function(){controllPanelInputInfoValues.forEach(function(e){var t=e.parentElement.nextElementSibling;e.textContent=t.value,t.getAttribute("data-add-percentage")&&(e.textContent="".concat(e.textContent,"%"))})},changeAControllPanelInputInfoValue=function(){controllPanelInputInfoValues.forEach(function(e){var t=e.parentElement.previousElementSibling;t===_this&&e.classList.contains("simulation__control-panel-info-value--current")&&(e.textContent=t.value)})},removeStrategyFromChart=function(){controllPanelCheckboxes.forEach(function(e){var t=e.dataset.strategyName;e.checked?(strategies[t]=handleStrategiesFunctions(t),strategyPlayers[t]=[]):(delete strategies[t],delete strategyPlayers[t])}),updateChart()};function disableCheckbox(){var t=controllPanelCheckboxes.length;controllPanelCheckboxes.forEach(function(e){e.checked||t--}),controllPanelCheckboxes.forEach(function(e){e.checked&&1===t?e.disabled=!0:e.disabled=!1})}var changeBetValue=function(){return initialCapital*(+controllPanelInputBet.value/100)};function correctControllPanelInputsValues(){controllPanelInputs.forEach(function(e){var t=e.value.replace(/\D/g,"");t<+e.getAttribute("min")||""===t?t=+e.getAttribute("min"):t>+e.getAttribute("max")&&(t=+e.getAttribute("max")),e.value=t}),rounds=+controllPanelInputRounds.value,initialCapital=+controllPanelInputInitialCapital.value,numberOfPlayersForStrategy=+controllPanelInputNumberOfPlayersForAStrategy.value,chanseOfWinOfTheStrategy=+controllPanelInputChanseOfWinForStrategy.value/100}var handleStrategiesFunctions=function(e){return{flatBet:function(e,t){return t},martingale:function(e,t,a){return a?2*t:t},antiMartingale:function(e,t,a){return a?t:2*t}}[e]};function simulateGame(){correctControllPanelInputsValues(),removeStrategyFromChart(),lastRounds=[],Object.keys(strategies).forEach(function(e){for(var t=0;t<numberOfPlayersForStrategy;t++){for(var a=[{index:0,value:initialCapital}],n=changeBetValue(),r=1;r<=rounds;r++){var l=Math.random()<chanseOfWinOfTheStrategy?n:-n,o=Math.max(0,a[r-1].value+l),n=strategies[e](o,n,l<0);if(a.push({index:r,value:o}),0===o){lastRounds.push(r);break}r===rounds&&lastRounds.push(rounds)}strategyPlayers[e].push(a)}});var e=Math.max.apply(Math,_toConsumableArray(lastRounds));scaleX.domain([0,e]),scaleY.domain([0,1.1*d3.max(Object.values(strategyPlayers).flat(2),function(e){return e.value})]),tickSpacing=Math.ceil(e/10),tickValues=d3.range(0,e+1,tickSpacing),xAxis.transition().duration(500).call(d3.axisBottom(scaleX).tickValues(tickValues)),yAxis.transition().duration(500).call(d3.axisLeft(scaleY).tickFormat(d3.format(".2s"))),updateChart()}d3.select(".simulation__control-panel-btn-start").on("click",simulateGame),changeControllPanelInputInfoValues(),controllPanelCheckboxes.forEach(function(e){return e.addEventListener("change",disableCheckbox)}),controllPanelInputs.forEach(function(e){return e.addEventListener("input",changeControllPanelInputInfoValues)}),controllPanelInputBet.addEventListener("input",changeBetValue),controllPanelInputInitialCapital.addEventListener("input",changeBetValue);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImNvbnRyb2xsUGFuZWxDaGVja2JveGVzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY29udHJvbGxQYW5lbElucHV0cyIsImNvbnRyb2xsUGFuZWxJbnB1dFJvdW5kcyIsInF1ZXJ5U2VsZWN0b3IiLCJjb250cm9sbFBhbmVsSW5wdXRJbml0aWFsQ2FwaXRhbCIsImNvbnRyb2xsUGFuZWxJbnB1dEJldCIsImNvbnRyb2xsUGFuZWxJbnB1dE51bWJlck9mUGxheWVyc0ZvckFTdHJhdGVneSIsImNvbnRyb2xsUGFuZWxJbnB1dENoYW5zZU9mV2luRm9yU3RyYXRlZ3kiLCJjb250cm9sbFBhbmVsSW5wdXRJbmZvVmFsdWVzIiwiaGVhZGVyIiwiY29uc29sZSIsInZhbHVlIiwicm91bmRzIiwiaW5pdGlhbENhcGl0YWwiLCJudW1iZXJPZlBsYXllcnNGb3JTdHJhdGVneSIsImNoYW5zZU9mV2luT2ZUaGVTdHJhdGVneSIsImxhc3RSb3VuZHMiLCJ4IiwieSIsIm51bUxpbmVzIiwicmFuZG9tIiwiZGF0YSIsImhlYWRlckhlaWdodCIsInRpbWVvdXQiLCJ0aWNrU3BhY2luZyIsIk1hdGgiLCJjZWlsIiwidGlja1ZhbHVlcyIsImQzIiwicmFuZ2UiLCJzY2FsZUxpbmVhciIsImRvbWFpbiIsImhlYWRlcldpZHRoIiwiaGVhZGVyQmFja2dyb3VuZFN2ZyIsInNlbGVjdCIsImF0dHIiLCJoZWFkZXJTY2FsZVgiLCJsaW5lIiwiaGVhZGVyU2NhbGVZIiwiaGVhZGVyQ3JlYXRlTGluZXMiLCJkIiwiY3VydmUiLCJoZWFkZXJMaW5lc0dyb3VwIiwiYXBwZW5kIiwic2VsZWN0QWxsIiwiaGVhZGVyTGluZXNEYXRhIiwibGVuZ3RoIiwiaGVhZGVyTGluZXMiLCJlbnRlciIsIm1lcmdlIiwiX2QzJHBvaW50ZXIiLCJwb2ludGVyIiwiX2QzJHBvaW50ZXIyIiwiX3NsaWNlZFRvQXJyYXkiLCJtb3VzZVgiLCJpbnRlcnBvbGF0ZUJsdWVzIiwiaSIsIm1vdXNlWSIsImVhY2giLCJtYXAiLCJzdHJhdGVnaWVzIiwiZXZlbnQiLCJzcXJ0IiwiZHgiLCJkeSIsImRpc3RhbmNlIiwibmV3RGF0YSIsImFuZ2xlIiwiZm9yY2UiLCJwb2ludCIsImNvcyIsImF0YW4yIiwic2luIiwiY2xlYXJUaW1lb3V0IiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwiZWFzZSIsImVhc2VDdWJpY091dCIsIm9uIiwic2V0VGltZW91dCIsImZsYXRCZXQiLCJtYXJ0aW5nYWxlIiwicHJldkxvc3MiLCJiZXQiLCJhbnRpTWFydGluZ2FsZSIsImNhcGl0YWwiLCJiYXNlQ29sb3JzIiwiaHNsIiwiaEZhY3RvciIsInBsYXllckluZGV4IiwidG90YWxQbGF5ZXJzIiwiYmFzZUNvbG9yIiwic3RyYXRlZ3kiLCJoIiwic3RyYXRlZ3lQbGF5ZXJzIiwicyIsImwiLCJmb3JtYXRSZ2IiLCJ3aWR0aCIsImhlaWdodCIsIm1hcmdpbiIsInhBeGlzIiwic3ZnIiwiYXhpc0xlZnQiLCJzY2FsZVkiLCJjdXJ2ZUxpbmVhciIsInRvb2x0aXAiLCJ0b29sdGlwVGV4dCIsInN0cmF0ZWd5RGF0YSIsIl9yZWYyIiwiY2FsbCIsInBsYXllcnMiLCJzY2FsZVgiLCJ5QXhpcyIsInBsYXllckRhdGEiLCJpbmRleCIsInlHcmlkIiwidGlja1NpemUiLCJ0aWNrRm9ybWF0Iiwic3RyYXRlZ3lMaW5lcyIsInBhdGhHcm91cCIsInBvaW50c0dyb3VwIiwiZ2V0VG90YWxMZW5ndGgiLCJncmlkR3JvdXAiLCJPYmplY3QiLCJlbnRyaWVzIiwiZmxhdE1hcCIsIl9yZWYiLCJpbnB1dE9mSW5mb1ZhbHVlIiwidGV4dENvbnRlbnQiLCJfdGhpcyIsIkluZm9WYWx1ZSIsImNsYXNzTGlzdCIsInRvdGFsTGVuZ3RoIiwidGhpcyIsInJlbW92ZVN0cmF0ZWd5RnJvbUNoYXJ0IiwiZm9yRWFjaCIsImNoZWNrYm94Iiwic3RyYXRlZ3lOYW1lIiwiZXhpdCIsInJlbW92ZSIsIm51bU9mU2VsZWN0ZWRDaGVja2JveGVzIiwicGFyZW50RWxlbWVudCIsIm5leHRFbGVtZW50U2libGluZyIsImNvbmNhdCIsImNoYW5nZUFDb250cm9sbFBhbmVsSW5wdXRJbmZvVmFsdWUiLCJjaGFuZ2VCZXRWYWx1ZSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJjb250YWlucyIsImNvcnJlY3RDb250cm9sbFBhbmVsSW5wdXRzVmFsdWVzIiwiaW5wdXRWYWx1ZSIsImdldEF0dHJpYnV0ZSIsImlucHV0IiwiZGF0YXNldCIsImNoZWNrZWQiLCJ1cGRhdGVDaGFydCIsInNpbXVsYXRlR2FtZSIsImRpc2FibGVkIiwicm91bmQiLCJuZXdWYWx1ZSIsInB1c2giLCJtYXhWYWx1ZU9mTGFzdFJvdW5kcyIsIl90b0NvbnN1bWFibGVBcnJheSIsImtleXMiLCJjaGFuZ2VDb250cm9sbFBhbmVsSW5wdXRJbmZvVmFsdWVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNoYW5nZSIsIm1heCIsImFwcGx5IiwidmFsdWVzIiwiZmxhdCIsImF4aXNCb3R0b20iLCJmb3JtYXQiLCJkaXNhYmxlQ2hlY2tib3giXSwibWFwcGluZ3MiOiJzdkRBQUEsSUFBTUEsd0JBQTBCQyxTQUFTQyxpQkFBaUIscUNBQXFDLEVBQ3pGQyxvQkFBc0JGLFNBQVNDLGlCQUFpQixrQ0FBa0MsRUFDbEZFLHlCQUEyQkgsU0FBU0ksY0FBYywwQ0FBMEMsRUFDNUZDLGlDQUFtQ0wsU0FBU0ksY0FBYywyQ0FBMkMsRUFDckdFLHNCQUF3Qk4sU0FBU0ksY0FBYyx1Q0FBdUMsRUFDdEZHLDhDQUFnRFAsU0FBU0ksY0FDOUQsa0RBQ0QsRUFDTUkseUNBQTJDUixTQUFTSSxjQUN6RCxpREFDRCxFQUNNSyw2QkFBK0JULFNBQVNDLGlCQUFpQix3Q0FBd0MsRUFDakdTLE9BQVNWLFNBQVNJLGNBQWMsU0FBUyxFQVh6Q0YsT0FBQUEsQ0FBQUEseUJBQStCRCxNQUUvQkksZ0JBRE5NLFFBQU1SLElBQUFBLE1BQUFBLEVBQ0FFLENBQUFBLGlDQUE0Q0QsT0FDNUNFLDJCQUF3Qk4sQ0FBQUEsOENBQXVCWSxNQUMvQ0wseUJBQUFBLENBQUFBLHlDQUF5REgsTUFDOUQsSUFFS0ksV0FBQUEsR0FHQUMsU0FBQUEsR0FDQUMsYUFBU1YsT0FBU0ksYUFFcEJTLFlBQVVWLE9BQUFBLFlBRWQsU0FBSVcscUJBR0osSUFGQSxJQUFJQyxFQUFBQSxHQUNBQyxFQUFBQSxHQUNBQyxFQUFVLEVBQUdDLEdBQUUsSUFBQUEsR0FBQSxHQUNuQkMsR0FBaUIsSUFBYkMsS0FBUUMsT0FBSyxFQUFBLEtBQ2pCQyxFQUFJQyxLQUFBQSxDQUFBQSxFQUFBQSxFQUFZSixFQUFBQSxDQUFHVCxDQUFBQSxFQUduQixPQUFBWSxDQVFBLENBQ0EsSUFtRUVFLFFBMUVEQyxZQUFVQyxLQUFBQyxLQUFBZCxPQUFBLEVBQUEsRUFDVmUsV0FBY0MsR0FBR0MsTUFBTyxFQUFHakIsT0FBUSxFQUFBWSxXQUFBLEVBRWxDSCxhQUFVTyxHQUFBRSxZQUFBLEVBQUFDLE9BQUEsQ0FBQSxFQUFBLElBQUEsRUFBQUYsTUFBQSxDQUFBLEVBQUFHLFlBQUEsRUFBS2QsYUFBQUEsR0FBQUEsWUFBQUEsRUFBQUEsT0FBQUEsQ0FBQUEsQ0FBQUEsR0FBQUEsR0FBQUEsRUFBQUEsTUFBQUEsQ0FBQUEsYUFBQUEsRUFBQUEsRUFDaEJlLG9CQUFBTCxHQUNBTSxPQUFPYixjQUFJLEVBQ1pjLEtBQUEsUUFBQUgsV0FBQSxFQUNBRyxLQUFJWCxTQUFXRixhQUF5QixHQUFaVixZQUFZLEVBR2xDd0Isa0JBQWtCTixHQUV4Qk8sS0FBTUMsRUFFTnJCLEVBQU1nQixTQUFBQSxHQUFBQSxPQUFBQSxhQUFBQSxFQUFtQmhCLENBQUEsQ0FBR1csQ0FBQUEsRUFLNUJWLEVBQU1xQixTQUFBQSxHQUFBQSxPQUFBQSxhQUFpQkMsRUFBR1osQ0FBQUEsQ0FBRSxDQUFBLEVBRXZCYSxNQUFBYixHQUFJUSxXQUFhSSxFQUNqQkUsaUJBQW9CVCxvQkFBQ1UsT0FBQSxHQUFBLEVBR3BCRCxnQkFBbUJULGlCQUV6QlcsVUFBTUMsbUJBQWtCSCxFQUVKSSxLQUFBQSxNQUFRM0IsS0FBQUEsQ0FBQUEsT0FBQUEsUUFBQUEsRUFBQUEsa0JBQUFBLENBQUFBLEVBRXRCNEIsWUFBY0YsZ0JBTUVHLE1BQUEsRUFBdUNMLE9BQ3RELE1BQUEsRUFJUFYsS0FBQUEsUUFBQUEsa0JBQWtDLEVBQ2pDZ0IsTUFBQUMsZUFBNEJDLEVBUDNCaEIsS0FPeUNpQixJQUFBQSxpQkFBQUMsRUFOekNsQixLQU1NbUIsU0FBTUYsU0FBQUEsRUFBQUEsR0FBQUEsT0FBQXhCLEdBQUEyQixpQkFBQUMsRUFBQXJDLFFBQUEsQ0FBQSxDQUFBLEVBTFpnQixLQUtjc0IsZUFBTUwsQ0FBQUEsRUFFckJMLEtBQUFBLE9BQVlXLE1BQUssRUFMaEJ2QixLQU1BLFVBQWNLLEVBQUVtQixFQWlDb0RDLFlBckN0RTNCLG9CQU1ZSyxHQUFBQSxZQUFxQixTQUFTdUIsR0FMekMsSUFNdUNULEVBQUFDLGVBQWpCUyxHQUFBQSxRQUFVQyxDQUFLQyxFQUFFLENBQUEsRUFBckNWLEVBQUlXLEVBQUFBLEdBQUFBLEVBQVd4QyxFQUFBQSxHQUpqQnNCLFlBT0dXLEtBQUEsU0FBQWxCLEdBTkUwQixFQU9FQyxFQUFLUixJQUFHbEMsU0FBQUEsR0FOYixJQUFJc0MsRUFPQ0ssYUFBWUMsRUFBR0osQ0FBQUEsRUFBUVgsRUFOeEJVLEVBT0gxQixhQUFPK0IsRUFBQW5ELENBQUEsRUFBQXVDLEVBTkpRLEVBT014QyxLQUFLQSxLQUFLNkMsRUFBSUgsRUFBTUgsRUFBR0ksQ0FBQUEsRUFMakMsT0FBSUgsRUFPRixLQUVGRSxFQUFPRSxLQUFLRSxNQUFBUCxFQUFBRCxDQUFBLEVBQ1hLLEdBQUEsSUFBQUgsR0FBQSxHQUNDL0IsQ0FDRmpCLEVBQUFvRCxFQUFBcEQsRUFBQVEsS0FBQTZDLElBQUFILENBQUEsRUFBQUMsRUFDRGxELEVBQUFtRCxFQUFBbkQsRUFBQU8sS0FBQStDLElBQUFMLENBQUEsRUFBQUMsQ0FDRTdDLEdBRUhrRCxDQUNBbEQsQ0FBQUEsRUFOQ0ssR0FPQW1CLE9BQUFBLElBQ0UyQixFQUFBQSxXQUNBQyxFQUFBQSxTQUFTLEdBQ1RDLEVBQUFBLEtBQU9oRCxHQUFDaUQsVUFBWSxFQUNwQjFDLEtBQUssSUFBS0ksa0JBQUMyQixDQUFBLENBQUEsQ0FWZCxDQUFDLENBQ0YsQ0FBQyxFQVdEakMsb0JBQUU2QyxHQUFBLGFBQUEsV0FDRkwsYUFBZ0JsRCxPQUFHLEVBUmxCQSxRQVNTd0QsV0FBVEMsV0FSQ2pDLFlBUTZCMkIsV0FBQSxFQUM5Qk8sU0FBVSxHQUFFLEVBQXVCTCxLQUFBaEQsR0FBTXNELFlBQVdDLEVBQWNoRCxLQUFBLElBQUEsU0FBQUssR0FBQSxPQUFBRCxrQkFBQUMsQ0FBQSxDQUFBLENBQUEsQ0FKbEUsRUFLQTRDLEdBQUFBLENBSkQsQ0FBQyxFQUlxRSxDQUNyRUosUUFBQSxTQUFBSyxFQUFBRixHQUFBLE9BQUFBLENBQUEsRUFDREYsV0FBTUssU0FBVUQsRUFBR0YsRUFBQUQsR0FBQSxPQUFBQSxFQUFBLEVBQUFDLEVBQUFBLENBQUEsRUFGbEJDLGVBR2UsU0FBQ0MsRUFBUUYsRUFBQUQsR0FBQSxPQUFBQSxFQUFBQyxFQUFBLEVBQUFBLENBQUEsQ0FGekIsR0FJQ0MsV0FBZ0J4RCxDQUNoQm9ELFFBQUFwRCxHQUFBMkQsSUFBQSxPQUFBLEVBRkFOLFdBQVlyRCxHQUFHMkQsSUFBSSxLQUFLLEVBSXpCSCxlQUFBeEQsR0FBQTJELElBQUEsTUFBQSxDQUNBLEVBR0tDLGVBQVdDLFNBQUFBLEVBQWNDLEVBQWtCQSxHQUMvQ0MsRUFBY0EsV0FBV0MsR0FBekIsT0FJQVosR0FBU08sSUFBRUksRUFBQUUsRUFEUkMsRUFBa0JKLEVBQUEsR0FDVkMsRUFBQUksRUFBQUosRUFBQUssR0FIWCxFQUFBUCxHQUFBQyxFQUFBLEdBQUEsSUFHVyxFQUFBTyxVQUFBLENBSFosRUFNQ0gsZ0JBQUEsQ0FFRGQsUUFBVyxHQUpWQyxXQUtTLEdBSlRHLGVBS1csRUFFWixFQUpNYyxNQUFRLElBYWRDLE9BQUEsSUFDQUMsT0FBWXhFLEdBSU55RSxPQUFXekUsR0FJakJFLFlBQWN3RSxFQUVkdkUsT0FBVyxDQUFBLEVBQUdILE9BQ1oyRSxFQUlGMUUsTUFBVSxDQUFBdUUsT0FDUi9ELE1BQ0UrRCxPQUFBLEVBQUNJLE9BQVU1RSxHQUFVRSxZQUNyQixFQUFDQyxPQUFJeUUsQ0FBQUEsRUFBZSxFQUFmQSxlQUFlLEVBQUMzRSxNQUNsQixDQUFDRCxPQUFHNkUsT0FBWUwsT0FBQSxFQUlqQk0sSUFBTzlFLEdBQUcwRSxPQUFJM0Qsb0JBQXdCLEVBQUVSLEtBQUEsUUFBQStELEtBQUEsRUFBQS9ELEtBQUEsU0FBNEJnRSxNQUFBLEVBQ3BFUSxVQUFjRCxJQUFBQSxPQUFRL0QsR0FBTSxFQUFDUixLQUFNLFFBQUMsOEJBQUEsRUFLbkN5RSxNQUFBQSxJQXhCTGpFLE9Bd0I0RGtFLEdBQUFBLEVBdkI1RDFFLEtBdUI4RHlELFlBQVFpQixlQUFBQSxPQUFBVixPQUFBQyxPQUFBLEdBQUEsQ0FBQSxFQXRCdEVVLEtBc0J3RUMsR0FBQUEsV0FBT0MsTUFBQSxFQUFBckYsV0FBQUEsVUFBQSxDQUFBLEVBQUFzRixNQUMvRUYsSUFBT3BFLE9BQUssR0FBQSxFQUFBUixLQUFDK0UsWUFBWUMsYUFBQUEsT0FBS2YsT0FBQSxLQUFBLENBQUEsRUFBQVUsS0FBQWxGLEdBQUEyRSxTQUFBQyxNQUFBLENBQUEsRUFwQjFCWSxNQXFCSHhCLEdBcEJEVyxTQXFCQ1csTUFBQUEsRUFwQkRHLFNBcUJZLEVBQUVGLE9BQWIxQixLQUFrQixFQXBCbkI2QixXQXFCQzVCLEVBQUFBLEVBQ0VyRCxLQUFBVCxHQUFBUyxLQUNILEVBQ0RwQixFQUFBLFNBQUF1QixHQUFBLE9BQUF3RSxPQUFBeEUsRUFBQTJFLEtBQUEsQ0FBQSxDQUFBLEVBQ0FqRyxFQUFBLFNBQUFzQixHQUFBLE9BQU0rRSxPQUFBQSxFQUFBQSxLQUFnQkMsQ0FBQUEsQ0FBQUEsRUFFdEJELE1BQUFBLEdBQUFBLFdBQ1EsRUFJTnBGLFVBQUttRSxJQUFBM0QsT0FDTFIsR0FBQUEsRUFDV3NGLFlBQVdQLElBQUFBLE9BQVcsR0FBQSxFQUNqQ3hELFFBQUs0QyxJQUFVOUQsT0FBRyxHQUFBLEVBQUFMLEtBQUEsUUFBQSwyQkFBQSxFQUNsQndFLFlBQWlCRCxRQUFRZ0IsT0FBQUEsTUFBYyxFQXZCMUMsU0FnQ0d6RSxjQS9CRjBFLFVBZ0NpQnRGLEtBQUtHLFlBQUUwRSxhQUFBQSxPQUFXZCxPQUFBLEtBQUEsQ0FBQSxFQUFBVSxLQUFBTSxLQUFBLEVBOUJuQyxJQWdDQUcsRUFBb0JLLE9BQU9DLFFBQUUvQixlQUFBLEVBQUFnQyxRQUFBLFNBQUFDLEdBQUEsSUFBQWxCLEVBQUF4RCxlQUFBMEUsRUFBQSxDQUFBLEVBQUFuQyxFQUFBaUIsRUFBQSxHQUFBRSxFQUFBRixFQUFBLEdBQUEsT0FDOUJFLEVBQUFwRCxJQUFBLFNBQUF1RCxFQUFBQyxHQUFBLE1BQUEsQ0FFQXZCLFNBQUFBLEVBQ0NwRixXQUFBQSxFQWhDRWlGLFlBaUNLdUMsRUFoQ0x0QyxhQWtDU3VDLEVBQVduRixNQWpDckIsQ0FBQyxDQW1DRCxDQUFBLENBbENELEVBcUNFeUUsRUFBQUMsVUFBQTVFLFVBQUEsZ0JBQUEsRUFBQXZCLEtBQUF1RixDQUFBLEVBR0hXLEVBQ0MvRyxNQUFBQSxFQW5DRW1DLE9Bb0NLcUYsTUFBQUEsRUFuQ0w3RixLQW9DRzZGLFFBQUFBLGVBQXFCRSxFQW5DeEIvRixLQW9DQSxTQUFJZ0csU0FBQUEsR0FBUyxPQUFDQyxlQUFrQjVGLEVBQUNvRCxTQUFBcEQsRUFBQWlELFlBQUFqRCxFQUFBa0QsWUFBQSxDQUFBLENBQUEsRUFuQ2pDdkQsS0FvQ0NnRyxlQUFVRixDQUFBQSxFQW5DWDlGLEtBb0NBLE9BQUEsTUFBQSxFQW5DQUEsS0FvQ0QsSUFBQSxTQUFBSyxHQUFBLE9BQUFILEtBQUFHLEVBQUEwRSxVQUFBLENBQUEsQ0FBQSxFQUNBeEQsS0FBQyxTQUFBbEIsR0FDRixJQUFBNkYsRUFBQUMsS0FBQVosZUFBQSxFQUVEOUYsR0FBTTJHLE9BQUFBLElBQUFBLEVBQ0x6SSxLQUFBQSxtQkFBd0IwSSxFQUFRQyxJQUFBQSxDQUFZLEVBQzNDdEcsS0FBTXVHLG9CQUF1QkwsQ0FBU0ssRUFDdENoRSxXQUFZLEVBcENUQyxTQXFDRmYsR0FBVzhFLEVBcENUOUQsS0FxQ0ZrQixHQUFBQSxVQUFnQjRDLEVBQ2hCdkcsS0FBQSxvQkFBTSxDQUFBLENBcENQLENBQUMsRUFDQWMsTUFxQ0FzRSxDQUFPekIsRUFwQ1AzRCxLQXFDRCxJQUFBLFNBQUFLLEdBQUEsT0FBQUgsS0FBQUcsRUFBQTBFLFVBQUEsQ0FBQSxDQUFBLEVBbkNESyxFQXFDYW9CLEtBQUEsRUFBQUMsT0FBQSxDQUNkLENBbkNBLElBc0NLQyxtQ0FBMEIvSSxXQXJDOUJVLDZCQXVDd0JnSSxRQUFRLFNBQUFMLEdBdEMvQixJQXVDSUgsRUFBbUJHLEVBQUFXLGNBQUFDLG1CQXJDdkJaLEVBdUNBRixZQUFBRCxFQUFBckgsTUFFRGIsRUFBQUEsYUFBZ0MscUJBQVksSUF0QzFDcUksRUF1Q0dNLFlBQWdCLEdBQUFPLE9BQUlILEVBQUFBLFlBQXVCLEdBQUEsRUFyQ2hELENBQUMsQ0FDRixFQXlDR0ksbUNBQUEsV0FDSHpJLDZCQUFBZ0ksUUFBQSxTQUFBTCxHQUNBLElBQU1lLEVBQWlCZixFQUFqQmUsY0FBdUJDLHVCQUM1Qm5CLElBQXlCRSxPQUN6QkMsRUFBQUMsVUFBQWdCLFNBQUEsK0NBQUEsSUFDRGpCLEVBQVNrQixZQUFBQSxFQUFtQzFJLE1BcEMzQyxDQUFDLENBQ0YsRUEwQ0cySSx3QkFBb0JDLFdBdkN0QnpKLHdCQXdDQzBJLFFBQUEsU0FBQUMsR0F2Q0EsSUF3Q0FlLEVBQWNGLEVBQVVHLFFBQUFmLGFBQ3ZCRCxFQUFBaUIsU0FDRjlJLFdBQVVWLEdBQUFBLDBCQUE4QndJLENBQUEsRUFDeEM3SCxnQkFBaUI2SCxHQUFDdEksS0FFbEJXLE9BQUFBLFdBQUFBLEdBQ0QsT0FBQStFLGdCQUFBNEMsR0F0Q0MsQ0F3Q0EsRUF2Q0FpQixZQXdDVSxDQXZDWCxFQUVBLFNBc0NFMUUsa0JBckNELElBQUk0RCxFQXFDd0QvSSx3QkFBTWdELE9BbkNsRWhELHdCQW9DaUIwSSxRQUFoQnBELFNBQUFBLEdBQXVDcUQsRUFBTXZELFNBbEM1QzJELENBa0NvRSxFQWhDdEUsQ0FrQ0EsRUFDQS9JLHdCQUFBMEksUUFBQSxTQUFBQyxHQUVEQSxFQUFTbUIsU0FBZSxJQUFBZixFQUN2QlEsRUFBQUEsU0FBQUEsQ0FBQUEsRUFFQXJJLEVBQVU2SSxTQUFLLENBQUEsQ0FqQ2YsQ0FBQyxDQUNGLENBQ0EsSUFBTVgsZUFrQ3lCLFdBakM5QixPQWlDZ0N2SSxnQkFBT0UsQ0FBQUEsc0JBQUFBLE1BQUFBLElBaEN4QyxFQUNBLFNBZ0NHd0ksbUNBL0JGcEosb0JBaUNnQnVJLFFBQU1zQixTQUFBQSxHQWhDckIsSUFBSVIsRUFpQ1FFLEVBQU83SSxNQUFDUyxRQUFXTCxNQUFBQSxFQUFBQSxFQS9CM0J1SSxFQWtDSTFGLENBQUFBLEVBQVdnQyxhQUFVbUUsS0FBUSxHQUFrQixLQUFiVCxFQWpDekNBLEVBbUNDcEMsQ0FBQUEsRUFBZXFDLGFBQUMsS0FBQSxFQUFFcEMsRUFBWSxDQUFBcUMsRUFBQUQsYUFBQSxLQUFBLElBakMvQkQsRUFpQ3NDLENBQUVTLEVBQUFBLGFBQUFBLEtBQUFBLEdBL0J6Q1AsRUFpQ0U3SSxNQUFJb0osQ0FoQ1AsQ0FBQyxFQUNEbkosT0FpQ0ksQ0FBQVYseUJBQUFTLE1BaENKRSxlQWlDVSxDQUFJaUosaUNBQWtCbkosTUFoQ2hDRywyQkFpQ29CRixDQUFBQSw4Q0FBT0QsTUFoQzNCSSx5QkFpQ0csQ0FBQVIseUNBQUFJLE1BQUEsR0FoQ0osQ0FDQSxJQWtDR21GLDBCQUEwQmtFLFNBQUFBLEdBNUI1QixNQTZCQyxDQUNEaEYsUUFBRSxTQUFBSyxFQUFBRixHQUFBLE9BQUFBLENBQUEsRUFDRkYsV0FBTWdGLFNBQUFBLEVBQUFBLEVBQXVCeEksR0FBUSxPQUFBeUQsRUFBSmdGLEVBQUFBLEVBQUFBLENBQUFBLEVBQ2pDbEQsZUFBZ0IsU0FBQTNCLEVBQUU0RSxFQUFBQSxHQUFxQixPQUFDL0UsRUFBQUMsRUFBQSxFQUFBQSxDQUFBLENBakN4QyxFQWtDNkV1RCxFQWhDOUUsRUFFQSxTQWdDQy9HLGVBL0JBMEgsaUNBZ0NnQyxFQS9CaENkLHdCQWtDRTVELEVBakNGM0QsV0FvQ1ksR0FDYjRHLE9BQUF1QyxLQUFBdkcsVUFBQSxFQUFBNEUsUUFBQSxTQUFBNUMsR0FFRSxJQUFDMUQsSUFBT3NCLEVBQUEsRUFBQUEsRUFBQTFDLDJCQUF3Q2dFLENBQUFBLEdBQUcsQ0FHNEMsSUFEakdzRixJQUFBQSxFQUFBQSxDQUFBQSxDQUFBQSxNQUFBQSxFQUFBQSxNQUFvQ3ZKLGNBQUEsR0FDcENmLEVBQUFBLGVBQXdCMEksRUFBeUVzQixFQUFBLEVBQUFBLEdBQUFsSixPQUFBa0osQ0FBQSxHQUFBLENBQ2pHN0osSUFBQUEsRUFBQUEsS0FBb0J1SSxPQUFRLEVBQUF6SCx5QkFBS29FLEVBQUEsQ0FBQUEsRUFBQTRFLEVBQVVNLEtBQUFBLElBQUFBLEVBQWdCbkQsRUFBVWtELEVBQUFBLEdBQUFBLE1BQUFBLENBQUFBLEVBQ3JFL0osRUFBQUEsV0FBcUJ1RixHQUFDeUUsRUFBaUJsRixFQUFPbUYsRUFBRXBCLENBQUFBLEVBOUI1QyxHQUZBaEMsRUFBVzhDLEtBQUssQ0FBRTdDLE1BQU8yQyxFQUFPbkosTUFBT29KLENBQVMsQ0FBQyxFQUVoQyxJQUFiQSxFQUFnQixDQUNuQi9JLFdBQVdnSixLQUFLRixDQUFLLEVBQ3JCLEtBQ0QsQ0FBV0EsSUFBVWxKLFFBQ3BCSSxXQUFXZ0osS0FBS3BKLE1BQU0sQ0FFeEIsQ0FFQWtGLGdCQUFnQkYsR0FBVW9FLEtBQUs5QyxDQUFVLENBQzFDLENBQ0QsQ0FBQyxFQUNELElBQU0rQyxFQUF1QnhJLEtBQUs4SSxJQUFHQyxNQUFSL0ksS0FBSXlJLG1CQUFRbEosVUFBVSxDQUFBLEVBQ25EZ0csT0FBT2pGLE9BQU8sQ0FBQyxFQUFHa0ksRUFBcUIsRUFDdkN6RCxPQUFPekUsT0FBTyxDQUFDLEVBQWtFLElBQS9ESCxHQUFHMkksSUFBSTNDLE9BQU82QyxPQUFPM0UsZUFBZSxFQUFFNEUsS0FBSyxDQUFDLEVBQUcsU0FBQWxJLEdBQUMsT0FBSUEsRUFBRTdCLEtBQUssQ0FBQSxFQUFRLEVBQ3JGYSxZQUFjQyxLQUFLQyxLQUFLdUksRUFBdUIsRUFBRSxFQUNqRHRJLFdBQWFDLEdBQUdDLE1BQU0sRUFBR29JLEVBQXVCLEVBQUd6SSxXQUFXLEVBQzlENkUsTUFBTTNCLFdBQVcsRUFBRUMsU0FBUyxHQUFHLEVBQUVtQyxLQUFLbEYsR0FBRytJLFdBQVczRCxNQUFNLEVBQUVyRixXQUFXQSxVQUFVLENBQUMsRUFDbEZzRixNQUNFdkMsV0FBVyxFQUNYQyxTQUFTLEdBQUcsRUFDWm1DLEtBQUtsRixHQUFHMkUsU0FBU0MsTUFBTSxFQUFFYyxXQUFXMUYsR0FBR2dKLE9BQU8sS0FBSyxDQUFDLENBQUMsRUFFdkRqQixZQUFZLENBQ2IsQ0FFQS9ILEdBQUdNLE9BQU8sc0NBQXNDLEVBQUU0QyxHQUFHLFFBQVM4RSxZQUFZLEVBRTFFUSxtQ0FBbUMsRUFDbkN0Syx3QkFBd0IwSSxRQUFRLFNBQUFDLEdBQVEsT0FBSUEsRUFBUzRCLGlCQUFpQixTQUFVUSxlQUFlLENBQUMsQ0FBQSxFQUNoRzVLLG9CQUFvQnVJLFFBQVEsU0FBQWdCLEdBQUssT0FBSUEsRUFBTWEsaUJBQWlCLFFBQVNELGtDQUFrQyxDQUFDLENBQUEsRUFDeEcvSixzQkFBc0JnSyxpQkFBaUIsUUFBU25CLGNBQWMsRUFDOUQ5SSxpQ0FBaUNpSyxpQkFBaUIsUUFBU25CLGNBQWMiLCJmaWxlIjoiaW5kZXgubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29udHJvbGxQYW5lbENoZWNrYm94ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2ltdWxhdGlvbl9fY29udHJvbC1wYW5lbC1jaGVja2JveCcpXHJcbmNvbnN0IGNvbnRyb2xsUGFuZWxJbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2ltdWxhdGlvbl9fY29udHJvbC1wYW5lbC1pbnB1dCcpXHJcbmNvbnN0IGNvbnRyb2xsUGFuZWxJbnB1dFJvdW5kcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaW11bGF0aW9uX19jb250cm9sLXBhbmVsLWlucHV0LS1yb3VuZHMnKVxyXG5jb25zdCBjb250cm9sbFBhbmVsSW5wdXRJbml0aWFsQ2FwaXRhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaW11bGF0aW9uX19jb250cm9sLXBhbmVsLWlucHV0LS1jYXBpdGFsJylcclxuY29uc3QgY29udHJvbGxQYW5lbElucHV0QmV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpbXVsYXRpb25fX2NvbnRyb2wtcGFuZWwtaW5wdXQtLWJldCcpXHJcbmNvbnN0IGNvbnRyb2xsUGFuZWxJbnB1dE51bWJlck9mUGxheWVyc0ZvckFTdHJhdGVneSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcblx0Jy5zaW11bGF0aW9uX19jb250cm9sLXBhbmVsLWlucHV0LS1udW1iZXItcGxheWVycydcclxuKVxyXG5jb25zdCBjb250cm9sbFBhbmVsSW5wdXRDaGFuc2VPZldpbkZvclN0cmF0ZWd5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuXHQnLnNpbXVsYXRpb25fX2NvbnRyb2wtcGFuZWwtaW5wdXQtLWNoYW5zZS1vZi13aW4nXHJcbilcclxuY29uc3QgY29udHJvbGxQYW5lbElucHV0SW5mb1ZhbHVlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaW11bGF0aW9uX19jb250cm9sLXBhbmVsLWlucHV0LXZhbHVlJylcclxuY29uc3QgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpXHJcblxyXG5sZXQgcm91bmRzID0gK2NvbnRyb2xsUGFuZWxJbnB1dFJvdW5kcy52YWx1ZVxyXG5jb25zb2xlLmxvZyhyb3VuZHMpXHJcbmxldCBpbml0aWFsQ2FwaXRhbCA9ICtjb250cm9sbFBhbmVsSW5wdXRJbml0aWFsQ2FwaXRhbC52YWx1ZVxyXG5sZXQgbnVtYmVyT2ZQbGF5ZXJzRm9yU3RyYXRlZ3kgPSArY29udHJvbGxQYW5lbElucHV0TnVtYmVyT2ZQbGF5ZXJzRm9yQVN0cmF0ZWd5LnZhbHVlXHJcbmxldCBjaGFuc2VPZldpbk9mVGhlU3RyYXRlZ3kgPSArY29udHJvbGxQYW5lbElucHV0Q2hhbnNlT2ZXaW5Gb3JTdHJhdGVneS52YWx1ZSAvIDEwMFxyXG5sZXQgbGFzdFJvdW5kcyA9IFtdXHJcbmxldCBudW1MaW5lcyA9IDEwXHJcbmxldCBoZWFkZXJIZWlnaHQgPSBoZWFkZXIuY2xpZW50SGVpZ2h0XHJcbmxldCBoZWFkZXJXaWR0aCA9IGhlYWRlci5jbGllbnRXaWR0aFxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21QYXRoKCkge1xyXG5cdGxldCBkYXRhID0gW11cclxuXHRsZXQgeSA9IDE1XHJcblx0Zm9yIChsZXQgeCA9IDA7IHggPD0gMTAwOyB4ICs9IDEwKSB7XHJcblx0XHR5ICs9IChNYXRoLnJhbmRvbSgpIC0gMC43NSkgKiAxMFxyXG5cdFx0ZGF0YS5wdXNoKHsgeCwgeSB9KVxyXG5cdH1cclxuXHRyZXR1cm4gZGF0YVxyXG59XHJcbmxldCB0aWNrU3BhY2luZyA9IE1hdGguY2VpbChyb3VuZHMgLyAxMClcclxubGV0IHRpY2tWYWx1ZXMgPSBkMy5yYW5nZSgwLCByb3VuZHMgKyAxLCB0aWNrU3BhY2luZylcclxuXHJcbmNvbnN0IGhlYWRlclNjYWxlWCA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFswLCAxMDBdKS5yYW5nZShbMCwgaGVhZGVyV2lkdGhdKVxyXG5cclxuY29uc3QgaGVhZGVyU2NhbGVZID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWy0yMCwgMjBdKS5yYW5nZShbaGVhZGVySGVpZ2h0LCAwXSlcclxuXHJcbmNvbnN0IGhlYWRlckJhY2tncm91bmRTdmcgPSBkM1xyXG5cdC5zZWxlY3QoJy5oZWFkZXJfX3N2ZycpXHJcblx0LmF0dHIoJ3dpZHRoJywgaGVhZGVyV2lkdGgpXHJcblx0LmF0dHIoJ2hlaWdodCcsIGhlYWRlckhlaWdodCArIGhlYWRlckhlaWdodCAqIDAuMylcclxuXHJcbmNvbnN0IGhlYWRlckNyZWF0ZUxpbmVzID0gZDNcclxuXHQubGluZSgpXHJcblx0LngoZCA9PiBoZWFkZXJTY2FsZVgoZC54KSlcclxuXHQueShkID0+IGhlYWRlclNjYWxlWShkLnkpKVxyXG5cdC5jdXJ2ZShkMy5jdXJ2ZUxpbmVhcilcclxuXHJcbmNvbnN0IGhlYWRlckxpbmVzR3JvdXAgPSBoZWFkZXJCYWNrZ3JvdW5kU3ZnLmFwcGVuZCgnZycpXHJcblxyXG5jb25zdCBoZWFkZXJMaW5lc0RhdGEgPSBoZWFkZXJMaW5lc0dyb3VwXHJcblx0LnNlbGVjdEFsbCgnLmhlYWRlcl9fc3ZnLWxpbmUnKVxyXG5cdC5kYXRhKEFycmF5LmZyb20oeyBsZW5ndGg6IG51bUxpbmVzIH0sIGdlbmVyYXRlUmFuZG9tUGF0aCkpXHJcblxyXG5jb25zdCBoZWFkZXJMaW5lcyA9IGhlYWRlckxpbmVzRGF0YVxyXG5cdC5lbnRlcigpXHJcblx0LmFwcGVuZCgncGF0aCcpXHJcblx0LmF0dHIoJ2NsYXNzJywgJ2hlYWRlcl9fc3ZnLWxpbmUnKVxyXG5cdC5tZXJnZShoZWFkZXJMaW5lc0RhdGEpXHJcblx0LmF0dHIoJ2QnLCBoZWFkZXJDcmVhdGVMaW5lcylcclxuXHQuYXR0cignc3Ryb2tlJywgKGQsIGkpID0+IGQzLmludGVycG9sYXRlQmx1ZXMoaSAvIG51bUxpbmVzKSlcclxuXHQuYXR0cignc3Ryb2tlLXdpZHRoJywgMilcclxuXHQuYXR0cignZmlsbCcsICdub25lJylcclxuXHQuYXR0cignb3BhY2l0eScsIDAuNilcclxuXHJcbmhlYWRlckJhY2tncm91bmRTdmcub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cdGNvbnN0IFttb3VzZVgsIG1vdXNlWV0gPSBkMy5wb2ludGVyKGV2ZW50KVxyXG5cclxuXHRoZWFkZXJMaW5lcy5lYWNoKGZ1bmN0aW9uIChkKSB7XHJcblx0XHRsZXQgbmV3RGF0YSA9IGQubWFwKHBvaW50ID0+IHtcclxuXHRcdFx0bGV0IGR4ID0gaGVhZGVyU2NhbGVYKHBvaW50LngpIC0gbW91c2VYXHJcblx0XHRcdGxldCBkeSA9IGhlYWRlclNjYWxlWShwb2ludC55KSAtIG1vdXNlWVxyXG5cdFx0XHRsZXQgZGlzdGFuY2UgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpXHJcblxyXG5cdFx0XHRpZiAoZGlzdGFuY2UgPCAxMDApIHtcclxuXHRcdFx0XHQvLyBQcsOzZyBkemlhxYJhbmlhIGVmZWt0dVxyXG5cdFx0XHRcdGxldCBhbmdsZSA9IE1hdGguYXRhbjIoZHksIGR4KVxyXG5cdFx0XHRcdGxldCBmb3JjZSA9ICgxMDAgLSBkaXN0YW5jZSkgLyAyMCAvLyBTacWCYSBvZHB5Y2hhbmlhXHJcblx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdHg6IHBvaW50LnggKyBNYXRoLmNvcyhhbmdsZSkgKiBmb3JjZSxcclxuXHRcdFx0XHRcdHk6IHBvaW50LnkgKyBNYXRoLnNpbihhbmdsZSkgKiBmb3JjZSxcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHBvaW50XHJcblx0XHR9KVxyXG5cdFx0ZDMuc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyMDApLmVhc2UoZDMuZWFzZUxpbmVhcikuYXR0cignZCcsIGhlYWRlckNyZWF0ZUxpbmVzKG5ld0RhdGEpKVxyXG5cdH0pXHJcbn0pXHJcbmxldCB0aW1lb3V0XHJcbmhlYWRlckJhY2tncm91bmRTdmcub24oJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7XHJcblx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpXHJcblx0dGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0aGVhZGVyTGluZXNcclxuXHRcdFx0LnRyYW5zaXRpb24oKVxyXG5cdFx0XHQuZHVyYXRpb24oNTAwKVxyXG5cdFx0XHQuZWFzZShkMy5lYXNlQ3ViaWNPdXQpXHJcblx0XHRcdC5hdHRyKCdkJywgZCA9PiBoZWFkZXJDcmVhdGVMaW5lcyhkKSlcclxuXHR9LCAzMDApXHJcbn0pXHJcbmNvbnN0IHN0cmF0ZWdpZXMgPSB7XHJcblx0ZmxhdEJldDogKGNhcGl0YWwsIGJldCkgPT4gYmV0LFxyXG5cdG1hcnRpbmdhbGU6IChjYXBpdGFsLCBiZXQsIHByZXZMb3NzKSA9PiAocHJldkxvc3MgPyBiZXQgKiAyIDogYmV0KSxcclxuXHRhbnRpTWFydGluZ2FsZTogKGNhcGl0YWwsIGJldCwgcHJldkxvc3MpID0+IChwcmV2TG9zcyA/IGJldCA6IGJldCAqIDIpLFxyXG59XHJcbmNvbnN0IGJhc2VDb2xvcnMgPSB7XHJcblx0ZmxhdEJldDogZDMuaHNsKCdncmVlbicpLFxyXG5cdG1hcnRpbmdhbGU6IGQzLmhzbCgncmVkJyksXHJcblx0YW50aU1hcnRpbmdhbGU6IGQzLmhzbCgnYmx1ZScpLFxyXG59XHJcblxyXG4vLyBGdW5jdGlvbiB0byBnZW5lcmF0ZSBkaWZmZXJlbnQgc2hhZGVzIGZvciBtdWx0aXBsZSBwbGF5ZXJzXHJcbmNvbnN0IGdldFNoYWRlZENvbG9yID0gKHN0cmF0ZWd5LCBwbGF5ZXJJbmRleCwgdG90YWxQbGF5ZXJzKSA9PiB7XHJcblx0bGV0IGJhc2VDb2xvciA9IGJhc2VDb2xvcnNbc3RyYXRlZ3ldIC8vIEdldCBiYXNlIGNvbG9yXHJcblx0bGV0IGZhY3RvciA9IDEgLSAocGxheWVySW5kZXggLyAodG90YWxQbGF5ZXJzICsgMSkpICogMC43NVxyXG5cdGxldCBoRmFjdG9yID0gKHBsYXllckluZGV4IC8gdG90YWxQbGF5ZXJzKSAqIDcwXHJcblx0cmV0dXJuIGQzLmhzbChiYXNlQ29sb3IuaCArIGhGYWN0b3IsIGJhc2VDb2xvci5zLCBiYXNlQ29sb3IubCAqIGZhY3RvcikuZm9ybWF0UmdiKClcclxufVxyXG5cclxubGV0IHN0cmF0ZWd5UGxheWVycyA9IHtcclxuXHRmbGF0QmV0OiBbXSxcclxuXHRtYXJ0aW5nYWxlOiBbXSxcclxuXHRhbnRpTWFydGluZ2FsZTogW10sXHJcbn1cclxuXHJcbmNvbnN0IHdpZHRoID0gNjAwLFxyXG5cdGhlaWdodCA9IDM1MCxcclxuXHRtYXJnaW4gPSA1MFxyXG5cclxuY29uc3Qgc2NhbGVYID0gZDNcclxuXHQuc2NhbGVMaW5lYXIoKVxyXG5cdC5kb21haW4oWzAsIHJvdW5kc10pXHJcblx0LnJhbmdlKFttYXJnaW4sIHdpZHRoIC0gbWFyZ2luXSlcclxuY29uc3Qgc2NhbGVZID0gZDNcclxuXHQuc2NhbGVMaW5lYXIoKVxyXG5cdC5kb21haW4oWzAsIGluaXRpYWxDYXBpdGFsICogMl0pXHJcblx0LnJhbmdlKFtoZWlnaHQgLSBtYXJnaW4sIG1hcmdpbl0pXHJcblxyXG4vLyBUd29yemVuaWUgU1ZHXHJcbmNvbnN0IHN2ZyA9IGQzLnNlbGVjdCgnLnNpbXVsYXRpb25fX2NoYXJ0JykuYXR0cignd2lkdGgnLCB3aWR0aCkuYXR0cignaGVpZ2h0JywgaGVpZ2h0KVxyXG5jb25zdCBncmlkR3JvdXAgPSBzdmcuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAnc2ltdWxhdGlvbl9fY2hhcnQtZ3JpZC1ncm91cCcpXHJcblxyXG5cclxuY29uc3QgeEF4aXMgPSBzdmdcclxuXHQuYXBwZW5kKCdnJylcclxuXHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCR7aGVpZ2h0IC0gbWFyZ2lufSlgKVxyXG5cdC5jYWxsKGQzLmF4aXNCb3R0b20oc2NhbGVYKS50aWNrVmFsdWVzKHRpY2tWYWx1ZXMpKVxyXG5jb25zdCB5QXhpcyA9IHN2Zy5hcHBlbmQoJ2cnKS5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7bWFyZ2lufSwwKWApLmNhbGwoZDMuYXhpc0xlZnQoc2NhbGVZKSlcclxuXHJcbmNvbnN0IHlHcmlkID0gZDNcclxuXHQuYXhpc0xlZnQoc2NhbGVZKVxyXG5cdC50aWNrU2l6ZSgtd2lkdGggKyAyICogbWFyZ2luKVxyXG5cdC50aWNrRm9ybWF0KCcnKVxyXG5cclxuY29uc3QgbGluZSA9IGQzXHJcblx0LmxpbmUoKVxyXG5cdC54KGQgPT4gc2NhbGVYKGQuaW5kZXgpKVxyXG5cdC55KGQgPT4gc2NhbGVZKGQudmFsdWUpKVxyXG5cdC5jdXJ2ZShkMy5jdXJ2ZUxpbmVhcilcclxuXHJcbmNvbnN0IHBhdGhHcm91cCA9IHN2Zy5hcHBlbmQoJ2cnKVxyXG5jb25zdCBwb2ludHNHcm91cCA9IHN2Zy5hcHBlbmQoJ2cnKVxyXG5jb25zdCB0b29sdGlwID0gc3ZnLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ3NpbXVsYXRpb25fX2NoYXJ0LXRvb2x0aXAnKVxyXG5jb25zdCB0b29sdGlwVGV4dCA9IHRvb2x0aXAuYXBwZW5kKCd0ZXh0JylcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUNoYXJ0KCkge1xyXG5cdGdyaWRHcm91cC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7bWFyZ2lufSwwKWApLmNhbGwoeUdyaWQpXHJcblxyXG5cdGNvbnN0IHN0cmF0ZWd5RGF0YSA9IE9iamVjdC5lbnRyaWVzKHN0cmF0ZWd5UGxheWVycykuZmxhdE1hcCgoW3N0cmF0ZWd5LCBwbGF5ZXJzXSkgPT5cclxuXHRcdHBsYXllcnMubWFwKChwbGF5ZXJEYXRhLCBpbmRleCkgPT4gKHtcclxuXHRcdFx0c3RyYXRlZ3ksXHJcblx0XHRcdHBsYXllckRhdGEsXHJcblx0XHRcdHBsYXllckluZGV4OiBpbmRleCxcclxuXHRcdFx0dG90YWxQbGF5ZXJzOiBwbGF5ZXJzLmxlbmd0aCxcclxuXHRcdH0pKVxyXG5cdClcclxuXHQvLyBjb25zb2xlLmxvZyhzdHJhdGVneURhdGEpXHJcblx0Y29uc3Qgc3RyYXRlZ3lMaW5lcyA9IHBhdGhHcm91cC5zZWxlY3RBbGwoJy5zdHJhdGVneS1saW5lJykuZGF0YShzdHJhdGVneURhdGEpXHJcblxyXG5cdHN0cmF0ZWd5TGluZXNcclxuXHRcdC5lbnRlcigpXHJcblx0XHQuYXBwZW5kKCdwYXRoJylcclxuXHRcdC5hdHRyKCdjbGFzcycsICdzdHJhdGVneS1saW5lJylcclxuXHRcdC5hdHRyKCdzdHJva2UnLCBkID0+IGdldFNoYWRlZENvbG9yKGQuc3RyYXRlZ3ksIGQucGxheWVySW5kZXgsIGQudG90YWxQbGF5ZXJzKSlcclxuXHRcdC5hdHRyKCdzdHJva2Utd2lkdGgnLCAyKVxyXG5cdFx0LmF0dHIoJ2ZpbGwnLCAnbm9uZScpXHJcblx0XHQuYXR0cignZCcsIGQgPT4gbGluZShkLnBsYXllckRhdGEpKVxyXG5cdFx0LmVhY2goZnVuY3Rpb24gKGQpIHtcclxuXHRcdFx0Y29uc3QgdG90YWxMZW5ndGggPSB0aGlzLmdldFRvdGFsTGVuZ3RoKClcclxuXHRcdFx0ZDMuc2VsZWN0KHRoaXMpXHJcblx0XHRcdFx0LmF0dHIoJ3N0cm9rZS1kYXNoYXJyYXknLCB0b3RhbExlbmd0aCArICcgJyArIHRvdGFsTGVuZ3RoKVxyXG5cdFx0XHRcdC5hdHRyKCdzdHJva2UtZGFzaG9mZnNldCcsIHRvdGFsTGVuZ3RoKVxyXG5cdFx0XHRcdC50cmFuc2l0aW9uKClcclxuXHRcdFx0XHQuZHVyYXRpb24oNzUwKVxyXG5cdFx0XHRcdC5lYXNlKGQzLmVhc2VMaW5lYXIpXHJcblx0XHRcdFx0LmF0dHIoJ3N0cm9rZS1kYXNob2Zmc2V0JywgMClcclxuXHRcdH0pXHJcblx0XHQubWVyZ2Uoc3RyYXRlZ3lMaW5lcylcclxuXHRcdC5hdHRyKCdkJywgZCA9PiBsaW5lKGQucGxheWVyRGF0YSkpXHJcblxyXG5cdHN0cmF0ZWd5TGluZXMuZXhpdCgpLnJlbW92ZSgpXHJcbn1cclxuXHJcbmNvbnN0IGNoYW5nZUNvbnRyb2xsUGFuZWxJbnB1dEluZm9WYWx1ZXMgPSAoKSA9PiB7XHJcblx0Y29udHJvbGxQYW5lbElucHV0SW5mb1ZhbHVlcy5mb3JFYWNoKEluZm9WYWx1ZSA9PiB7XHJcblx0XHRjb25zdCBpbnB1dE9mSW5mb1ZhbHVlID0gSW5mb1ZhbHVlLnBhcmVudEVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nXHJcblxyXG5cdFx0SW5mb1ZhbHVlLnRleHRDb250ZW50ID0gaW5wdXRPZkluZm9WYWx1ZS52YWx1ZVxyXG5cclxuXHRcdGlmIChpbnB1dE9mSW5mb1ZhbHVlLmdldEF0dHJpYnV0ZSgnZGF0YS1hZGQtcGVyY2VudGFnZScpKSB7XHJcblx0XHRcdEluZm9WYWx1ZS50ZXh0Q29udGVudCA9IGAke0luZm9WYWx1ZS50ZXh0Q29udGVudH0lYFxyXG5cdFx0fVxyXG5cdH0pXHJcbn1cclxuXHJcbmNvbnN0IGNoYW5nZUFDb250cm9sbFBhbmVsSW5wdXRJbmZvVmFsdWUgPSAoKSA9PiB7XHJcblx0Y29udHJvbGxQYW5lbElucHV0SW5mb1ZhbHVlcy5mb3JFYWNoKEluZm9WYWx1ZSA9PiB7XHJcblx0XHRjb25zdCBpbnB1dE9mSW5mb1ZhbHVlID0gSW5mb1ZhbHVlLnBhcmVudEVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZ1xyXG5cdFx0aWYgKGlucHV0T2ZJbmZvVmFsdWUgPT09IHRoaXMpIHtcclxuXHRcdFx0aWYgKEluZm9WYWx1ZS5jbGFzc0xpc3QuY29udGFpbnMoJ3NpbXVsYXRpb25fX2NvbnRyb2wtcGFuZWwtaW5mby12YWx1ZS0tY3VycmVudCcpKSB7XHJcblx0XHRcdFx0SW5mb1ZhbHVlLnRleHRDb250ZW50ID0gaW5wdXRPZkluZm9WYWx1ZS52YWx1ZVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSlcclxufVxyXG5cclxuY29uc3QgcmVtb3ZlU3RyYXRlZ3lGcm9tQ2hhcnQgPSAoKSA9PiB7XHJcblx0Y29udHJvbGxQYW5lbENoZWNrYm94ZXMuZm9yRWFjaChjaGVja2JveCA9PiB7XHJcblx0XHRjb25zdCBzdHJhdGVneU5hbWUgPSBjaGVja2JveC5kYXRhc2V0LnN0cmF0ZWd5TmFtZVxyXG5cdFx0aWYgKGNoZWNrYm94LmNoZWNrZWQpIHtcclxuXHRcdFx0c3RyYXRlZ2llc1tzdHJhdGVneU5hbWVdID0gaGFuZGxlU3RyYXRlZ2llc0Z1bmN0aW9ucyhzdHJhdGVneU5hbWUpXHJcblx0XHRcdHN0cmF0ZWd5UGxheWVyc1tzdHJhdGVneU5hbWVdID0gW11cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRlbGV0ZSBzdHJhdGVnaWVzW3N0cmF0ZWd5TmFtZV1cclxuXHRcdFx0ZGVsZXRlIHN0cmF0ZWd5UGxheWVyc1tzdHJhdGVneU5hbWVdXHJcblx0XHR9XHJcblx0fSlcclxuXHR1cGRhdGVDaGFydCgpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRpc2FibGVDaGVja2JveCgpIHtcclxuXHRsZXQgbnVtT2ZTZWxlY3RlZENoZWNrYm94ZXMgPSBjb250cm9sbFBhbmVsQ2hlY2tib3hlcy5sZW5ndGhcclxuXHJcblx0Y29udHJvbGxQYW5lbENoZWNrYm94ZXMuZm9yRWFjaChjaGVja2JveCA9PiB7XHJcblx0XHRpZiAoIWNoZWNrYm94LmNoZWNrZWQpIHtcclxuXHRcdFx0bnVtT2ZTZWxlY3RlZENoZWNrYm94ZXMtLVxyXG5cdFx0fVxyXG5cdH0pXHJcblx0Y29udHJvbGxQYW5lbENoZWNrYm94ZXMuZm9yRWFjaChjaGVja2JveCA9PiB7XHJcblx0XHRpZiAoY2hlY2tib3guY2hlY2tlZCAmJiBudW1PZlNlbGVjdGVkQ2hlY2tib3hlcyA9PT0gMSkge1xyXG5cdFx0XHRjaGVja2JveC5kaXNhYmxlZCA9IHRydWVcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGNoZWNrYm94LmRpc2FibGVkID0gZmFsc2VcclxuXHRcdH1cclxuXHR9KVxyXG59XHJcbmNvbnN0IGNoYW5nZUJldFZhbHVlID0gKCkgPT4ge1xyXG5cdHJldHVybiBpbml0aWFsQ2FwaXRhbCAqICgrY29udHJvbGxQYW5lbElucHV0QmV0LnZhbHVlIC8gMTAwKVxyXG59XHJcbmZ1bmN0aW9uIGNvcnJlY3RDb250cm9sbFBhbmVsSW5wdXRzVmFsdWVzKCkge1xyXG5cdGNvbnRyb2xsUGFuZWxJbnB1dHMuZm9yRWFjaChpbnB1dCA9PiB7XHJcblx0XHRsZXQgaW5wdXRWYWx1ZSA9IGlucHV0LnZhbHVlLnJlcGxhY2UoL1xcRC9nLCAnJylcclxuXHJcblx0XHRpZiAoaW5wdXRWYWx1ZSA8ICtpbnB1dC5nZXRBdHRyaWJ1dGUoJ21pbicpIHx8IGlucHV0VmFsdWUgPT09ICcnKSB7XHJcblx0XHRcdGlucHV0VmFsdWUgPSAraW5wdXQuZ2V0QXR0cmlidXRlKCdtaW4nKVxyXG5cdFx0fSBlbHNlIGlmIChpbnB1dFZhbHVlID4gK2lucHV0LmdldEF0dHJpYnV0ZSgnbWF4JykpIHtcclxuXHRcdFx0aW5wdXRWYWx1ZSA9ICtpbnB1dC5nZXRBdHRyaWJ1dGUoJ21heCcpXHJcblx0XHR9XHJcblx0XHRpbnB1dC52YWx1ZSA9IGlucHV0VmFsdWVcclxuXHR9KVxyXG5cdHJvdW5kcyA9ICtjb250cm9sbFBhbmVsSW5wdXRSb3VuZHMudmFsdWVcclxuXHRpbml0aWFsQ2FwaXRhbCA9ICtjb250cm9sbFBhbmVsSW5wdXRJbml0aWFsQ2FwaXRhbC52YWx1ZVxyXG5cdG51bWJlck9mUGxheWVyc0ZvclN0cmF0ZWd5ID0gK2NvbnRyb2xsUGFuZWxJbnB1dE51bWJlck9mUGxheWVyc0ZvckFTdHJhdGVneS52YWx1ZVxyXG5cdGNoYW5zZU9mV2luT2ZUaGVTdHJhdGVneSA9ICtjb250cm9sbFBhbmVsSW5wdXRDaGFuc2VPZldpbkZvclN0cmF0ZWd5LnZhbHVlIC8gMTAwXHJcbn1cclxuY29uc3QgaGFuZGxlU3RyYXRlZ2llc0Z1bmN0aW9ucyA9IHN0cmF0ZWd5TmFtZSA9PiB7XHJcblx0Y29uc3Qgc3RyYXRlZ2llc0Z1bmN0aW9ucyA9IHtcclxuXHRcdGZsYXRCZXQ6IChjYXBpdGFsLCBiZXQpID0+IGJldCxcclxuXHRcdG1hcnRpbmdhbGU6IChjYXBpdGFsLCBiZXQsIHByZXZMb3NzKSA9PiAocHJldkxvc3MgPyBiZXQgKiAyIDogYmV0KSxcclxuXHRcdGFudGlNYXJ0aW5nYWxlOiAoY2FwaXRhbCwgYmV0LCBwcmV2TG9zcykgPT4gKHByZXZMb3NzID8gYmV0IDogYmV0ICogMiksXHJcblx0fVxyXG5cdHJldHVybiBzdHJhdGVnaWVzRnVuY3Rpb25zW3N0cmF0ZWd5TmFtZV1cclxufVxyXG5cclxuZnVuY3Rpb24gc2ltdWxhdGVHYW1lKCkge1xyXG5cdGNvcnJlY3RDb250cm9sbFBhbmVsSW5wdXRzVmFsdWVzKClcclxuXHRyZW1vdmVTdHJhdGVneUZyb21DaGFydCgpXHJcblx0bGFzdFJvdW5kcyA9IFtdXHJcblx0T2JqZWN0LmtleXMoc3RyYXRlZ2llcykuZm9yRWFjaChzdHJhdGVneSA9PiB7XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mUGxheWVyc0ZvclN0cmF0ZWd5OyBpKyspIHtcclxuXHRcdFx0bGV0IHBsYXllckRhdGEgPSBbeyBpbmRleDogMCwgdmFsdWU6IGluaXRpYWxDYXBpdGFsIH1dXHJcblx0XHRcdGxldCBiZXQgPSBjaGFuZ2VCZXRWYWx1ZSgpXHJcblxyXG5cdFx0XHRmb3IgKGxldCByb3VuZCA9IDE7IHJvdW5kIDw9IHJvdW5kczsgcm91bmQrKykge1xyXG5cdFx0XHRcdGxldCBjaGFuZ2UgPSBNYXRoLnJhbmRvbSgpIDwgY2hhbnNlT2ZXaW5PZlRoZVN0cmF0ZWd5ID8gYmV0IDogLWJldFxyXG5cdFx0XHRcdGxldCBuZXdWYWx1ZSA9IE1hdGgubWF4KDAsIHBsYXllckRhdGFbcm91bmQgLSAxXS52YWx1ZSArIGNoYW5nZSlcclxuXHJcblx0XHRcdFx0YmV0ID0gc3RyYXRlZ2llc1tzdHJhdGVneV0obmV3VmFsdWUsIGJldCwgY2hhbmdlIDwgMClcclxuXHJcblx0XHRcdFx0cGxheWVyRGF0YS5wdXNoKHsgaW5kZXg6IHJvdW5kLCB2YWx1ZTogbmV3VmFsdWUgfSlcclxuXHJcblx0XHRcdFx0aWYgKG5ld1ZhbHVlID09PSAwKSB7XHJcblx0XHRcdFx0XHRsYXN0Um91bmRzLnB1c2gocm91bmQpXHJcblx0XHRcdFx0XHRicmVha1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAocm91bmQgPT09IHJvdW5kcykge1xyXG5cdFx0XHRcdFx0bGFzdFJvdW5kcy5wdXNoKHJvdW5kcylcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHN0cmF0ZWd5UGxheWVyc1tzdHJhdGVneV0ucHVzaChwbGF5ZXJEYXRhKVxyXG5cdFx0fVxyXG5cdH0pXHJcblx0Y29uc3QgbWF4VmFsdWVPZkxhc3RSb3VuZHMgPSBNYXRoLm1heCguLi5sYXN0Um91bmRzKVxyXG5cdHNjYWxlWC5kb21haW4oWzAsIG1heFZhbHVlT2ZMYXN0Um91bmRzXSlcclxuXHRzY2FsZVkuZG9tYWluKFswLCBkMy5tYXgoT2JqZWN0LnZhbHVlcyhzdHJhdGVneVBsYXllcnMpLmZsYXQoMiksIGQgPT4gZC52YWx1ZSkgKiAxLjFdKVxyXG5cdHRpY2tTcGFjaW5nID0gTWF0aC5jZWlsKG1heFZhbHVlT2ZMYXN0Um91bmRzIC8gMTApXHJcblx0dGlja1ZhbHVlcyA9IGQzLnJhbmdlKDAsIG1heFZhbHVlT2ZMYXN0Um91bmRzICsgMSwgdGlja1NwYWNpbmcpXHJcblx0eEF4aXMudHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMCkuY2FsbChkMy5heGlzQm90dG9tKHNjYWxlWCkudGlja1ZhbHVlcyh0aWNrVmFsdWVzKSlcclxuXHR5QXhpc1xyXG5cdFx0LnRyYW5zaXRpb24oKVxyXG5cdFx0LmR1cmF0aW9uKDUwMClcclxuXHRcdC5jYWxsKGQzLmF4aXNMZWZ0KHNjYWxlWSkudGlja0Zvcm1hdChkMy5mb3JtYXQoJy4ycycpKSlcclxuXHJcblx0dXBkYXRlQ2hhcnQoKVxyXG59XHJcblxyXG5kMy5zZWxlY3QoJy5zaW11bGF0aW9uX19jb250cm9sLXBhbmVsLWJ0bi1zdGFydCcpLm9uKCdjbGljaycsIHNpbXVsYXRlR2FtZSlcclxuXHJcbmNoYW5nZUNvbnRyb2xsUGFuZWxJbnB1dEluZm9WYWx1ZXMoKVxyXG5jb250cm9sbFBhbmVsQ2hlY2tib3hlcy5mb3JFYWNoKGNoZWNrYm94ID0+IGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGRpc2FibGVDaGVja2JveCkpXHJcbmNvbnRyb2xsUGFuZWxJbnB1dHMuZm9yRWFjaChpbnB1dCA9PiBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGNoYW5nZUNvbnRyb2xsUGFuZWxJbnB1dEluZm9WYWx1ZXMpKVxyXG5jb250cm9sbFBhbmVsSW5wdXRCZXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBjaGFuZ2VCZXRWYWx1ZSlcclxuY29udHJvbGxQYW5lbElucHV0SW5pdGlhbENhcGl0YWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBjaGFuZ2VCZXRWYWx1ZSlcclxuIl19
