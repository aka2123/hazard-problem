var _this=void 0;function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){var a;if(e)return"string"==typeof e?_arrayLikeToArray(e,t):"Map"===(a="Object"===(a={}.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:a)||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?_arrayLikeToArray(e,t):void 0}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=Array(t);a<t;a++)n[a]=e[a];return n}function _iterableToArrayLimit(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,l,o,i=[],u=!0,s=!1;try{if(l=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;u=!1}else for(;!(u=(n=l.call(a)).done)&&(i.push(n.value),i.length!==t);u=!0);}catch(e){s=!0,r=e}finally{try{if(!u&&null!=a.return&&(o=a.return(),Object(o)!==o))return}finally{if(s)throw r}}return i}}function _arrayWithHoles(e){if(Array.isArray(e))return e}var timeout,controllPanelCheckboxes=document.querySelectorAll(".simulation__control-panel-checkbox"),controllPanelInputs=document.querySelectorAll(".simulation__control-panel-input"),controllPanelInputRounds=document.querySelector(".simulation__control-panel-input--rounds"),controllPanelInputInitialCapital=document.querySelector(".simulation__control-panel-input--capital"),controllPanelInputBet=document.querySelector(".simulation__control-panel-input--bet"),controllPanelInputNumberOfPlayersForAStrategy=document.querySelector(".simulation__control-panel-input--number-players"),controllPanelInputChanseOfWinForStrategy=document.querySelector(".simulation__control-panel-input--chanse-of-win"),controllPanelInputInfoValues=document.querySelectorAll(".simulation__control-panel-input-value"),header=document.querySelector(".header"),width=320,height=200,margin=45,mediaQuerySmall=window.matchMedia("(min-width: 576px)"),mediaQueryMedium=window.matchMedia("(min-width: 768px)"),mediaQueryExtraLarge=window.matchMedia("(min-width: 1200px)"),rounds=+controllPanelInputRounds.value,initialCapital=+controllPanelInputInitialCapital.value,numberOfPlayersForStrategy=+controllPanelInputNumberOfPlayersForAStrategy.value,chanseOfWinOfTheStrategy=+controllPanelInputChanseOfWinForStrategy.value/100,lastRounds=[],numLines=10,headerHeight=header.clientHeight,headerWidth=(console.log(headerHeight),header.clientWidth),tickSpacing=Math.ceil(rounds/10),tickValues=d3.range(0,rounds+1,tickSpacing),headerScaleX=d3.scaleLinear().domain([0,100]).range([0,headerWidth]),headerScaleY=d3.scaleLinear().domain([-20,20]).range([headerHeight,0]),headerBackgroundSvg=d3.select(".header__svg").attr("width",headerWidth).attr("height",headerHeight+.3*headerHeight),headerCreateLines=d3.line().x(function(e){return headerScaleX(e.x)}).y(function(e){return headerScaleY(e.y)}).curve(d3.curveLinear),headerLinesGroup=headerBackgroundSvg.append("g"),headerLinesData=headerLinesGroup.selectAll(".header__svg-line").data(Array.from({length:numLines},generateRandomPath)),headerLines=headerLinesData.enter().append("path").attr("class","header__svg-line").merge(headerLinesData).attr("d",headerCreateLines).attr("stroke",function(e,t){return d3.interpolateBlues(t/numLines)}).attr("stroke-width",2).attr("fill","none").attr("opacity",.6),strategies=(headerBackgroundSvg.on("mousemove",function(e){var e=_slicedToArray(d3.pointer(e),2),r=e[0],l=e[1];headerLines.each(function(e){e=e.map(function(e){var t=headerScaleX(e.x)-r,a=headerScaleY(e.y)-l,n=Math.sqrt(t*t+a*a);return n<100?(a=Math.atan2(a,t),t=(100-n)/20,{x:e.x+Math.cos(a)*t,y:e.y+Math.sin(a)*t}):e});d3.select(this).transition().duration(200).ease(d3.easeLinear).attr("d",headerCreateLines(e))})}),headerBackgroundSvg.on("mouseleave",function(){clearTimeout(timeout),timeout=setTimeout(function(){headerLines.transition().duration(500).ease(d3.easeCubicOut).attr("d",function(e){return headerCreateLines(e)})},300)}),{flatBet:function(e,t){return t},martingale:function(e,t,a){return a?2*t:t},antiMartingale:function(e,t,a){return a?t:2*t}}),baseColors={flatBet:d3.hsl("green"),martingale:d3.hsl("red"),antiMartingale:d3.hsl("blue")},getShadedColor=function(e,t,a){e=baseColors[e];return d3.hsl(e.h+t/a*70,e.s,e.l*(1-t/(a+1)*.75)).formatRgb()},strategyPlayers={flatBet:[],martingale:[],antiMartingale:[]},scaleX=(mediaQuerySmall.matches&&(width=400,height=250),mediaQueryMedium.matches&&(width=500,height=300),mediaQueryExtraLarge.matches&&(width=600,height=350),d3.scaleLinear().domain([0,rounds]).range([margin,width-margin])),scaleY=d3.scaleLinear().domain([0,2*initialCapital]).range([height-margin,margin]),svg=d3.select(".simulation__chart").attr("width",width).attr("height",height),gridGroup=svg.append("g").attr("class","simulation__chart-grid-group"),xAxis=svg.append("g").attr("transform","translate(0,".concat(height-margin,")")).call(d3.axisBottom(scaleX).tickValues(tickValues)),yAxis=svg.append("g").attr("transform","translate(".concat(margin,",0)")).call(d3.axisLeft(scaleY)),yGrid=d3.axisLeft(scaleY).tickSize(2*margin-width).tickFormat(""),line=d3.line().x(function(e){return scaleX(e.index)}).y(function(e){return scaleY(e.value)}).curve(d3.curveLinear),pathGroup=svg.append("g"),pointsGroup=svg.append("g"),tooltip=svg.append("g").attr("class","simulation__chart-tooltip"),tooltipText=tooltip.append("text");function updateChart(){gridGroup.attr("transform","translate(".concat(margin,",0)")).call(yGrid);var e=Object.entries(strategyPlayers).flatMap(function(e){var e=_slicedToArray(e,2),a=e[0],n=e[1];return n.map(function(e,t){return{strategy:a,playerData:e,playerIndex:t,totalPlayers:n.length}})}),e=pathGroup.selectAll(".strategy-line").data(e);e.enter().append("path").attr("class","strategy-line").attr("stroke",function(e){return getShadedColor(e.strategy,e.playerIndex,e.totalPlayers)}).attr("stroke-width",2).attr("fill","none").attr("d",function(e){return line(e.playerData)}).each(function(e){var t=this.getTotalLength();d3.select(this).attr("stroke-dasharray",t+" "+t).attr("stroke-dashoffset",t).transition().duration(750).ease(d3.easeLinear).attr("stroke-dashoffset",0)}).merge(e).attr("d",function(e){return line(e.playerData)}),e.exit().remove()}var changeControllPanelInputInfoValues=function(){controllPanelInputInfoValues.forEach(function(e){var t=e.parentElement.nextElementSibling;e.textContent=t.value,t.getAttribute("data-add-percentage")&&(e.textContent="".concat(e.textContent,"%"))})},changeAControllPanelInputInfoValue=function(){controllPanelInputInfoValues.forEach(function(e){var t=e.parentElement.previousElementSibling;t===_this&&e.classList.contains("simulation__control-panel-info-value--current")&&(e.textContent=t.value)})};function generateRandomPath(){for(var e=[],t=15,a=0;a<=100;a+=10)t+=10*(Math.random()-.75),e.push({x:a,y:t});return e}var removeStrategyFromChart=function(){controllPanelCheckboxes.forEach(function(e){var t=e.dataset.strategyName;e.checked?(strategies[t]=handleStrategiesFunctions(t),strategyPlayers[t]=[]):(delete strategies[t],delete strategyPlayers[t])}),updateChart()};function disableCheckbox(){var t=controllPanelCheckboxes.length;controllPanelCheckboxes.forEach(function(e){e.checked||t--}),controllPanelCheckboxes.forEach(function(e){e.checked&&1===t?e.disabled=!0:e.disabled=!1})}var changeBetValue=function(){return initialCapital*(+controllPanelInputBet.value/100)};function correctControllPanelInputsValues(){controllPanelInputs.forEach(function(e){var t=e.value.replace(/\D/g,"");t<+e.getAttribute("min")||""===t?t=+e.getAttribute("min"):t>+e.getAttribute("max")&&(t=+e.getAttribute("max")),e.value=t}),rounds=+controllPanelInputRounds.value,initialCapital=+controllPanelInputInitialCapital.value,numberOfPlayersForStrategy=+controllPanelInputNumberOfPlayersForAStrategy.value,chanseOfWinOfTheStrategy=+controllPanelInputChanseOfWinForStrategy.value/100}var handleStrategiesFunctions=function(e){return{flatBet:function(e,t){return t},martingale:function(e,t,a){return a?2*t:t},antiMartingale:function(e,t,a){return a?t:2*t}}[e]};function simulateGame(){correctControllPanelInputsValues(),removeStrategyFromChart(),lastRounds=[],Object.keys(strategies).forEach(function(e){for(var t=0;t<numberOfPlayersForStrategy;t++){for(var a=[{index:0,value:initialCapital}],n=changeBetValue(),r=1;r<=rounds;r++){var l=Math.random()<chanseOfWinOfTheStrategy?n:-n,o=Math.max(0,a[r-1].value+l),n=strategies[e](o,n,l<0);if(a.push({index:r,value:o}),0===o){lastRounds.push(r);break}r===rounds&&lastRounds.push(rounds)}strategyPlayers[e].push(a)}});var e=Math.max.apply(Math,_toConsumableArray(lastRounds));scaleX.domain([0,e]),scaleY.domain([0,1.1*d3.max(Object.values(strategyPlayers).flat(2),function(e){return e.value})]),tickSpacing=Math.ceil(e/10),tickValues=d3.range(0,e+1,tickSpacing),xAxis.transition().duration(500).call(d3.axisBottom(scaleX).tickValues(tickValues)),yAxis.transition().duration(500).call(d3.axisLeft(scaleY).tickFormat(d3.format(".2s"))),updateChart()}d3.select(".simulation__control-panel-btn-start").on("click",simulateGame),changeControllPanelInputInfoValues(),controllPanelCheckboxes.forEach(function(e){return e.addEventListener("change",disableCheckbox)}),controllPanelInputs.forEach(function(e){return e.addEventListener("input",changeControllPanelInputInfoValues)}),controllPanelInputBet.addEventListener("input",changeBetValue),controllPanelInputInitialCapital.addEventListener("input",changeBetValue);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
