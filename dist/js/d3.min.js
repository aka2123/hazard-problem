var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject10,_templateObject11,_templateObject12,_templateObject13,_templateObject14,_templateObject15,_templateObject16,_templateObject17,_templateObject18;function _readOnlyError(t){throw new TypeError('"'+t+'" is read-only')}function _taggedTemplateLiteral(t,n){return n=n||t.slice(0),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(n)}}))}function _defineProperty(t,n,e){return(n=_toPropertyKey(n))in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function _slicedToArray(t,n){return _arrayWithHoles(t)||_iterableToArrayLimit(t,n)||_unsupportedIterableToArray(t,n)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(t,n){var e=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=e){var r,i,o,a,u=[],c=!0,f=!1;try{if(o=(e=e.call(t)).next,0===n){if(Object(e)!==e)return;c=!1}else for(;!(c=(r=o.call(e)).done)&&(u.push(r.value),u.length!==n);c=!0);}catch(t){f=!0,i=t}finally{try{if(!c&&null!=e.return&&(a=e.return(),Object(a)!==a))return}finally{if(f)throw i}}return u}}function _arrayWithHoles(t){if(Array.isArray(t))return t}function _callSuper(t,n,e){return n=_getPrototypeOf(n),_possibleConstructorReturn(t,_isNativeReflectConstruct()?Reflect.construct(n,e||[],_getPrototypeOf(t).constructor):n.apply(t,e))}function _possibleConstructorReturn(t,n){if(n&&("object"==_typeof(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _superPropGet(t,n,e,r){var i=_get(_getPrototypeOf(1&r?t.prototype:t),n,e);return 2&r&&"function"==typeof i?function(t){return i.apply(e,t)}:i}function _get(){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,n,e){var r=_superPropBase(t,n);if(r)return(r=Object.getOwnPropertyDescriptor(r,n)).get?r.get.call(arguments.length<3?t:e):r.value}).apply(null,arguments)}function _superPropBase(t,n){for(;!{}.hasOwnProperty.call(t,n)&&null!==(t=_getPrototypeOf(t)););return t}function _inherits(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),n&&_setPrototypeOf(t,n)}function _wrapNativeSuper(t){var e="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(t){if(null===t||!_isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return _construct(t,arguments,_getPrototypeOf(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(n,t)})(t)}function _construct(t,n,e){var r;return _isNativeReflectConstruct()?Reflect.construct.apply(null,arguments):((r=[null]).push.apply(r,n),n=new(t.bind.apply(t,r)),e&&_setPrototypeOf(n,e.prototype),n)}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(t){}return(_isNativeReflectConstruct=function(){return!!t})()}function _isNativeFunction(n){try{return-1!==Function.toString.call(n).indexOf("[native code]")}catch(t){return"function"==typeof n}}function _setPrototypeOf(t,n){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,n){return t.__proto__=n,t})(t,n)}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _classCallCheck(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,_toPropertyKey(r.key),r)}}function _createClass(t,n,e){return n&&_defineProperties(t.prototype,n),e&&_defineProperties(t,e),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"==_typeof(t)?t:t+""}function _toPrimitive(t,n){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0===e)return("string"===n?String:Number)(t);e=e.call(t,n||"default");if("object"!=_typeof(e))return e;throw new TypeError("@@toPrimitive must return a primitive value.")}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _regeneratorRuntime(){_regeneratorRuntime=function(){return a};var c,a={},t=Object.prototype,f=t.hasOwnProperty,l=Object.defineProperty||function(t,n,e){t[n]=e.value},n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",e=n.asyncIterator||"@@asyncIterator",i=n.toStringTag||"@@toStringTag";function o(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{o({},"")}catch(c){o=function(t,n,e){return t[n]=e}}function u(t,n,e,r){var i,o,a,u,n=n&&n.prototype instanceof g?n:g,n=Object.create(n.prototype),r=new A(r||[]);return l(n,"_invoke",{value:(i=t,o=e,a=r,u=h,function(t,n){if(u===p)throw Error("Generator is already running");if(u===v){if("throw"===t)throw n;return{value:c,done:!0}}for(a.method=t,a.arg=n;;){var e=a.delegate;if(e){e=function t(n,e){var r=e.method,i=n.iterator[r];if(i===c)return e.delegate=null,"throw"===r&&n.iterator.return&&(e.method="return",e.arg=c,t(n,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;r=s(i,n.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,y;i=r.arg;return i?i.done?(e[n.resultName]=i.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=c),e.delegate=null,y):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}(e,a);if(e){if(e===y)continue;return e}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if(u===h)throw u=v,a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);u=p;e=s(i,o,a);if("normal"===e.type){if(u=a.done?v:d,e.arg===y)continue;return{value:e.arg,done:a.done}}"throw"===e.type&&(u=v,a.method="throw",a.arg=e.arg)}})}),n}function s(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}a.wrap=u;var h="suspendedStart",d="suspendedYield",p="executing",v="completed",y={};function g(){}function _(){}function b(){}var n={},m=(o(n,r,function(){return this}),Object.getPrototypeOf),m=m&&m(m(S([]))),x=(m&&m!==t&&f.call(m,r)&&(n=m),b.prototype=g.prototype=Object.create(n));function w(t){["next","throw","return"].forEach(function(n){o(t,n,function(t){return this._invoke(n,t)})})}function M(a,u){var n;l(this,"_invoke",{value:function(e,r){function t(){return new u(function(t,n){!function n(t,e,r,i){var o,t=s(a[t],a,e);if("throw"!==t.type)return(e=(o=t.arg).value)&&"object"==_typeof(e)&&f.call(e,"__await")?u.resolve(e.__await).then(function(t){n("next",t,r,i)},function(t){n("throw",t,r,i)}):u.resolve(e).then(function(t){o.value=t,r(o)},function(t){return n("throw",t,r,i)});i(t.arg)}(e,r,t,n)})}return n=n?n.then(t,t):t()}})}function k(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function T(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function A(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function S(n){if(n||""===n){var e,t=n[r];if(t)return t.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length))return e=-1,(t=function t(){for(;++e<n.length;)if(f.call(n,e))return t.value=n[e],t.done=!1,t;return t.value=c,t.done=!0,t}).next=t}throw new TypeError(_typeof(n)+" is not iterable")}return l(x,"constructor",{value:_.prototype=b,configurable:!0}),l(b,"constructor",{value:_,configurable:!0}),_.displayName=o(b,i,"GeneratorFunction"),a.isGeneratorFunction=function(t){t="function"==typeof t&&t.constructor;return!!t&&(t===_||"GeneratorFunction"===(t.displayName||t.name))},a.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,o(t,i,"GeneratorFunction")),t.prototype=Object.create(x),t},a.awrap=function(t){return{__await:t}},w(M.prototype),o(M.prototype,e,function(){return this}),a.AsyncIterator=M,a.async=function(t,n,e,r,i){void 0===i&&(i=Promise);var o=new M(u(t,n,e,r),i);return a.isGeneratorFunction(n)?o:o.next().then(function(t){return t.done?t.value:o.next()})},w(x),o(x,i,"Generator"),o(x,r,function(){return this}),o(x,"toString",function(){return"[object Generator]"}),a.keys=function(t){var n,e=Object(t),r=[];for(n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},a.values=S,A.prototype={constructor:A,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=c,this.done=!1,this.delegate=null,this.method="next",this.arg=c,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&f.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=c)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function t(t,n){return o.type="throw",o.arg=e,r.next=t,n&&(r.method="next",r.arg=c),!!n}for(var n=this.tryEntries.length-1;0<=n;--n){var i=this.tryEntries[n],o=i.completion;if("root"===i.tryLoc)return t("end");if(i.tryLoc<=this.prev){var a=f.call(i,"catchLoc"),u=f.call(i,"finallyLoc");if(a&&u){if(this.prev<i.catchLoc)return t(i.catchLoc,!0);if(this.prev<i.finallyLoc)return t(i.finallyLoc)}else if(a){if(this.prev<i.catchLoc)return t(i.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return t(i.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;0<=e;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&f.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}var o=(i=i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc?null:i)?i.completion:{};return o.type=t,o.arg=n,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(o)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),y},finish:function(t){for(var n=this.tryEntries.length-1;0<=n;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),T(e),y}},catch:function(t){for(var n=this.tryEntries.length-1;0<=n;--n){var e,r,i=this.tryEntries[n];if(i.tryLoc===t)return"throw"===(e=i.completion).type&&(r=e.arg,T(i)),r}throw Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:S(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=c),y}},a}function _createForOfIteratorHelper(t,n){var e,r,i,o,a="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(a)return i=!(r=!0),{s:function(){a=a.call(t)},n:function(){var t=a.next();return r=t.done,t},e:function(t){i=!0,e=t},f:function(){try{r||null==a.return||a.return()}finally{if(i)throw e}}};if(Array.isArray(t)||(a=_unsupportedIterableToArray(t))||n&&t&&"number"==typeof t.length)return a&&(t=a),o=0,{s:n=function(){},n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(t,n){var e;if(t)return"string"==typeof t?_arrayLikeToArray(t,n):"Map"===(e="Object"===(e={}.toString.call(t).slice(8,-1))&&t.constructor?t.constructor.name:e)||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?_arrayLikeToArray(t,n):void 0}function _arrayLikeToArray(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=Array(n);e<n;e++)r[e]=t[e];return r}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}((t,n)=>{"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n((t="undefined"!=typeof globalThis?globalThis:self).d3=t.d3||{})})(void 0,function(u){var p=_regeneratorRuntime().mark(G),v=_regeneratorRuntime().mark(Zt),_=_regeneratorRuntime().mark(fe),m=_regeneratorRuntime().mark(bu),x=_regeneratorRuntime().mark(e0);function h(t,n){return null==t||null==n?NaN:t<n?-1:n<t?1:n<=t?0:NaN}function M(t,n){return null==t||null==n?NaN:n<t?-1:t<n?1:t<=n?0:NaN}function k(e){var o,a,i;function u(t,n){var e=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:t.length;if(e<r){if(0!==o(n,n))return r;do{var i=e+r>>>1}while(a(t[i],n)<0?e=1+i:r=i,e<r)}return e}return i=2!==e.length?(o=h,a=function(t,n){return h(e(t),n)},function(t,n){return e(t)-n}):(o=e===h||e===M?e:T,a=e),{left:u,center:function(t,n){var e=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,r=u(t,n,e,(3<arguments.length&&void 0!==arguments[3]?arguments[3]:t.length)-1);return e<r&&i(t[r-1],n)>-i(t[r],n)?r-1:r},right:function(t,n){var e=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:t.length;if(e<r){if(0!==o(n,n))return r;do{var i=e+r>>>1}while(a(t[i],n)<=0?e=1+i:r=i,e<r)}return e}}}function T(){return 0}function A(t){return null===t?NaN:+t}function G(n,e){var r,i,o,a,u;return _regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(void 0!==e){t.next=21;break}r=_createForOfIteratorHelper(n),t.prev=2,r.s();case 4:if((a=r.n()).done)t.next=11;else{if(null!=(a=a.value)&&(a=+a)>=a)return t.next=9,a;t.next=9}break;case 9:t.next=4;break;case 11:t.next=16;break;case 13:t.prev=13,t.t0=t.catch(2),r.e(t.t0);case 16:return t.prev=16,r.f(),t.finish(16);case 19:t.next=40;break;case 21:i=-1,o=_createForOfIteratorHelper(n),t.prev=23,o.s();case 25:if((a=o.n()).done)t.next=32;else{if(null!=(u=e(u=a.value,++i,n))&&(u=+u)>=u)return t.next=30,u;t.next=30}break;case 30:t.next=25;break;case 32:t.next=37;break;case 34:t.prev=34,t.t1=t.catch(23),o.e(t.t1);case 37:return t.prev=37,o.f(),t.finish(37);case 40:case"end":return t.stop()}},p,null,[[2,13,16,19],[23,34,37,40]])}var X=k(h),V=X.right,X=X.left,W=k(A).center,Z=V;var K=$(nt),Q=$(function(t){var o=nt(t);return function(t,n,e,r,i){o(t,n,(e<<=2)+0,(r<<=2)+0,i<<=2),o(t,n,e+1,r+1,i),o(t,n,e+2,r+2,i),o(t,n,e+3,r+3,i)}});function $(u){return function(t,n){var e=2<arguments.length&&void 0!==arguments[2]?arguments[2]:n;if(!(0<=(n=+n)))throw new RangeError("invalid rx");if(!(0<=(e=+e)))throw new RangeError("invalid ry");var r,i=t.data,o=t.width,a=t.height;if(!(0<=(o=Math.floor(o))))throw new RangeError("invalid width");if(0<=(a=Math.floor(void 0!==a?a:i.length/o)))return o&&a&&(n||e)&&(n=n&&u(n),e=e&&u(e),r=i.slice(),n&&e?(J(n,r,i,o,a),J(n,i,r,o,a),J(n,r,i,o,a),tt(e,i,r,o,a),tt(e,r,i,o,a),tt(e,i,r,o,a)):n?(J(n,i,r,o,a),J(n,r,i,o,a),J(n,i,r,o,a)):e&&(tt(e,i,r,o,a),tt(e,r,i,o,a),tt(e,i,r,o,a))),t;throw new RangeError("invalid height")}}function J(t,n,e,r,i){for(var o=0,a=r*i;o<a;)t(n,e,o,o+=r,1)}function tt(t,n,e,r,i){for(var o=0,a=r*i;o<r;++o)t(n,e,o,o+a,r)}function nt(t){var s,h,d,p,v=Math.floor(t);return v===t?(h=2*(s=t)+1,function(t,n,e,r,i){if((r-=i)>=e){for(var o=s*n[e],a=i*s,u=e,c=e+a;u<c;u+=i)o+=n[Math.min(r,u)];for(var f=e,l=r;f<=l;f+=i)o+=n[Math.min(r,f+a)],t[f]=o/h,o-=n[Math.max(e,f-a)]}}):(d=t-v,p=2*t+1,function(t,n,e,r,i){if((r-=i)>=e){for(var o=v*n[e],a=i*v,u=a+i,c=e,f=e+a;c<f;c+=i)o+=n[Math.min(r,c)];for(var l=e,s=r;l<=s;l+=i)o+=n[Math.min(r,l+a)],t[l]=(o+d*(n[Math.max(e,l-u)]+n[Math.min(r,l+u)]))/p,o-=n[Math.max(e,l-a)]}})}function et(t,n){var e=0;if(void 0===n){var r,i=_createForOfIteratorHelper(t);try{for(i.s();!(r=i.n()).done;){var o=r.value;null!=o&&(o=+o)>=o&&++e}}catch(t){i.e(t)}finally{i.f()}}else{var a,u,c=-1,f=_createForOfIteratorHelper(t);try{for(f.s();!(a=f.n()).done;)null!=(u=n(a.value,++c,t))&&(u=+u)>=u&&++e}catch(t){f.e(t)}finally{f.f()}}return e}function rt(t){return 0|t.length}function it(t){return!(0<t)}function ot(t){return"object"!==_typeof(t)||"length"in t?t:Array.from(t)}function at(t,n){var e,r=0,i=0,o=0;if(void 0===n){var a,u=_createForOfIteratorHelper(t);try{for(u.s();!(a=u.n()).done;){var c=a.value;null!=c&&(c=+c)>=c&&(o+=(e=c-i)*(c-(i+=e/++r)))}}catch(t){u.e(t)}finally{u.f()}}else{var f,l=-1,s=_createForOfIteratorHelper(t);try{for(s.s();!(f=s.n()).done;){var h=f.value;null!=(h=n(h,++l,t))&&(h=+h)>=h&&(o+=(e=h-i)*(h-(i+=e/++r)))}}catch(t){s.e(t)}finally{s.f()}}if(1<r)return o/(r-1)}function ut(t,n){t=at(t,n);return t&&Math.sqrt(t)}function ct(t,n){var e,r;if(void 0===n){var i,o=_createForOfIteratorHelper(t);try{for(o.s();!(i=o.n()).done;){var a=i.value;null!=a&&(void 0===e?a<=a&&(e=r=a):(a<e&&(e=a),r<a&&(r=a)))}}catch(t){o.e(t)}finally{o.f()}}else{var u,c,f=-1,l=_createForOfIteratorHelper(t);try{for(l.s();!(u=l.n()).done;)null!=(c=n(u.value,++f,t))&&(void 0===e?c<=c&&(e=r=c):(c<e&&(e=c),r<c&&(r=c)))}catch(t){l.e(t)}finally{l.f()}}return[e,r]}var S=(()=>_createClass(function t(){_classCallCheck(this,t),this._partials=new Float64Array(32),this._n=0},[{key:"add",value:function(t){for(var n=this._partials,e=0,r=0;r<this._n&&r<32;r++){var i=n[r],o=t+i,i=Math.abs(t)<Math.abs(i)?t-(o-i):i-(o-t);i&&(n[e++]=i),t=o}return n[e]=t,this._n=e+1,this}},{key:"valueOf",value:function(){var t,n,e,r=this._partials,i=this._n,o=0;if(0<i){for(o=r[--i];0<i&&(t=o,!(e=(n=r[--i])-((o=t+n)-t))););0<i&&(e<0&&r[i-1]<0||0<e&&0<r[i-1])&&(n=2*e)==(t=o+n)-o&&(o=t)}return o}}]))();var ft=(()=>{function c(t){var n,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:pt;if(_classCallCheck(this,c),n=_callSuper(this,c),Object.defineProperties(n,{_intern:{value:new Map},_key:{value:e}}),null!=t){var r,i=_createForOfIteratorHelper(t);try{for(i.s();!(r=i.n()).done;){var o=_slicedToArray(r.value,2),a=o[0],u=o[1];n.set(a,u)}}catch(t){i.e(t)}finally{i.f()}}return n}return _inherits(c,_wrapNativeSuper(Map)),_createClass(c,[{key:"get",value:function(t){return _superPropGet(c,"get",this,3)([st(this,t)])}},{key:"has",value:function(t){return _superPropGet(c,"has",this,3)([st(this,t)])}},{key:"set",value:function(t,n){return _superPropGet(c,"set",this,3)([ht(this,t),n])}},{key:"delete",value:function(t){return _superPropGet(c,"delete",this,3)([dt(this,t)])}}])})(),lt=(()=>{function a(t){var n,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:pt;if(_classCallCheck(this,a),n=_callSuper(this,a),Object.defineProperties(n,{_intern:{value:new Map},_key:{value:e}}),null!=t){var r,i=_createForOfIteratorHelper(t);try{for(i.s();!(r=i.n()).done;){var o=r.value;n.add(o)}}catch(t){i.e(t)}finally{i.f()}}return n}return _inherits(a,_wrapNativeSuper(Set)),_createClass(a,[{key:"has",value:function(t){return _superPropGet(a,"has",this,3)([st(this,t)])}},{key:"add",value:function(t){return _superPropGet(a,"add",this,3)([ht(this,t)])}},{key:"delete",value:function(t){return _superPropGet(a,"delete",this,3)([dt(this,t)])}}])})();function st(t,n){var e=t._intern,t=(0,t._key)(n);return e.has(t)?e.get(t):n}function ht(t,n){var e=t._intern,t=(0,t._key)(n);return e.has(t)?e.get(t):(e.set(t,n),n)}function dt(t,n){var e=t._intern,t=(0,t._key)(n);return e.has(t)&&(n=e.get(t),e.delete(t)),n}function pt(t){return null!==t&&"object"===_typeof(t)?t.valueOf():t}function vt(t){return t}function yt(t){for(var n=arguments.length,e=new Array(1<n?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return wt(t,vt,vt,e)}function gt(t){for(var n=arguments.length,e=new Array(1<n?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return wt(t,Array.from,vt,e)}function _t(t,n){for(var e=1,r=n.length;e<r;++e)t=t.flatMap(function(e){return e.pop().map(function(t){var t=_slicedToArray(t,2),n=t[0],t=t[1];return[].concat(_toConsumableArray(e),[n,t])})});return t}function bt(t,n){for(var e=arguments.length,r=new Array(2<e?e-2:0),i=2;i<e;i++)r[i-2]=arguments[i];return wt(t,vt,n,r)}function mt(t,n){for(var e=arguments.length,r=new Array(2<e?e-2:0),i=2;i<e;i++)r[i-2]=arguments[i];return wt(t,Array.from,n,r)}function xt(t){if(1!==t.length)throw new Error("duplicate key");return t[0]}function wt(t,y,g,_){return function t(n,e){if(e>=_.length)return g(n);var r,i=new ft,o=_[e++],a=-1,u=_createForOfIteratorHelper(n);try{for(u.s();!(r=u.n()).done;){var c=r.value,f=o(c,++a,n),l=i.get(f);l?l.push(c):i.set(f,[c])}}catch(t){u.e(t)}finally{u.f()}var s,h=_createForOfIteratorHelper(i);try{for(h.s();!(s=h.n()).done;){var d=_slicedToArray(s.value,2),p=d[0],v=d[1];i.set(p,t(v,e))}}catch(t){h.e(t)}finally{h.f()}return y(i)}(t,0)}function Mt(n,t){return Array.from(t,function(t){return n[t]})}function kt(n){for(var t=arguments.length,a=new Array(1<t?t-1:0),e=1;e<t;e++)a[e-1]=arguments[e];if("function"!=typeof n[Symbol.iterator])throw new TypeError("values is not iterable");n=Array.from(n);var r,i=_slicedToArray(a,1)[0];return i&&2!==i.length||1<a.length?(r=Uint32Array.from(n,function(t,n){return n}),1<a.length?(a=a.map(function(t){return n.map(t)}),r.sort(function(t,n){var e,r=_createForOfIteratorHelper(a);try{for(r.s();!(e=r.n()).done;){var i=e.value,o=At(i[t],i[n]);if(o)return o}}catch(t){r.e(t)}finally{r.f()}})):(i=n.map(i),r.sort(function(t,n){return At(i[t],i[n])})),Mt(n,r)):n.sort(Tt(i))}function Tt(t){var r=0<arguments.length&&void 0!==t?t:h;if(r===h)return At;if("function"!=typeof r)throw new TypeError("compare is not a function");return function(t,n){var e=r(t,n);return e||0===e?e:(0===r(n,n))-(0===r(t,t))}}function At(t,n){return(null==t||!(t<=t))-(null==n||!(n<=n))||(t<n?-1:n<t?1:0)}var St=Array.prototype.slice;function Et(t){return function(){return t}}var Nt=Math.sqrt(50),Ot=Math.sqrt(10),Ct=Math.sqrt(2);function Pt(t,n,e){var r,i,o,a=(n-t)/Math.max(0,e),u=Math.floor(Math.log10(a)),a=a/Math.pow(10,u),a=Nt<=a?10:Ot<=a?5:Ct<=a?2:1;return u<0?(o=Math.pow(10,-u)/a,(r=Math.round(t*o))/o<t&&++r,n<(i=Math.round(n*o))/o&&--i,o=-o):(o=Math.pow(10,u)*a,(r=Math.round(t/o))*o<t&&++r,n<(i=Math.round(n/o))*o&&--i),i<r&&.5<=e&&e<2?Pt(t,n,2*e):[r,i,o]}function It(t,n,e){if(!(0<(e=+e)))return[];if((t=+t)===(n=+n))return[t];var r=n<t,t=_slicedToArray(r?Pt(n,t,e):Pt(t,n,e),3),i=t[0],o=t[1],a=t[2];if(!(i<=o))return[];var u=o-i+1,c=new Array(u);if(r)if(a<0)for(var f=0;f<u;++f)c[f]=(o-f)/-a;else for(var l=0;l<u;++l)c[l]=(o-l)*a;else if(a<0)for(var s=0;s<u;++s)c[s]=(i+s)/-a;else for(var h=0;h<u;++h)c[h]=(i+h)*a;return c}function Ft(t,n,e){return Pt(t=+t,n=+n,e=+e)[2]}function jt(t,n,e){e=+e;var r=(n=+n)<(t=+t),t=r?Ft(n,t,e):Ft(t,n,e);return(r?-1:1)*(t<0?1/-t:t)}function zt(t,n,e){for(var r;;){var i=Ft(t,n,e);if(i===r||0===i||!isFinite(i))return[t,n];0<i?(t=Math.floor(t/i)*i,n=Math.ceil(n/i)*i):i<0&&(t=Math.ceil(t*i)/i,n=Math.floor(n*i)/i),r=i}}function Rt(t){return Math.max(1,Math.ceil(Math.log(et(t))/Math.LN2)+1)}function Ht(){var _=vt,b=ct,m=Rt;function n(t){for(var n,e,r=(t=Array.isArray(t)?t:Array.from(t)).length,i=new Array(r),o=0;o<r;++o)i[o]=_(t[o],o,t);for(var a,u,c=b(i),f=c[0],l=c[1],s=m(i,f,l),h=(Array.isArray(s)||(c=l,a=+s,b===ct&&(f=(u=_slicedToArray(zt(f,l,a),2))[0],l=u[1]),(s=It(f,l,a))[0]<=f&&(e=Ft(f,l,a)),l<=s[s.length-1]&&(l<=c&&b===ct?(u=Ft(f,l,a),isFinite(u)&&(0<u?l=(Math.floor(l/u)+1)*u:u<0&&(l=(Math.ceil(l*-u)+1)/-u))):s.pop())),s.length),d=0,p=h;s[d]<=f;)++d;for(;s[p-1]>l;)--p;(d||p<h)&&(s=s.slice(d,p),h=p-d);var v,y,g=new Array(h+1);for(o=0;o<=h;++o)(v=g[o]=[]).x0=0<o?s[o-1]:f,v.x1=o<h?s[o]:l;if(isFinite(e)){if(0<e)for(o=0;o<r;++o)null!=(n=i[o])&&f<=n&&n<=l&&g[Math.min(h,Math.floor((n-f)/e))].push(t[o]);else if(e<0)for(o=0;o<r;++o)null!=(n=i[o])&&f<=n&&n<=l&&(y=Math.floor((f-n)*e),g[Math.min(h,y+(s[y]<=n))].push(t[o]))}else for(o=0;o<r;++o)null!=(n=i[o])&&f<=n&&n<=l&&g[Z(s,n,0,h)].push(t[o]);return g}return n.value=function(t){return arguments.length?(_="function"==typeof t?t:Et(t),n):_},n.domain=function(t){return arguments.length?(b="function"==typeof t?t:Et([t[0],t[1]]),n):b},n.thresholds=function(t){return arguments.length?(m="function"==typeof t?t:Et(Array.isArray(t)?St.call(t):t),n):m},n}function Dt(t,n){var e;if(void 0===n){var r,i=_createForOfIteratorHelper(t);try{for(i.s();!(r=i.n()).done;){var o=r.value;null!=o&&(e<o||void 0===e&&o<=o)&&(e=o)}}catch(t){i.e(t)}finally{i.f()}}else{var a,u,c=-1,f=_createForOfIteratorHelper(t);try{for(f.s();!(a=f.n()).done;)null!=(u=n(a.value,++c,t))&&(e<u||void 0===e&&u<=u)&&(e=u)}catch(t){f.e(t)}finally{f.f()}}return e}function Lt(t,n){var e,r=-1,i=-1;if(void 0===n){var o,a=_createForOfIteratorHelper(t);try{for(a.s();!(o=a.n()).done;){var u=o.value;++i,null!=u&&(e<u||void 0===e&&u<=u)&&(e=u,r=i)}}catch(t){a.e(t)}finally{a.f()}}else{var c,f,l=_createForOfIteratorHelper(t);try{for(l.s();!(c=l.n()).done;)null!=(f=n(c.value,++i,t))&&(e<f||void 0===e&&f<=f)&&(e=f,r=i)}catch(t){l.e(t)}finally{l.f()}}return r}function qt(t,n){var e;if(void 0===n){var r,i=_createForOfIteratorHelper(t);try{for(i.s();!(r=i.n()).done;){var o=r.value;null!=o&&(o<e||void 0===e&&o<=o)&&(e=o)}}catch(t){i.e(t)}finally{i.f()}}else{var a,u,c=-1,f=_createForOfIteratorHelper(t);try{for(f.s();!(a=f.n()).done;)null!=(u=n(a.value,++c,t))&&(u<e||void 0===e&&u<=u)&&(e=u)}catch(t){f.e(t)}finally{f.f()}}return e}function Ut(t,n){var e,r=-1,i=-1;if(void 0===n){var o,a=_createForOfIteratorHelper(t);try{for(a.s();!(o=a.n()).done;){var u=o.value;++i,null!=u&&(u<e||void 0===e&&u<=u)&&(e=u,r=i)}}catch(t){a.e(t)}finally{a.f()}}else{var c,f,l=_createForOfIteratorHelper(t);try{for(l.s();!(c=l.n()).done;)null!=(f=n(c.value,++i,t))&&(f<e||void 0===e&&f<=f)&&(e=f,r=i)}catch(t){l.e(t)}finally{l.f()}}return r}function Bt(t,n){var e=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:1/0,i=4<arguments.length?arguments[4]:void 0;if(n=Math.floor(n),e=Math.floor(Math.max(0,e)),r=Math.floor(Math.min(t.length-1,r)),e<=n&&n<=r)for(i=void 0===i?At:Tt(i);e<r;){600<r-e&&(o=r-e+1,a=n-e+1,c=Math.log(o),u=.5*Math.exp(2*c/3),c=.5*Math.sqrt(c*u*(o-u)/o)*(a-o/2<0?-1:1),Bt(t,n,Math.max(e,Math.floor(n-a*u/o+c)),Math.min(r,Math.floor(n+(o-a)*u/o+c)),i));var o,a,u,c,f=t[n],l=e,s=r;for(Yt(t,e,n),0<i(t[r],f)&&Yt(t,e,r);l<s;){for(Yt(t,l,s),++l,--s;i(t[l],f)<0;)++l;for(;0<i(t[s],f);)--s}0===i(t[e],f)?Yt(t,e,s):Yt(t,++s,r),s<=n&&(e=s+1),n<=s&&(r=s-1)}return t}function Yt(t,n,e){var r=t[n];t[n]=t[e],t[e]=r}function Gt(t){var n,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=!1;if(1===e.length){var i,o,a=_createForOfIteratorHelper(t);try{for(a.s();!(o=a.n()).done;){var u=o.value,c=e(u);(r?0<h(c,i):0===h(c,c))&&(n=u,i=c,r=!0)}}catch(t){a.e(t)}finally{a.f()}}else{var f,l=_createForOfIteratorHelper(t);try{for(l.s();!(f=l.n()).done;){var s=f.value;(r?0<e(s,n):0===e(s,s))&&(n=s,r=!0)}}catch(t){l.e(t)}finally{l.f()}}return n}function Xt(t,n,e){var r;if((e=(t=Float64Array.from(G(t,e))).length)&&!isNaN(n=+n))return n<=0||e<2?qt(t):1<=n?Dt(t):(e=(e-1)*n,(r=Dt(Bt(t,n=Math.floor(e)).subarray(0,n+1)))+(qt(t.subarray(n+1))-r)*(e-n))}function Vt(t,n){var e,r,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:A;if((e=t.length)&&!isNaN(n=+n))return n<=0||e<2?+i(t[0],0,t):1<=n?+i(t[e-1],e-1,t):(e=(e-1)*n,(r=+i(t[n=Math.floor(e)],n,t))+(+i(t[n+1],n+1,t)-r)*(e-n))}function Wt(e,t){var r,n,i,o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:A;if(!isNaN(t=+t))return r=Float64Array.from(e,function(t,n){return A(o(e[n],n,e))}),t<=0?Ut(r):1<=t?Lt(r):(n=Uint32Array.from(e,function(t,n){return n}),i=r.length-1,Bt(n,t=Math.floor(i*t),0,i,function(t,n){return At(r[t],r[n])}),0<=(t=Gt(n.subarray(0,t+1),function(t){return r[t]}))?t:-1)}function Zt(n){var e,r;return _regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:e=_createForOfIteratorHelper(n),t.prev=1,e.s();case 3:if((r=e.n()).done){t.next=8;break}return r=r.value,t.delegateYield(r,"t0",6);case 6:t.next=3;break;case 8:t.next=13;break;case 10:t.prev=10,t.t1=t.catch(1),e.e(t.t1);case 13:return t.prev=13,e.f(),t.finish(13);case 16:case"end":return t.stop()}},v,null,[[1,10,13,16]])}function Kt(t){return Array.from(Zt(t))}function Qt(t,n){return[t,n]}function $t(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}function Jt(t){var n,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h;if(1===e.length)return Ut(t,e);var r,i=-1,o=-1,a=_createForOfIteratorHelper(t);try{for(a.s();!(r=a.n()).done;){var u=r.value;++o,(i<0?0===e(u,u):e(u,n)<0)&&(n=u,i=o)}}catch(t){a.e(t)}finally{a.f()}return i}var tn=nn(Math.random);function nn(o){return function(t){for(var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,e=(2<arguments.length&&void 0!==arguments[2]?arguments[2]:t.length)-(n=+n);e;){var r=o()*e--|0,i=t[e+n];t[e+n]=t[r+n],t[r+n]=i}return t}}function en(t){if(!(i=t.length))return[];for(var n=-1,e=qt(t,rn),r=new Array(e);++n<e;)for(var i,o=-1,a=r[n]=new Array(i);++o<i;)a[o]=t[o][n];return r}function rn(t){return t.length}function on(t){return t instanceof lt?t:new lt(t)}function an(t,n){var e,r=t[Symbol.iterator](),i=new Set,o=_createForOfIteratorHelper(n);try{for(o.s();!(e=o.n()).done;){var a=un(e.value);if(!i.has(a))for(var u,c,f;u=(f=r.next()).value,c=f.done,f;){if(c)return!1;var l=un(u);if(i.add(l),Object.is(a,l))break}}}catch(t){o.e(t)}finally{o.f()}return!0}function un(t){return null!==t&&"object"===_typeof(t)?t.valueOf():t}function cn(t){return t}var fn=1,ln=2,sn=3,hn=4,dn=1e-6;function pn(t){return"translate("+t+",0)"}function vn(t){return"translate(0,"+t+")"}function yn(n){return function(t){return+n(t)}}function gn(n,e){return e=Math.max(0,n.bandwidth()-2*e)/2,n.round()&&(e=Math.round(e)),function(t){return+n(t)+e}}function _n(){return!this.__axis}function bn(d,p){var v=[],y=null,g=null,_=6,b=6,m=3,x="undefined"!=typeof window&&1<window.devicePixelRatio?0:.5,w=d===fn||d===hn?-1:1,M=d===hn||d===ln?"x":"y",k=d===fn||d===sn?pn:vn;function n(t){var n=null==y?p.ticks?p.ticks.apply(p,v):p.domain():y,e=null==g?p.tickFormat?p.tickFormat.apply(p,v):cn:g,r=Math.max(_,0)+m,i=p.range(),o=+i[0]+x,i=+i[i.length-1]+x,a=(p.bandwidth?gn:yn)(p.copy(),x),u=t.selection?t.selection():t,c=u.selectAll(".domain").data([null]),f=(n=u.selectAll(".tick").data(n,p).order()).exit(),l=n.enter().append("g").attr("class","tick"),s=n.select("line"),h=n.select("text"),c=c.merge(c.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),n=n.merge(l),s=s.merge(l.append("line").attr("stroke","currentColor").attr(M+"2",w*_)),h=h.merge(l.append("text").attr("fill","currentColor").attr(M,w*r).attr("dy",d===fn?"0em":d===sn?"0.71em":"0.32em"));t!==u&&(c=c.transition(t),n=n.transition(t),s=s.transition(t),h=h.transition(t),f=f.transition(t).attr("opacity",dn).attr("transform",function(t){return isFinite(t=a(t))?k(t+x):this.getAttribute("transform")}),l.attr("opacity",dn).attr("transform",function(t){var n=this.parentNode.__axis;return k((n&&isFinite(n=n(t))?n:a(t))+x)})),f.remove(),c.attr("d",d===hn||d===ln?b?"M"+w*b+","+o+"H"+x+"V"+i+"H"+w*b:"M"+x+","+o+"V"+i:b?"M"+o+","+w*b+"V"+x+"H"+i+"V"+w*b:"M"+o+","+x+"H"+i),n.attr("opacity",1).attr("transform",function(t){return k(a(t)+x)}),s.attr(M+"2",w*_),h.attr(M,w*r).text(e),u.filter(_n).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",d===ln?"start":d===hn?"end":"middle"),u.each(function(){this.__axis=a})}return n.scale=function(t){return arguments.length?(p=t,n):p},n.ticks=function(){return v=Array.from(arguments),n},n.tickArguments=function(t){return arguments.length?(v=null==t?[]:Array.from(t),n):v.slice()},n.tickValues=function(t){return arguments.length?(y=null==t?null:Array.from(t),n):y&&y.slice()},n.tickFormat=function(t){return arguments.length?(g=t,n):g},n.tickSize=function(t){return arguments.length?(_=b=+t,n):_},n.tickSizeInner=function(t){return arguments.length?(_=+t,n):_},n.tickSizeOuter=function(t){return arguments.length?(b=+t,n):b},n.tickPadding=function(t){return arguments.length?(m=+t,n):m},n.offset=function(t){return arguments.length?(x=+t,n):x},n}var mn={value:function(){}};function xn(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new wn(r)}function wn(t){this._=t}function Mn(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=mn,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}wn.prototype=xn.prototype={constructor:wn,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(0<=e&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),a=-1,u=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<u;)if(e=(t=o[a]).type)i[e]=Mn(i[e],t.name,n);else if(null==n)for(e in i)i[e]=Mn(i[e],t.name,null);return this}for(;++a<u;)if(e=(e=(t=o[a]).type)&&((t,n)=>{for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value})(i[e],t.name))return e},copy:function(){var t,n={},e=this._;for(t in e)n[t]=e[t].slice();return new wn(n)},call:function(t,n){if(0<(e=arguments.length-2))for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var kn="http://www.w3.org/1999/xhtml",Tn={svg:"http://www.w3.org/2000/svg",xhtml:kn,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function An(t){var n=t+="",e=n.indexOf(":");return 0<=e&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Tn.hasOwnProperty(n)?{space:Tn[n],local:t}:t}function Sn(t){t=An(t);return(t.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===kn&&t.documentElement.namespaceURI===kn?t.createElement(e):t.createElementNS(n,e)}})(t)}function En(){}function Nn(t){return null==t?En:function(){return this.querySelector(t)}}function On(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function Cn(){return[]}function Pn(t){return null==t?Cn:function(){return this.querySelectorAll(t)}}function In(t){return function(){return this.matches(t)}}function Fn(n){return function(t){return t.matches(n)}}var jn=Array.prototype.find;function zn(){return this.firstElementChild}var Rn=Array.prototype.filter;function Hn(){return Array.from(this.children)}function Dn(t){return new Array(t.length)}function Ln(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function qn(t,n,e,r,i,o){for(var a,u=0,c=n.length,f=o.length;u<f;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new Ln(t,o[u]);for(;u<c;++u)(a=n[u])&&(i[u]=a)}function Un(t,n,e,r,i,o,a){for(var u,c,f=new Map,l=n.length,s=o.length,h=new Array(l),d=0;d<l;++d)(u=n[d])&&(h[d]=c=a.call(u,u.__data__,d,n)+"",f.has(c)?i[d]=u:f.set(c,u));for(d=0;d<s;++d)c=a.call(t,o[d],d,o)+"",(u=f.get(c))?((r[d]=u).__data__=o[d],f.delete(c)):e[d]=new Ln(t,o[d]);for(d=0;d<l;++d)(u=n[d])&&f.get(h[d])===u&&(i[d]=u)}function Bn(t){return t.__data__}function Yn(t,n){return t<n?-1:n<t?1:n<=t?0:NaN}function Gn(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Xn(t,n){return t.style.getPropertyValue(n)||Gn(t).getComputedStyle(t,null).getPropertyValue(n)}function Vn(t){return t.trim().split(/^|\s+/)}function Wn(t){return t.classList||new Zn(t)}function Zn(t){this._node=t,this._names=Vn(t.getAttribute("class")||"")}function Kn(t,n){for(var e=Wn(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function Qn(t,n){for(var e=Wn(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function $n(){this.textContent=""}function Jn(){this.innerHTML=""}function te(){this.nextSibling&&this.parentNode.appendChild(this)}function ne(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ee(){return null}function re(){var t=this.parentNode;t&&t.removeChild(this)}function ie(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function oe(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function ae(o){return function(){var t=this.__on;if(t){for(var n,e=0,r=-1,i=t.length;e<i;++e)n=t[e],o.type&&n.type!==o.type||n.name!==o.name?t[++r]=n:this.removeEventListener(n.type,n.listener,n.options);++r?t.length=r:delete this.__on}}}function ue(a,u,c){return function(){function t(t){e.call(this,t,this.__data__)}var n,e,r=this.__on;e=u;if(r)for(var i=0,o=r.length;i<o;++i)if((n=r[i]).type===a.type&&n.name===a.name)return this.removeEventListener(n.type,n.listener,n.options),this.addEventListener(n.type,n.listener=t,n.options=c),void(n.value=u);this.addEventListener(a.type,t,c),n={type:a.type,name:a.name,value:u,listener:t,options:c},r?r.push(n):this.__on=[n]}}function ce(t,n,e){var r=Gn(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function fe(){var n,e,r,i,o,a,u;return _regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:n=this._groups,e=0,r=n.length;case 1:if(!(e<r)){t.next=13;break}i=n[e],o=0,a=i.length;case 3:if(o<a){if(u=i[o])return t.next=7,u;t.next=7}else t.next=10;break;case 7:++o,t.next=3;break;case 10:++e,t.next=1;break;case 13:case"end":return t.stop()}},_,this)}Ln.prototype={constructor:Ln,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},Zn.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){t=this._names.indexOf(t);0<=t&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return 0<=this._names.indexOf(t)}};var le=[null];function w(t,n){this._groups=t,this._parents=n}function se(){return new w([[document.documentElement]],le)}function q(t){return"string"==typeof t?new w([[document.querySelector(t)]],[document.documentElement]):new w([[t]],le)}w.prototype=se.prototype=_defineProperty({constructor:w,select:function(t){"function"!=typeof t&&(t=Nn(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],c=u.length,f=r[i]=new Array(c),l=0;l<c;++l)(o=u[l])&&(a=t.call(o,o.__data__,l,u))&&("__data__"in o&&(a.__data__=o.__data__),f[l]=a);return new w(r,this._parents)},selectAll:function(t){var n;t="function"==typeof t?(n=t,function(){return On(n.apply(this,arguments))}):Pn(t);for(var e=this._groups,r=e.length,i=[],o=[],a=0;a<r;++a)for(var u,c=e[a],f=c.length,l=0;l<f;++l)(u=c[l])&&(i.push(t.call(u,u.__data__,l,c)),o.push(u));return new w(i,o)},selectChild:function(t){return this.select(null==t?zn:(n="function"==typeof t?t:Fn(t),function(){return jn.call(this.children,n)}));var n},selectChildren:function(t){return this.selectAll(null==t?Hn:(n="function"==typeof t?t:Fn(t),function(){return Rn.call(this.children,n)}));var n},filter:function(t){"function"!=typeof t&&(t=In(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],f=0;f<u;++f)(o=a[f])&&t.call(o,o.__data__,f,a)&&c.push(o);return new w(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,Bn);var e,r=n?Un:qn,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),c=new Array(a),f=new Array(a),l=0;l<a;++l){var s=i[l],h=o[l],d=h.length,p="object"===_typeof(p=t.call(s,s&&s.__data__,l,i))&&"length"in p?p:Array.from(p),v=p.length,y=c[l]=new Array(v),g=u[l]=new Array(v);r(s,h,y,g,f[l]=new Array(d),p,n);for(var _,b,m=0,x=0;m<v;++m)if(_=y[m]){for(x<=m&&(x=m+1);!(b=g[x])&&++x<v;);_._next=b||null}}return(u=new w(u,i))._enter=c,u._exit=f,u},enter:function(){return new w(this._enter||this._groups.map(Dn),this._parents)},exit:function(){return new w(this._exit||this._groups.map(Dn),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit(),r="function"==typeof t?(r=t(r))&&r.selection():r.append(t+"");return null!=n&&(i=(i=n(i))&&i.selection()),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var t=t.selection?t.selection():t,n=this._groups,e=t._groups,r=n.length,t=e.length,i=Math.min(r,t),o=new Array(r),a=0;a<i;++a)for(var u,c=n[a],f=e[a],l=c.length,s=o[a]=new Array(l),h=0;h<l;++h)(u=c[h]||f[h])&&(s[h]=u);for(;a<r;++a)o[a]=n[a];return new w(o,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];0<=--o;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e=e||Yn;for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,u=n[o],c=u.length,f=i[o]=new Array(c),l=0;l<c;++l)(a=u[l])&&(f[l]=a);f.sort(t)}return new w(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0,n=_createForOfIteratorHelper(this);try{for(n.s();!n.n().done;)++t}catch(t){n.e(t)}finally{n.f()}return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e,t=An(t);return arguments.length<2?(e=this.node(),t.local?e.getAttributeNS(t.space,t.local):e.getAttribute(t)):this.each((null==n?t.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?t.local?function(n,e){return function(){var t=e.apply(this,arguments);null==t?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,t)}}:function(n,e){return function(){var t=e.apply(this,arguments);null==t?this.removeAttribute(n):this.setAttribute(n,t)}}:t.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(t,n))},style:function(t,n,e){return 1<arguments.length?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(n,e,r){return function(){var t=e.apply(this,arguments);null==t?this.style.removeProperty(n):this.style.setProperty(n,t,r)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):Xn(this.node(),t)},property:function(t,n){return 1<arguments.length?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(n,e){return function(){var t=e.apply(this,arguments);null==t?delete this[n]:this[n]=t}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=Vn(t+"");if(arguments.length<2){for(var r=Wn(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?Kn:Qn)(this,t)}}:n?function(t){return function(){Kn(this,t)}}:function(t){return function(){Qn(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?$n:("function"==typeof t?function(n){return function(){var t=n.apply(this,arguments);this.textContent=null==t?"":t}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Jn:("function"==typeof t?function(n){return function(){var t=n.apply(this,arguments);this.innerHTML=null==t?"":t}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(te)},lower:function(){return this.each(ne)},append:function(t){var n="function"==typeof t?t:Sn(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:Sn(t),r=null==n?ee:"function"==typeof n?n:Nn(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(re)},clone:function(t){return this.select(t?oe:ie)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return 0<=e&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}),a=o.length;if(!(arguments.length<2)){for(u=n?ue:ae,r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var c,f=0,l=u.length;f<l;++f)for(r=0,c=u[f];r<a;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return ce(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return ce(this,t,n)}})(t,n))}},Symbol.iterator,fe);var he=0;function de(){return new pe}function pe(){this._="@"+(++he).toString(36)}function ve(t){for(var n;n=t.sourceEvent;)t=n;return t}function ye(t,n){if(t=ve(t),n=void 0===n?t.currentTarget:n){var e=n.ownerSVGElement||n;if(e.createSVGPoint)return(e=e.createSVGPoint()).x=t.clientX,e.y=t.clientY,[(e=e.matrixTransform(n.getScreenCTM().inverse())).x,e.y];if(n.getBoundingClientRect)return e=n.getBoundingClientRect(),[t.clientX-e.left-n.clientLeft,t.clientY-e.top-n.clientTop]}return[t.pageX,t.pageY]}var ge={passive:!(pe.prototype=de.prototype={constructor:pe,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}})},_e={capture:!0,passive:!1};function be(t){t.stopImmediatePropagation()}function me(t){t.preventDefault(),t.stopImmediatePropagation()}function xe(t){var n=t.document.documentElement,t=q(t).on("dragstart.drag",me,_e);"onselectstart"in n?t.on("selectstart.drag",me,_e):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function we(t,n){var e=t.document.documentElement,r=q(t).on("dragstart.drag",null);n&&(r.on("click.drag",me,_e),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function Me(t){return function(){return t}}function ke(t,n){var e=n.sourceEvent;Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},subject:{value:n.subject,enumerable:!0,configurable:!0},target:{value:n.target,enumerable:!0,configurable:!0},identifier:{value:n.identifier,enumerable:!0,configurable:!0},active:{value:n.active,enumerable:!0,configurable:!0},x:{value:n.x,enumerable:!0,configurable:!0},y:{value:n.y,enumerable:!0,configurable:!0},dx:{value:n.dx,enumerable:!0,configurable:!0},dy:{value:n.dy,enumerable:!0,configurable:!0},_:{value:n.dispatch}})}function Te(t){return!t.ctrlKey&&!t.button}function Ae(){return this.parentNode}function Se(t,n){return null==n?{x:t.x,y:t.y}:n}function Ee(){return navigator.maxTouchPoints||"ontouchstart"in this}function Ne(t,n,e){(t.prototype=n.prototype=e).constructor=t}function Oe(t,n){var e,r=Object.create(t.prototype);for(e in n)r[e]=n[e];return r}function Ce(){}ke.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Pe=1/.7,Ie="\\s*([+-]?\\d+)\\s*",Fe="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",je="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ze=/^#([0-9a-f]{3,8})$/,Re=new RegExp("^rgb\\(".concat(Ie,",").concat(Ie,",").concat(Ie,"\\)$")),He=new RegExp("^rgb\\(".concat(je,",").concat(je,",").concat(je,"\\)$")),De=new RegExp("^rgba\\(".concat(Ie,",").concat(Ie,",").concat(Ie,",").concat(Fe,"\\)$")),Le=new RegExp("^rgba\\(".concat(je,",").concat(je,",").concat(je,",").concat(Fe,"\\)$")),qe=new RegExp("^hsl\\(".concat(Fe,",").concat(je,",").concat(je,"\\)$")),Ue=new RegExp("^hsla\\(".concat(Fe,",").concat(je,",").concat(je,",").concat(Fe,"\\)$")),Be={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ye(){return this.rgb().formatHex()}function Ge(){return this.rgb().formatRgb()}function Xe(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=ze.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Ve(n):3===e?new f(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?We(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?We(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Re.exec(t))?new f(n[1],n[2],n[3],1):(n=He.exec(t))?new f(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=De.exec(t))?We(n[1],n[2],n[3],n[4]):(n=Le.exec(t))?We(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=qe.exec(t))?er(n[1],n[2]/100,n[3]/100,1):(n=Ue.exec(t))?er(n[1],n[2]/100,n[3]/100,n[4]):Be.hasOwnProperty(t)?Ve(Be[t]):"transparent"===t?new f(NaN,NaN,NaN,0):null}function Ve(t){return new f(t>>16&255,t>>8&255,255&t,1)}function We(t,n,e,r){return new f(t=r<=0?n=e=NaN:t,n,e,r)}function Ze(t){return(t=t instanceof Ce?t:Xe(t))?new f((t=t.rgb()).r,t.g,t.b,t.opacity):new f}function Ke(t,n,e,r){return 1===arguments.length?Ze(t):new f(t,n,e,null==r?1:r)}function f(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Qe(){return"#".concat(nr(this.r)).concat(nr(this.g)).concat(nr(this.b))}function $e(){var t=Je(this.opacity);return"".concat(1===t?"rgb(":"rgba(").concat(tr(this.r),", ").concat(tr(this.g),", ").concat(tr(this.b)).concat(1===t?")":", ".concat(t,")"))}function Je(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function tr(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function nr(t){return((t=tr(t))<16?"0":"")+t.toString(16)}function er(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||1<=e?t=n=NaN:n<=0&&(t=NaN),new or(t,n,e,r)}function rr(t){var n,e,r,i,o,a,u,c;return t instanceof or?new or(t.h,t.s,t.l,t.opacity):(t=t instanceof Ce?t:Xe(t))?t instanceof or?t:(n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),a=NaN,c=((o=Math.max(n,e,r))+i)/2,(u=o-i)?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=c<.5?o+i:2-o-i,a*=60):u=0<c&&c<1?0:a,new or(a,u,c,t.opacity)):new or}function ir(t,n,e,r){return 1===arguments.length?rr(t):new or(t,n,e,null==r?1:r)}function or(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ar(t){return(t=(t||0)%360)<0?t+360:t}function ur(t){return Math.max(0,Math.min(1,t||0))}function cr(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Ne(Ce,Xe,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Ye,formatHex:Ye,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return rr(this).formatHsl()},formatRgb:Ge,toString:Ge}),Ne(f,Ke,Oe(Ce,{brighter:function(t){return t=null==t?Pe:Math.pow(Pe,t),new f(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new f(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},clamp:function(){return new f(tr(this.r),tr(this.g),tr(this.b),Je(this.opacity))},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Qe,formatHex:Qe,formatHex8:function(){return"#".concat(nr(this.r)).concat(nr(this.g)).concat(nr(this.b)).concat(nr(255*(isNaN(this.opacity)?1:this.opacity)))},formatRgb:$e,toString:$e})),Ne(or,ir,Oe(Ce,{brighter:function(t){return t=null==t?Pe:Math.pow(Pe,t),new or(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new or(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,n=e+(e<.5?e:1-e)*n,e=2*e-n;return new f(cr(240<=t?t-240:120+t,e,n),cr(t,e,n),cr(t<120?240+t:t-120,e,n),this.opacity)},clamp:function(){return new or(ar(this.h),ur(this.s),ur(this.l),Je(this.opacity))},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=Je(this.opacity);return"".concat(1===t?"hsl(":"hsla(").concat(ar(this.h),", ").concat(100*ur(this.s),"%, ").concat(100*ur(this.l),"%").concat(1===t?")":", ".concat(t,")"))}}));var fr=Math.PI/180,lr=180/Math.PI,sr=.96422,hr=1,dr=.82521,pr=4/29,vr=6/29,yr=3*vr*vr,gr=vr*vr*vr;function _r(t){var n,e,r,i,o,a;return t instanceof mr?new mr(t.l,t.a,t.b,t.opacity):t instanceof Sr?Er(t):(i=xr((.2225045*(n=kr((t=t instanceof f?t:Ze(t)).r))+.7168786*(e=kr(t.g))+.0606169*(r=kr(t.b)))/hr),n===e&&e===r?o=a=i:(o=xr((.4360747*n+.3850649*e+.1430804*r)/sr),a=xr((.0139322*n+.0971045*e+.7141733*r)/dr)),new mr(116*i-16,500*(o-i),200*(i-a),t.opacity))}function br(t,n,e,r){return 1===arguments.length?_r(t):new mr(t,n,e,null==r?1:r)}function mr(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function xr(t){return gr<t?Math.pow(t,1/3):t/yr+pr}function wr(t){return vr<t?t*t*t:yr*(t-pr)}function Mr(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function kr(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Tr(t){var n;return t instanceof Sr?new Sr(t.h,t.c,t.l,t.opacity):0===(t=t instanceof mr?t:_r(t)).a&&0===t.b?new Sr(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity):new Sr((n=Math.atan2(t.b,t.a)*lr)<0?360+n:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Ar(t,n,e,r){return 1===arguments.length?Tr(t):new Sr(t,n,e,null==r?1:r)}function Sr(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Er(t){var n;return isNaN(t.h)?new mr(t.l,0,0,t.opacity):(n=t.h*fr,new mr(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity))}Ne(mr,br,Oe(Ce,{brighter:function(t){return new mr(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new mr(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new f(Mr(3.1338561*(n=sr*wr(n))-1.6168667*(t=hr*wr(t))-.4906146*(e=dr*wr(e))),Mr(-.9787684*n+1.9161415*t+.033454*e),Mr(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Ne(Sr,Ar,Oe(Ce,{brighter:function(t){return new Sr(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Sr(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Er(this).rgb()}}));var Nr=1.78277,Or=-.29227,Cr=-.90649,Pr=1.97294,Ir=Pr*Cr,Fr=Pr*Nr,jr=Nr*Or- -.14861*Cr;function zr(t,n,e,r){return 1===arguments.length?(i=t)instanceof Rr?new Rr(i.h,i.s,i.l,i.opacity):(o=(i=i instanceof f?i:Ze(i)).r/255,a=i.g/255,c=i.b/255,c=(Pr*(a-(o=(jr*c+Ir*o-Fr*a)/(jr+Ir-Fr)))-Or*(a=c-o))/Cr,new Rr((c=(u=Math.sqrt(c*c+a*a)/(Pr*o*(1-o)))?Math.atan2(c,a)*lr-120:NaN)<0?c+360:c,u,o,i.opacity)):new Rr(t,n,e,null==r?1:r);var i,o,a,u,c}function Rr(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Hr(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}function Dr(a){var u=a.length-1;return function(t){var n=t<=0?t=0:1<=t?u-(t=1):Math.floor(t*u),e=a[n],r=a[n+1],i=0<n?a[n-1]:2*e-r,o=n<u-1?a[n+2]:2*r-e;return Hr((t-n/u)*u,i,e,r,o)}}function Lr(r){var i=r.length;return function(t){var n=Math.floor(((t%=1)<0?++t:t)*i),e=r[(n+i-1)%i];return Hr((t-n/i)*i,e,r[n%i],r[(n+1)%i],r[(n+2)%i])}}Ne(Rr,zr,Oe(Ce,{brighter:function(t){return t=null==t?Pe:Math.pow(Pe,t),new Rr(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Rr(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*fr,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),t=Math.sin(t);return new f(255*(n+e*(-.14861*r+Nr*t)),255*(n+e*(Or*r+Cr*t)),255*(n+Pr*r*e),this.opacity)}}));var qr=function(t){return function(){return t}};function Ur(n,e){return function(t){return n+t*e}}function Br(t,n){var e=n-t;return e?Ur(t,180<e||e<-180?e-360*Math.round(e/360):e):qr(isNaN(t)?n:t)}function Yr(o){return 1==(o=+o)?c:function(t,n){return n-t?(e=t,r=n,i=o,e=Math.pow(e,i),r=Math.pow(r,i)-e,i=1/i,function(t){return Math.pow(e+t*r,i)}):qr(isNaN(t)?n:t);var e,r,i}}function c(t,n){var e=n-t;return e?Ur(t,e):qr(isNaN(t)?n:t)}var Gr=function t(n){var a=Yr(n);function e(n,t){var e=a((n=Ke(n)).r,(t=Ke(t)).r),r=a(n.g,t.g),i=a(n.b,t.b),o=c(n.opacity,t.opacity);return function(t){return n.r=e(t),n.g=r(t),n.b=i(t),n.opacity=o(t),n+""}}return e.gamma=t,e}(1);function Xr(u){return function(t){for(var n,e=t.length,r=new Array(e),i=new Array(e),o=new Array(e),a=0;a<e;++a)n=Ke(t[a]),r[a]=n.r||0,i[a]=n.g||0,o[a]=n.b||0;return r=u(r),i=u(i),o=u(o),n.opacity=1,function(t){return n.r=r(t),n.g=i(t),n.b=o(t),n+""}}}var Vr=Xr(Dr),Ie=Xr(Lr);function Wr(n,e){e=e||[];var r,i=n?Math.min(e.length,n.length):0,o=e.slice();return function(t){for(r=0;r<i;++r)o[r]=n[r]*(1-t)+e[r]*t;return o}}function Zr(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Kr(t,n){for(var e=n?n.length:0,r=t?Math.min(e,t.length):0,i=new Array(r),o=new Array(e),a=0;a<r;++a)i[a]=ri(t[a],n[a]);for(;a<e;++a)o[a]=n[a];return function(t){for(a=0;a<r;++a)o[a]=i[a](t);return o}}function Qr(n,e){var r=new Date;return n=+n,e=+e,function(t){return r.setTime(n*(1-t)+e*t),r}}function $r(n,e){return n=+n,e=+e,function(t){return n*(1-t)+e*t}}function Jr(t,n){var e,r={},i={};for(e in null!==t&&"object"===_typeof(t)||(t={}),n=null!==n&&"object"===_typeof(n)?n:{})e in t?r[e]=ri(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var ti=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ni=new RegExp(ti.source,"g");function ei(t,r){var n,e,i,o,a,u=ti.lastIndex=ni.lastIndex=0,c=-1,f=[],l=[];for(t+="",r+="";(n=ti.exec(t))&&(e=ni.exec(r));)(i=e.index)>u&&(i=r.slice(u,i),f[c]?f[c]+=i:f[++c]=i),(n=n[0])===(e=e[0])?f[c]?f[c]+=e:f[++c]=e:(f[++c]=null,l.push({i:c,x:$r(n,e)})),u=ni.lastIndex;return u<r.length&&(i=r.slice(u),f[c]?f[c]+=i:f[++c]=i),f.length<2?l[0]?(a=l[0].x,function(t){return a(t)+""}):(o=r,function(){return o}):(r=l.length,function(t){for(var n,e=0;e<r;++e)f[(n=l[e]).i]=n.x(t);return f.join("")})}function ri(t,n){var e=_typeof(n);return null==n||"boolean"===e?qr(n):("number"===e?$r:"string"===e?(e=Xe(n))?(n=e,Gr):ei:n instanceof Xe?Gr:n instanceof Date?Qr:Zr(n)?Wr:Array.isArray(n)?Kr:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Jr:$r)(t,n)}function ii(n,e){return n=+n,e=+e,function(t){return Math.round(n*(1-t)+e*t)}}var oi,ai=180/Math.PI,ui={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function ci(t,n,e,r,i,o){var a,u,c;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,c/=u),t*r<n*e&&(t=-t,n=-n,c=-c,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*ai,skewX:Math.atan(c)*ai,scaleX:a,scaleY:u}}function fi(h,d,p,v){function y(t){return t.length?t.pop()+" ":""}return function(t,n){var e,r,i,o,a,u,c,f,l=[],s=[];return t=h(t),n=h(n),r=t.translateX,i=t.translateY,c=n.translateX,a=n.translateY,u=l,o=s,r!==c||i!==a?(e=u.push("translate(",null,d,null,p),o.push({i:e-4,x:$r(r,c)},{i:e-2,x:$r(i,a)})):(c||a)&&u.push("translate("+c+d+a+p),o=t.rotate,r=l,e=s,o!==(i=n.rotate)?(180<o-i?i+=360:180<i-o&&(o+=360),e.push({i:r.push(y(r)+"rotate(",null,v)-2,x:$r(o,i)})):i&&r.push(y(r)+"rotate("+i+v),u=t.skewX,c=l,a=s,u!==(o=n.skewX)?a.push({i:c.push(y(c)+"skewX(",null,v)-2,x:$r(u,o)}):o&&c.push(y(c)+"skewX("+o+v),r=t.scaleX,i=t.scaleY,a=n.scaleY,u=l,c=s,r!==(o=n.scaleX)||i!==a?(f=u.push(y(u)+"scale(",null,",",null,")"),c.push({i:f-4,x:$r(r,o)},{i:f-2,x:$r(i,a)})):1===o&&1===a||u.push(y(u)+"scale("+o+","+a+")"),t=n=null,function(t){for(var n,e=-1,r=s.length;++e<r;)l[(n=s[e]).i]=n.x(t);return l.join("")}}}var li=fi(function(t){return(t=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"")).isIdentity?ui:ci(t.a,t.b,t.c,t.d,t.e,t.f)},"px, ","px)","deg)"),si=fi(function(t){return null!=t&&((oi=oi||document.createElementNS("http://www.w3.org/2000/svg","g")).setAttribute("transform",t),t=oi.transform.baseVal.consolidate())?ci((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):ui},", ",")",")");function hi(t){return((t=Math.exp(t))+1/t)/2}var di=function e(s,h,d){function t(t,n){var r,i,o,a=t[0],u=t[1],c=t[2],t=n[0],e=n[2],f=t-a,l=n[1]-u,t=f*f+l*l;return(e=t<1e-12?(o=Math.log(e/c)/s,function(t){return[a+t*f,u+t*l,c*Math.exp(s*t*o)]}):(r=Math.sqrt(t),n=(e*e-c*c+d*t)/(2*c*h*r),t=(e*e-c*c-d*t)/(2*e*h*r),i=Math.log(Math.sqrt(n*n+1)-n),o=(Math.log(Math.sqrt(t*t+1)-t)-i)/s,function(t){var t=t*o,n=hi(i),e=c/(h*r)*(n*(e=s*t+i,((e=Math.exp(2*e))-1)/(e+1))-(e=i,((e=Math.exp(i))-1/e)/2));return[a+e*f,u+e*l,c*n/hi(s*t+i)]})).duration=1e3*o*s/Math.SQRT2,e}return t.rho=function(t){var t=Math.max(.001,+t),n=t*t;return e(t,n,n*n)},t}(Math.SQRT2,2,4);function pi(a){return function(n,t){var e=a((n=ir(n)).h,(t=ir(t)).h),r=c(n.s,t.s),i=c(n.l,t.l),o=c(n.opacity,t.opacity);return function(t){return n.h=e(t),n.s=r(t),n.l=i(t),n.opacity=o(t),n+""}}}je=pi(Br),Fe=pi(c);function vi(a){return function(n,t){var e=a((n=Ar(n)).h,(t=Ar(t)).h),r=c(n.c,t.c),i=c(n.l,t.l),o=c(n.opacity,t.opacity);return function(t){return n.h=e(t),n.c=r(t),n.l=i(t),n.opacity=o(t),n+""}}}var yi=vi(Br),gi=vi(c);function _i(u){return function t(a){function n(n,t){var e=u((n=zr(n)).h,(t=zr(t)).h),r=c(n.s,t.s),i=c(n.l,t.l),o=c(n.opacity,t.opacity);return function(t){return n.h=e(t),n.s=r(t),n.l=i(Math.pow(t,a)),n.opacity=o(t),n+""}}return a=+a,n.gamma=t,n}(1)}var bi=_i(Br),mi=_i(c);function xi(t,n){void 0===n&&(n=t,t=ri);for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}}var wi,Mi,ki=0,Ti=0,Ai=0,Si=1e3,Ei=0,Ni=0,Oi=0,Ci="object"===("undefined"==typeof performance?"undefined":_typeof(performance))&&performance.now?performance:Date,Pi="object"===("undefined"==typeof window?"undefined":_typeof(window))&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ii(){return Ni||(Pi(Fi),Ni=Ci.now()+Oi)}function Fi(){Ni=0}function ji(){this._call=this._time=this._next=null}function zi(t,n,e){var r=new ji;return r.restart(t,n,e),r}function Ri(){Ii(),++ki;for(var t,n=wi;n;)0<=(t=Ni-n._time)&&n._call.call(void 0,t),n=n._next;--ki}function Hi(){Ni=(Ei=Ci.now())+Oi,ki=Ti=0;try{Ri()}finally{for(var t,n,e=wi,r=1/(ki=0);e;)e=e._call?(r>e._time&&(r=e._time),(t=e)._next):(n=e._next,e._next=null,t?t._next=n:wi=n);Mi=t,Li(r),Ni=0}}function Di(){var t=Ci.now(),n=t-Ei;Si<n&&(Oi-=n,Ei=t)}function Li(t){ki||(Ti=Ti&&clearTimeout(Ti),24<t-Ni?(t<1/0&&(Ti=setTimeout(Hi,t-Ci.now()-Oi)),Ai=Ai&&clearInterval(Ai)):(Ai||(Ei=Ci.now(),Ai=setInterval(Di,Si)),ki=1,Pi(Hi)))}function qi(n,e,t){var r=new ji;return e=null==e?0:+e,r.restart(function(t){r.stop(),n(t+e)},e,t),r}ji.prototype=zi.prototype={constructor:ji,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Ii():+e)+(null==n?0:+n),this._next||Mi===this||(Mi?Mi._next=this:wi=this,Mi=this),this._call=t,this._time=e,Li()},stop:function(){this._call&&(this._call=null,this._time=1/0,Li())}};var Ui=xn("start","end","cancel","interrupt"),Bi=[],Yi=0,Gi=1,Xi=2,Vi=3,Wi=4,Zi=5,Ki=6;function Qi(t,n,e,r,i,o){var a,u,c,f,l,s=t.__transition;if(s){if(e in s)return}else t.__transition={};function h(t){var n,e,r,i;if(c.state!==Gi)return p();for(n in l)if((i=l[n]).name===c.name){if(i.state===Vi)return qi(h);i.state===Wi?(i.state=Ki,i.timer.stop(),i.on.call("interrupt",a,a.__data__,i.index,i.group),delete l[n]):+n<u&&(i.state=Ki,i.timer.stop(),i.on.call("cancel",a,a.__data__,i.index,i.group),delete l[n])}if(qi(function(){c.state===Vi&&(c.state=Wi,c.timer.restart(d,c.delay,c.time),d(t))}),c.state=Xi,c.on.call("start",a,a.__data__,c.index,c.group),c.state===Xi){for(c.state=Vi,f=new Array(r=c.tween.length),n=0,e=-1;n<r;++n)(i=c.tween[n].value.call(a,a.__data__,c.index,c.group))&&(f[++e]=i);f.length=e+1}}function d(t){for(var n=t<c.duration?c.ease.call(null,t/c.duration):(c.timer.restart(p),c.state=Zi,1),e=-1,r=f.length;++e<r;)f[e].call(a,n);c.state===Zi&&(c.on.call("end",a,a.__data__,c.index,c.group),p())}function p(){for(var t in c.state=Ki,c.timer.stop(),delete l[u],l)return;delete a.__transition}a=t,u=e,c={name:n,index:r,group:i,on:Ui,tween:Bi,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Yi},((l=a.__transition)[u]=c).timer=zi(function(t){c.state=Gi,c.timer.restart(h,c.delay,c.time),c.delay<=t&&h(t-c.delay)},0,c.time)}function $i(t,n){t=to(t,n);if(t.state>Yi)throw new Error("too late; already scheduled");return t}function Ji(t,n){t=to(t,n);if(t.state>Vi)throw new Error("too late; already running");return t}function to(t,n){t=t.__transition;if(t=t&&t[n])return t;throw new Error("transition not found")}function no(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name!==n?a=!1:(r=Xi<e.state&&e.state<Zi,e.state=Ki,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]);a&&delete t.__transition}}function eo(t,n,e){var r=t._id;return t.each(function(){var t=Ji(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return to(t,r).value[n]}}function ro(t,n){var e;return("number"==typeof n?$r:n instanceof Xe?Gr:(e=Xe(n))?(n=e,Gr):ei)(t,n)}function io(r,i){var o,a;function t(){var n,e,t=i.apply(this,arguments);return o=t!==a?(a=t)&&(n=r,e=t,function(t){this.setAttributeNS(n.space,n.local,e.call(this,t))}):o}return t._value=i,t}function oo(r,i){var o,a;function t(){var n,e,t=i.apply(this,arguments);return o=t!==a?(a=t)&&(n=r,e=t,function(t){this.setAttribute(n,e.call(this,t))}):o}return t._value=i,t}var ao=se.prototype.constructor;function uo(t){return function(){this.style.removeProperty(t)}}function co(i,o,a){var u,c;function t(){var n,e,r,t=o.apply(this,arguments);return u=t!==c?(c=t)&&(n=i,e=t,r=a,function(t){this.style.setProperty(n,e.call(this,t),r)}):u}return t._value=o,t}function fo(e){var r,i;function t(){var n,t=e.apply(this,arguments);return r=t!==i?(i=t)&&(n=t,function(t){this.textContent=n.call(this,t)}):r}return t._value=e,t}var lo=0;function so(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function ho(t){return se().transition(t)}var po=se.prototype;so.prototype=ho.prototype=_defineProperty({constructor:so,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Nn(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,c,f=r[a],l=f.length,s=o[a]=new Array(l),h=0;h<l;++h)(u=f[h])&&(c=t.call(u,u.__data__,h,f))&&("__data__"in u&&(c.__data__=u.__data__),s[h]=c,Qi(s[h],n,e,h,s,to(u,e)));return new so(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Pn(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var c,f=r[u],l=f.length,s=0;s<l;++s)if(c=f[s]){for(var h,d=t.call(c,c.__data__,s,f),p=to(c,e),v=0,y=d.length;v<y;++v)(h=d[v])&&Qi(h,n,e,v,d,p);o.push(d),a.push(c)}return new so(o,a,n,e)},selectChild:po.selectChild,selectChildren:po.selectChildren,filter:function(t){"function"!=typeof t&&(t=In(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],f=0;f<u;++f)(o=a[f])&&t.call(o,o.__data__,f,a)&&c.push(o);return new so(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,t=e.length,i=Math.min(r,t),o=new Array(r),a=0;a<i;++a)for(var u,c=n[a],f=e[a],l=c.length,s=o[a]=new Array(l),h=0;h<l;++h)(u=c[h]||f[h])&&(s[h]=u);for(;a<r;++a)o[a]=n[a];return new so(o,this._parents,this._name,this._id)},selection:function(){return new ao(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=++lo,r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,f=0;f<c;++f)(a=u[f])&&Qi(a,t,e,f,u,{time:(a=to(a,n)).time+a.delay+a.duration,delay:0,duration:a.duration,ease:a.ease});return new so(r,this._parents,t,e)},call:po.call,nodes:po.nodes,node:po.node,size:po.size,empty:po.empty,each:po.each,on:function(t,n){var e,r,i,o,a,u,c=this._id;return arguments.length<2?to(this.node(),c).on.on(t):this.each((e=c,i=n,u=((r=t)+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return!(t=0<=n?t.slice(0,n):t)||"start"===t})?$i:Ji,function(){var t=u(this,e),n=t.on;n!==o&&(a=(o=n).copy()).on(r,i),t.on=a}))},attr:function(t,n){var e=An(t),r="transform"===e?si:ro;return this.attrTween(t,"function"==typeof n?(e.local?function(r,i,o){var a,u,c;return function(){var t,n,e=o(this);if(null!=e)return(t=this.getAttributeNS(r.space,r.local))===(n=e+"")?null:t===a&&n===u?c:(u=n,c=i(a=t,e));this.removeAttributeNS(r.space,r.local)}}:function(r,i,o){var a,u,c;return function(){var t,n,e=o(this);if(null!=e)return(t=this.getAttribute(r))===(n=e+"")?null:t===a&&n===u?c:(u=n,c=i(a=t,e));this.removeAttribute(r)}})(e,r,eo(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(n,e,r){var i,o,a=r+"";return function(){var t=this.getAttributeNS(n.space,n.local);return t===a?null:t===i?o:o=e(i=t,r)}}:function(n,e,r){var i,o,a=r+"";return function(){var t=this.getAttribute(n);return t===a?null:t===i?o:o=e(i=t,r)}})(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;return t=An(t),this.tween(e,(t.local?io:oo)(t,n))},style:function(t,n,e){var r,i,o,a,u,c,f,l,s,h,d,p,v,y,g,_,b,m,x,w,M,k,T,A,S,E="transform"==(t+="")?li:ro;return null==n?this.styleTween(t,(M=t,k=E,function(){var t=Xn(this,M),n=(this.style.removeProperty(M),Xn(this,M));return t===n?null:t===T&&n===A?S:S=k(T=t,A=n)})).on("end.style."+t,uo(t)):"function"==typeof n?this.styleTween(t,(_=E,b=eo(this,"style."+(g=t),n),function(){var t=Xn(this,g),n=b(this),e=n+"";return null==n&&(this.style.removeProperty(g),e=n=Xn(this,g)),t===e?null:t===m&&e===x?w:(x=e,w=_(m=t,n))})).each((f=this._id,y="end."+(v="style."+(l=t)),function(){var t=Ji(this,f),n=t.on,e=null==t.value[v]?p=p||uo(l):void 0;n===s&&d===e||(h=(s=n).copy()).on(y,d=e),t.on=h})):this.styleTween(t,(r=t,i=E,c=(o=n)+"",function(){var t=Xn(this,r);return t===c?null:t===a?u:u=i(a=t,o)}),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,co(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?(e=eo(this,"text",t),function(){var t=e(this);this.textContent=null==t?"":t}):(n=null==t?"":t+"",function(){this.textContent=n}));var n,e},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,fo(t))},remove:function(){return this.on("end.remove",(e=this._id,function(){var t,n=this.parentNode;for(t in this.__transition)if(+t!==e)return;n&&n.removeChild(this)}));var e},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=to(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(i,o){var a,u;return function(){var t=Ji(this,i),n=t.tween;if(n!==a)for(var e=0,r=(u=a=n).length;e<r;++e)if(u[e].name===o){(u=u.slice()).splice(e,1);break}t.tween=u}}:function(o,a,u){var c,f;if("function"!=typeof u)throw new Error;return function(){var t=Ji(this,o),n=t.tween;if(n!==c){f=(c=n).slice();for(var e={name:a,value:u},r=0,i=f.length;r<i;++r)if(f[r].name===a){f[r]=e;break}r===i&&f.push(e)}t.tween=f}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){$i(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){$i(this,t).delay=n}})(n,t)):to(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Ji(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Ji(this,t).duration=n}})(n,t)):to(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(((t,n)=>{if("function"!=typeof n)throw new Error;return function(){Ji(this,t).ease=n}})(n,t)):to(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each((n=this._id,e=t,function(){var t=e.apply(this,arguments);if("function"!=typeof t)throw new Error;Ji(this,n).ease=t}));var n,e},end:function(){var i,o,a=this,u=a._id,c=a.size();return new Promise(function(t,n){var e={value:n},r={value:function(){0==--c&&t()}};a.each(function(){var t=Ji(this,u),n=t.on;n!==i&&((o=(i=n).copy())._.cancel.push(e),o._.interrupt.push(e),o._.end.push(r)),t.on=o}),0===c&&t()})}},Symbol.iterator,po[Symbol.iterator]);function vo(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function yo(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}var po=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),go=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),_o=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),bo=Math.PI,mo=bo/2;function xo(t){return(1-Math.cos(bo*t))/2}function wo(t){return 1.0009775171065494*(Math.pow(2,-10*t)-.0009765625)}function Mo(t){return((t*=2)<=1?wo(1-t):2-wo(t-1))/2}function ko(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var To=7.5625;function Ao(t){return(t=+t)<4/11?To*t*t:t<8/11?To*(t-=6/11)*t+.75:t<10/11?To*(t-=9/11)*t+.9375:To*(t-=21/22)*t+63/64}var So=1.70158,Eo=function t(n){function e(t){return(t=+t)*t*(n*(t-1)+t)}return n=+n,e.overshoot=t,e}(So),No=function t(n){function e(t){return--t*t*((t+1)*n+t)+1}return n=+n,e.overshoot=t,e}(So),So=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(So),Oo=2*Math.PI,Co=function n(e,r){var i=Math.asin(1/(e=Math.max(1,e)))*(r/=Oo);function t(t){return e*wo(- --t)*Math.sin((i-t)/r)}return t.amplitude=function(t){return n(t,r*Oo)},t.period=function(t){return n(e,t)},t}(1,.3),Po=function n(e,r){var i=Math.asin(1/(e=Math.max(1,e)))*(r/=Oo);function t(t){return 1-e*wo(t=+t)*Math.sin((t+i)/r)}return t.amplitude=function(t){return n(t,r*Oo)},t.period=function(t){return n(e,t)},t}(1,.3),Io=function n(e,r){var i=Math.asin(1/(e=Math.max(1,e)))*(r/=Oo);function t(t){return((t=2*t-1)<0?e*wo(-t)*Math.sin((i-t)/r):2-e*wo(t)*Math.sin((i+t)/r))/2}return t.amplitude=function(t){return n(t,r*Oo)},t.period=function(t){return n(e,t)},t}(1,.3),Fo={time:null,delay:0,duration:250,ease:yo};se.prototype.interrupt=function(t){return this.each(function(){no(this,t)})},se.prototype.transition=function(t){var n,e;t=t instanceof so?(n=t._id,t._name):(n=++lo,(e=Fo).time=Ii(),null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,f=0;f<c;++f)(a=u[f])&&Qi(a,t,n,f,u,e||((t,n)=>{for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error("transition ".concat(n," not found"));return e})(a,n));return new so(r,this._parents,t,n)};var jo=[null];var zo=function(t){return function(){return t}};function Ro(t,n){var e=n.sourceEvent;Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},target:{value:n.target,enumerable:!0,configurable:!0},selection:{value:n.selection,enumerable:!0,configurable:!0},mode:{value:n.mode,enumerable:!0,configurable:!0},_:{value:n.dispatch}})}function Ho(t){t.preventDefault(),t.stopImmediatePropagation()}var Do={name:"drag"},Lo={name:"space"},qo={name:"handle"},Uo={name:"center"},Bo=Math.abs,U=Math.max,B=Math.min;function Yo(t){return[+t[0],+t[1]]}function Go(t){return[Yo(t[0]),Yo(t[1])]}var Xo={name:"x",handles:["w","e"].map(ta),input:function(t,n){return null==t?null:[[+t[0],n[0][1]],[+t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Vo={name:"y",handles:["n","s"].map(ta),input:function(t,n){return null==t?null:[[n[0][0],+t[0]],[n[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Wo={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(ta),input:function(t){return null==t?null:Go(t)},output:function(t){return t}},Zo={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ko={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Qo={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},$o={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Jo={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function ta(t){return{type:t}}function na(t){return!t.ctrlKey&&!t.button}function ea(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function ra(){return navigator.maxTouchPoints||"ontouchstart"in this}function ia(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function oa(j){var z,n=ea,R=na,e=ra,H=!0,i=xn("start","brush","end"),r=6;function o(t){var n=t.property("__brush",l).selectAll(".overlay").data([ta("overlay")]),n=(n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Zo.overlay).merge(n).each(function(){var t=ia(this).extent;q(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),t.selectAll(".selection").data([ta("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Zo.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges"),t.selectAll(".handle").data(j.handles,function(t){return t.type}));n.exit().remove(),n.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Zo[t.type]}),t.each(D).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",u).filter(e).on("touchstart.brush",u).on("touchmove.brush",c).on("touchend.brush touchcancel.brush",f).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function D(){var t=q(this),n=ia(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-r/2:n[0][0]-r/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-r/2:n[0][1]-r/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+r:r}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+r:r})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function L(t,n,e){var r=t.__brush.emitter;return!r||e&&r.clean?new a(t,n,e):r}function a(t,n,e){this.that=t,this.args=n,this.state=t.__brush,this.active=0,this.clean=e}function u(t){var s,i,o,a,u,c,f,l,h,d,p,v,y,g,_,b,m,x,w,M,k,T,A,S,E,N,O,n,e,C,r;function P(t){var n,e,r=_createForOfIteratorHelper(t.changedTouches||[t]);try{for(r.s();!(n=r.n()).done;){var i,o=n.value,a=_createForOfIteratorHelper(N);try{for(a.s();!(i=a.n()).done;){var u=i.value;u.identifier===o.identifier&&(u.cur=ye(o,s))}}catch(t){a.e(t)}finally{a.f()}}}catch(t){r.e(t)}finally{r.f()}!A||S||E||1!==N.length||(e=N[0],Bo(e.cur[0]-e[0])>Bo(e.cur[1]-e[1])?E=!0:S=!0);var c,f=_createForOfIteratorHelper(N);try{for(f.s();!(c=f.n()).done;){var l=c.value;l.cur&&(l[0]=l.cur[0],l[1]=l.cur[1])}}catch(t){f.e(t)}finally{f.f()}T=!0,Ho(t),I(t)}function I(t){var n,e=N[0],r=e.point0;switch(M=e[0]-r[0],k=e[1]-r[1],o){case Lo:case Do:a&&(M=U(l-h,B(g-_,M)),d=h+M,b=_+M),u&&(k=U(p-v,B(m-x,k)),y=v+k,w=x+k);break;case qo:N[1]?(a&&(d=U(l,B(g,N[0][0])),b=U(l,B(g,N[1][0])),a=1),u&&(y=U(p,B(m,N[0][1])),w=U(p,B(m,N[1][1])),u=1)):(a<0?(M=U(l-h,B(g-h,M)),d=h+M,b=_):0<a&&(M=U(l-_,B(g-_,M)),d=h,b=_+M),u<0?(k=U(p-v,B(m-v,k)),y=v+k,w=x):0<u&&(k=U(p-x,B(m-x,k)),y=v,w=x+k));break;case Uo:a&&(d=U(l,B(g,h-M*a)),b=U(l,B(g,_+M*a))),u&&(y=U(p,B(m,v-k*u)),w=U(p,B(m,x+k*u)))}b<d&&(a*=-1,n=h,h=_,_=n,n=d,d=b,b=n,i in Ko)&&C.attr("cursor",Zo[i=Ko[i]]),w<y&&(u*=-1,n=v,v=x,x=n,n=y,y=w,w=n,i in Qo)&&C.attr("cursor",Zo[i=Qo[i]]),c.selection&&(f=c.selection),S&&(d=f[0][0],b=f[1][0]),E&&(y=f[0][1],w=f[1][1]),f[0][0]===d&&f[0][1]===y&&f[1][0]===b&&f[1][1]===w||(c.selection=[[d,y],[b,w]],D.call(s),O.brush(t,o.name))}function F(t){if(t.stopImmediatePropagation(),t.touches){if(t.touches.length)return;z&&clearTimeout(z),z=setTimeout(function(){z=null},500)}else we(t.view,T),r.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);var n;e.attr("pointer-events","all"),C.attr("cursor",Zo.overlay),c.selection&&(f=c.selection),(n=f)[0][0]!==n[1][0]&&n[0][1]!==n[1][1]||(c.selection=null,D.call(s)),O.end(t,o.name)}z&&!t.touches||R.apply(this,arguments)&&(s=this,i=t.target.__data__.type,o="selection"===(H&&t.metaKey?i="overlay":i)?Do:H&&t.altKey?Uo:qo,a=j===Vo?null:$o[i],u=j===Xo?null:Jo[i],n=(c=ia(s)).extent,f=c.selection,l=n[0][0],p=n[0][1],g=n[1][0],m=n[1][1],k=M=0,A=a&&u&&H&&t.shiftKey,N=Array.from(t.touches||[t],function(t){var n=t.identifier;return(t=ye(t,s)).point0=t.slice(),t.identifier=n,t}),no(s),O=L(s,arguments,!0).beforestart(),"overlay"===i?(f&&(T=!0),n=[N[0],N[1]||N[0]],c.selection=f=[[h=j===Vo?l:B(n[0][0],n[1][0]),v=j===Xo?p:B(n[0][1],n[1][1])],[_=j===Vo?g:U(n[0][0],n[1][0]),x=j===Xo?m:U(n[0][1],n[1][1])]],1<N.length&&I(t)):(h=f[0][0],v=f[0][1],_=f[1][0],x=f[1][1]),d=h,y=v,b=_,w=x,e=q(s).attr("pointer-events","none"),C=e.selectAll(".overlay").attr("cursor",Zo[i]),t.touches?(O.moved=P,O.ended=F):(r=q(t.view).on("mousemove.brush",P,!0).on("mouseup.brush",F,!0),H&&r.on("keydown.brush",function(t){switch(t.keyCode){case 16:A=a&&u;break;case 18:o===qo&&(a&&(_=b-M*a,h=d+M*a),u&&(x=w-k*u,v=y+k*u),o=Uo,I(t));break;case 32:o!==qo&&o!==Uo||(a<0?_=b-M:0<a&&(h=d-M),u<0?x=w-k:0<u&&(v=y-k),o=Lo,C.attr("cursor",Zo.selection),I(t));break;default:return}Ho(t)},!0).on("keyup.brush",function(t){switch(t.keyCode){case 16:A&&(S=E=A=!1,I(t));break;case 18:o===Uo&&(a<0?_=b:0<a&&(h=d),u<0?x=w:0<u&&(v=y),o=qo,I(t));break;case 32:o===Lo&&(o=t.altKey?(a&&(_=b-M*a,h=d+M*a),u&&(x=w-k*u,v=y+k*u),Uo):(a<0?_=b:0<a&&(h=d),u<0?x=w:0<u&&(v=y),qo),C.attr("cursor",Zo[i]),I(t));break;default:return}Ho(t)},!0),xe(t.view)),D.call(s),O.start(t,o.name))}function c(t){L(this,arguments).moved(t)}function f(t){L(this,arguments).ended(t)}function l(){var t=this.__brush||{selection:null};return t.extent=Go(n.apply(this,arguments)),t.dim=j,t}return o.move=function(t,u,r){t.tween?t.on("start.brush",function(t){L(this,arguments).beforestart().start(t)}).on("interrupt.brush end.brush",function(t){L(this,arguments).end(t)}).tween("brush",function(){var n=this,e=n.__brush,r=L(n,arguments),t=e.selection,i=j.input("function"==typeof u?u.apply(this,arguments):u,e.extent),o=ri(t,i);function a(t){e.selection=1===t&&null===i?null:o(t),D.call(n),r.brush()}return null!==t&&null!==i?a:a(1)}):t.each(function(){var t=arguments,n=this.__brush,e=j.input("function"==typeof u?u.apply(this,t):u,n.extent),t=L(this,t).beforestart();no(this),n.selection=null===e?null:e,D.call(this),t.start(r).brush(r).end(r)})},o.clear=function(t,n){o.move(t,null,n)},a.prototype={beforestart:function(){return 1==++this.active&&((this.state.emitter=this).starting=!0),this},start:function(t,n){return this.starting?(this.starting=!1,this.emit("start",t,n)):this.emit("brush",t),this},brush:function(t,n){return this.emit("brush",t,n),this},end:function(t,n){return 0==--this.active&&(delete this.state.emitter,this.emit("end",t,n)),this},emit:function(t,n,e){var r=q(this.that).datum();i.call(t,this.that,new Ro(t,{sourceEvent:n,target:o,selection:j.output(this.state.selection),mode:e,dispatch:i}),r)}},o.extent=function(t){return arguments.length?(n="function"==typeof t?t:zo(Go(t)),o):n},o.filter=function(t){return arguments.length?(R="function"==typeof t?t:zo(!!t),o):R},o.touchable=function(t){return arguments.length?(e="function"==typeof t?t:zo(!!t),o):e},o.handleSize=function(t){return arguments.length?(r=+t,o):r},o.keyModifiers=function(t){return arguments.length?(H=!!t,o):H},o.on=function(){var t=i.on.apply(i,arguments);return t===i?o:t},o}var aa=Math.abs,ua=Math.cos,ca=Math.sin,fa=Math.PI,la=fa/2,sa=2*fa,ha=Math.max,da=1e-12;function pa(e,t){return Array.from({length:t-e},function(t,n){return e+n})}function va(m,o){var a=0,u=null,x=null,c=null;function n(s){var h=s.length,d=new Array(h),t=pa(0,h),p=new Array(h*h),v=new Array(h),y=0;s=Float64Array.from({length:h*h},o?function(t,n){return s[n%h][n/h|0]}:function(t,n){return s[n/h|0][n%h]});for(var n=0;n<h;++n){for(var e=0,r=0;r<h;++r)e+=s[n*h+r]+m*s[r*h+n];y+=d[n]=e}var g,_=(y=ha(0,sa-a*h)/y)?a:sa/h,b=0,i=(u&&t.sort(function(t,n){return u(d[t],d[n])}),_createForOfIteratorHelper(t));try{for(i.s();!(g=i.n()).done;)(()=>{var e=g.value,t=b;if(m){var n,r=pa(1+~h,h).filter(function(t){return t<0?s[~t*h+e]:s[e*h+t]}),i=(x&&r.sort(function(t,n){return x(t<0?-s[~t*h+e]:s[e*h+t],n<0?-s[~n*h+e]:s[e*h+n])}),_createForOfIteratorHelper(r));try{for(i.s();!(n=i.n()).done;){var o=n.value;o<0?(p[~o*h+e]||(p[~o*h+e]={source:null,target:null})).target={index:e,startAngle:b,endAngle:b+=s[~o*h+e]*y,value:s[~o*h+e]}:(p[e*h+o]||(p[e*h+o]={source:null,target:null})).source={index:e,startAngle:b,endAngle:b+=s[e*h+o]*y,value:s[e*h+o]}}}catch(t){i.e(t)}finally{i.f()}}else{var a,r=pa(0,h).filter(function(t){return s[e*h+t]||s[t*h+e]}),u=(x&&r.sort(function(t,n){return x(s[e*h+t],s[e*h+n])}),_createForOfIteratorHelper(r));try{for(u.s();!(a=u.n()).done;){var c,f=a.value,l=void 0;e<f?(l=p[e*h+f]||(p[e*h+f]={source:null,target:null})).source={index:e,startAngle:b,endAngle:b+=s[e*h+f]*y,value:s[e*h+f]}:((l=p[f*h+e]||(p[f*h+e]={source:null,target:null})).target={index:e,startAngle:b,endAngle:b+=s[e*h+f]*y,value:s[e*h+f]},e===f&&(l.source=l.target)),l.source&&l.target&&l.source.value<l.target.value&&(c=l.source,l.source=l.target,l.target=c)}}catch(t){u.e(t)}finally{u.f()}}v[e]={index:e,startAngle:t,endAngle:b,value:d[e]},b+=_})()}catch(t){i.e(t)}finally{i.f()}return(p=Object.values(p)).groups=v,c?p.sort(c):p}return n.padAngle=function(t){return arguments.length?(a=ha(0,t),n):a},n.sortGroups=function(t){return arguments.length?(u=t,n):u},n.sortSubgroups=function(t){return arguments.length?(x=t,n):x},n.sortChords=function(t){return arguments.length?(null==t?c=null:(e=t,(c=function(t,n){return e(t.source.value+t.target.value,n.source.value+n.target.value)})._=t),n):c&&c._;var e},n}var ya=Math.PI,ga=2*ya,_a=1e-6,ba=ga-_a;function ma(t){this._+=t[0];for(var n=1,e=t.length;n<e;++n)this._+=arguments[n]+t[n]}var xa=(()=>_createClass(function t(n){_classCallCheck(this,t),this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==n?ma:(t=>{var r,n=Math.floor(t);if(0<=n)return 15<n?ma:(r=Math.pow(10,n),function(t){this._+=t[0];for(var n=1,e=t.length;n<e;++n)this._+=Math.round(arguments[n]*r)/r+t[n]});throw new Error("invalid digits: ".concat(t))})(n)},[{key:"moveTo",value:function(t,n){this._append(_templateObject=_templateObject||_taggedTemplateLiteral(["M",",",""]),this._x0=this._x1=+t,this._y0=this._y1=+n)}},{key:"closePath",value:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append(_templateObject2=_templateObject2||_taggedTemplateLiteral(["Z"])))}},{key:"lineTo",value:function(t,n){this._append(_templateObject3=_templateObject3||_taggedTemplateLiteral(["L",",",""]),this._x1=+t,this._y1=+n)}},{key:"quadraticCurveTo",value:function(t,n,e,r){this._append(_templateObject4=_templateObject4||_taggedTemplateLiteral(["Q",",",",",",",""]),+t,+n,this._x1=+e,this._y1=+r)}},{key:"bezierCurveTo",value:function(t,n,e,r,i,o){this._append(_templateObject5=_templateObject5||_taggedTemplateLiteral(["C",",",",",",",",",",",""]),+t,+n,+e,+r,this._x1=+i,this._y1=+o)}},{key:"arcTo",value:function(t,n,e,r,i){if(t=+t,n=+n,e=+e,r=+r,(i=+i)<0)throw new Error("negative radius: ".concat(i));var o,a,u=this._x1,c=this._y1,f=e-t,l=r-n,s=u-t,h=c-n,d=s*s+h*h;null===this._x1?this._append(_templateObject6=_templateObject6||_taggedTemplateLiteral(["M",",",""]),this._x1=t,this._y1=n):_a<d&&(Math.abs(h*f-l*s)>_a&&i?(a=f*f+l*l,r=(e=e-u)*e+(u=r-c)*u,c=Math.sqrt(a),o=Math.sqrt(d),d=(a=i*Math.tan((ya-Math.acos((a+d-r)/(2*c*o)))/2))/o,r=a/c,Math.abs(d-1)>_a&&this._append(_templateObject8=_templateObject8||_taggedTemplateLiteral(["L",",",""]),t+d*s,n+d*h),this._append(_templateObject9=_templateObject9||_taggedTemplateLiteral(["A",",",",0,0,",",",",",""]),i,i,+(s*u<h*e),this._x1=t+r*f,this._y1=n+r*l)):this._append(_templateObject7=_templateObject7||_taggedTemplateLiteral(["L",",",""]),this._x1=t,this._y1=n))}},{key:"arc",value:function(t,n,e,r,i,o){if(t=+t,n=+n,o=!!o,(e=+e)<0)throw new Error("negative radius: ".concat(e));var a=e*Math.cos(r),u=e*Math.sin(r),c=t+a,f=n+u,l=1^o,o=o?r-i:i-r;null===this._x1?this._append(_templateObject10=_templateObject10||_taggedTemplateLiteral(["M",",",""]),c,f):(Math.abs(this._x1-c)>_a||Math.abs(this._y1-f)>_a)&&this._append(_templateObject11=_templateObject11||_taggedTemplateLiteral(["L",",",""]),c,f),e&&(ba<(o=o<0?o%ga+ga:o)?this._append(_templateObject12=_templateObject12||_taggedTemplateLiteral(["A",",",",0,1,",",",",","A",",",",0,1,",",",",",""]),e,e,l,t-a,n-u,e,e,l,this._x1=c,this._y1=f):_a<o&&this._append(_templateObject13=_templateObject13||_taggedTemplateLiteral(["A",",",",0,",",",",",",",""]),e,e,+(ya<=o),l,this._x1=t+e*Math.cos(i),this._y1=n+e*Math.sin(i)))}},{key:"rect",value:function(t,n,e,r){this._append(_templateObject14=_templateObject14||_taggedTemplateLiteral(["M",",","h","v","h","Z"]),this._x0=this._x1=+t,this._y0=this._y1=+n,e=+e,+r,-e)}},{key:"toString",value:function(){return this._}}]))();function wa(){return new xa}wa.prototype=xa.prototype;var Ma=Array.prototype.slice;function ka(t){return function(){return t}}function Ta(t){return t.source}function Aa(t){return t.target}function Sa(t){return t.radius}function Ea(t){return t.startAngle}function Na(t){return t.endAngle}function Oa(){return 0}function Ca(){return 10}function Pa(c){var f=Ta,l=Aa,s=Sa,h=Sa,d=Ea,p=Na,v=Oa,y=null;function n(){var t,n=f.apply(this,arguments),e=l.apply(this,arguments),r=v.apply(this,arguments)/2,i=Ma.call(arguments),n=+s.apply(this,(i[0]=n,i)),o=d.apply(this,i)-la,a=p.apply(this,i)-la,e=+h.apply(this,(i[0]=e,i)),u=d.apply(this,i)-la,i=p.apply(this,i)-la;if(y=y||(t=wa()),da<r&&(aa(a-o)>2*r+da?o<a?(o+=r,a-=r):(o-=r,a+=r):o=a=(o+a)/2,aa(i-u)>2*r+da?u<i?(u+=r,i-=r):(u-=r,i+=r):u=i=(u+i)/2),y.moveTo(n*ua(o),n*ca(o)),y.arc(0,0,n,o,a),o===u&&a===i||(c?(r=e-+c.apply(this,arguments),a=(u+i)/2,y.quadraticCurveTo(0,0,r*ua(u),r*ca(u)),y.lineTo(e*ua(a),e*ca(a)),y.lineTo(r*ua(i),r*ca(i))):(y.quadraticCurveTo(0,0,e*ua(u),e*ca(u)),y.arc(0,0,e,u,i))),y.quadraticCurveTo(0,0,n*ua(o),n*ca(o)),y.closePath(),t)return y=null,t+""||null}return c&&(n.headRadius=function(t){return arguments.length?(c="function"==typeof t?t:ka(+t),n):c}),n.radius=function(t){return arguments.length?(s=h="function"==typeof t?t:ka(+t),n):s},n.sourceRadius=function(t){return arguments.length?(s="function"==typeof t?t:ka(+t),n):s},n.targetRadius=function(t){return arguments.length?(h="function"==typeof t?t:ka(+t),n):h},n.startAngle=function(t){return arguments.length?(d="function"==typeof t?t:ka(+t),n):d},n.endAngle=function(t){return arguments.length?(p="function"==typeof t?t:ka(+t),n):p},n.padAngle=function(t){return arguments.length?(v="function"==typeof t?t:ka(+t),n):v},n.source=function(t){return arguments.length?(f=t,n):f},n.target=function(t){return arguments.length?(l=t,n):l},n.context=function(t){return arguments.length?(y=null==t?null:t,n):y},n}var Ia=Array.prototype.slice;function Fa(t,n){return t-n}var ja=function(t){return function(){return t}};function za(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=((t,n)=>{for(var e=n[0],r=n[1],i=-1,o=0,a=t.length,u=a-1;o<a;u=o++){var c=t[o],f=c[0],l=c[1],s=t[u],h=s[0],d=s[1];if(((t,n,e)=>((t,n,e)=>(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1]))(t,n,e)&&((t,n,e)=>t<=n&&n<=e||e<=n&&n<=t)(t[t=+(t[0]===n[0])],e[t],n[t]))(c,s,n))return 0;r<l!=r<d&&e<(h-f)*(r-l)/(d-l)+f&&(i=-i)}return i})(t,n[r]))return e;return 0}function Ra(){}var Ha=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function Da(){var g=1,_=1,r=Rt,b=n;function e(n){var t=r(n);if(Array.isArray(t))t=t.slice().sort(Fa);else{for(var e=ct(n,La),t=It.apply(void 0,_toConsumableArray(zt(e[0],e[1],t)).concat([t]));t[t.length-1]>=e[1];)t.pop();for(;t[1]<e[0];)t.shift()}return t.map(function(t){return i(n,t)})}function i(n,t){var e=null==t?NaN:+t;if(isNaN(e))throw new Error("invalid value: ".concat(t));var a,u,r,i,o,c,f=[],l=[],s=n,h=e,d=function(t){b(t,n,e),0<(t=>{for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r})(t)?f.push([t]):l.push(t)},p=new Array,v=new Array;for(a=u=-1,i=qa(s[0],h),Ha[i<<1].forEach(y);++a<g-1;)r=i,i=qa(s[a+1],h),Ha[r|i<<1].forEach(y);for(Ha[i<<0].forEach(y);++u<_-1;){for(a=-1,i=qa(s[u*g+g],h),o=qa(s[u*g],h),Ha[i<<1|o<<2].forEach(y);++a<g-1;)r=i,i=qa(s[u*g+g+a+1],h),c=o,o=qa(s[u*g+a+1],h),Ha[r|i<<1|o<<2|c<<3].forEach(y);Ha[i|o<<3].forEach(y)}for(a=-1,o=s[u*g]>=h,Ha[o<<2].forEach(y);++a<g-1;)c=o,o=qa(s[u*g+a+1],h),Ha[o<<2|c<<3].forEach(y);function y(t){var n,e,r=[t[0][0]+a,t[0][1]+u],t=[t[1][0]+a,t[1][1]+u],i=m(r),o=m(t);(n=v[i])?(e=p[o])?(delete v[n.end],delete p[e.start],n===e?(n.ring.push(t),d(n.ring)):p[n.start]=v[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete v[n.end],n.ring.push(t),v[n.end=o]=n):(n=p[o])?(e=v[i])?(delete p[n.start],delete v[e.end],n===e?(n.ring.push(t),d(n.ring)):p[e.start]=v[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete p[n.start],n.ring.unshift(r),p[n.start=i]=n):p[i]=v[o]={start:i,end:o,ring:[r,t]}}return Ha[o<<3].forEach(y),l.forEach(function(t){for(var n,e=0,r=f.length;e<r;++e)if(-1!==za((n=f[e])[0],t))return void n.push(t)}),{type:"MultiPolygon",value:t,coordinates:f}}function m(t){return 2*t[0]+t[1]*(g+1)*4}function n(t,a,u){t.forEach(function(t){var n=t[0],e=t[1],r=0|n,i=0|e,o=Ua(a[i*g+r]);0<n&&n<g&&r===n&&(t[0]=Ba(n,Ua(a[i*g+r-1]),o,u)),0<e&&e<_&&i===e&&(t[1]=Ba(e,Ua(a[(i-1)*g+r]),o,u))})}return e.contour=i,e.size=function(t){if(!arguments.length)return[g,_];var n=Math.floor(t[0]),t=Math.floor(t[1]);if(0<=n&&0<=t)return g=n,_=t,e;throw new Error("invalid size")},e.thresholds=function(t){return arguments.length?(r="function"==typeof t?t:Array.isArray(t)?ja(Ia.call(t)):ja(t),e):r},e.smooth=function(t){return arguments.length?(b=t?n:Ra,e):b===n},e}function La(t){return isFinite(t)?t:NaN}function qa(t,n){return null!=t&&n<=+t}function Ua(t){return null==t||isNaN(t=+t)?-1/0:t}function Ba(t,n,e,r){r-=n,e-=n,n=isFinite(r)||isFinite(e)?r/e:Math.sign(r)/Math.sign(e);return isNaN(n)?t:t+n-.5}function Ya(t){return t[0]}function Ga(t){return t[1]}function Xa(){return 1}var fa=11102230246251565e-32,E=134217729,Va=(3+8*fa)*fa;function Wa(t,n,e,r,i){var o,a,u,c,f=n[0],l=r[0],s=0,h=0,d=(f<l==-f<l?(o=f,f=n[++s]):(o=l,l=r[++h]),0);if(s<t&&h<e)for(f<l==-f<l?(u=o-((a=f+o)-f),f=n[++s]):(u=o-((a=l+o)-l),l=r[++h]),o=a,0!==u&&(i[d++]=u);s<t&&h<e;)f<l==-f<l?(u=o-((a=o+f)-(c=a-o))+(f-c),f=n[++s]):(u=o-((a=o+l)-(c=a-o))+(l-c),l=r[++h]),o=a,0!==u&&(i[d++]=u);for(;s<t;)u=o-((a=o+f)-(c=a-o))+(f-c),f=n[++s],o=a,0!==u&&(i[d++]=u);for(;h<e;)u=o-((a=o+l)-(c=a-o))+(l-c),l=r[++h],o=a,0!==u&&(i[d++]=u);return 0===o&&0!==d||(i[d++]=o),d}function Za(t){return new Float64Array(t)}var Ka=(2+12*fa)*fa,Qa=(9+64*fa)*fa*fa,$a=Za(4),Ja=Za(8),tu=Za(12),nu=Za(16),N=Za(4);function eu(t,n,e,r,i,o,a){var u,c,f,l,s,h,d,p,v,y,g=t-i,_=e-i,b=n-o,m=r-o,x=g*m,w=E*g,M=w-(w-g),k=g-M,T=($a[0]=(d=k*(f=m-(c=(w=E*m)-(w-m)))-(x-M*c-k*c-M*f))-((l=d-(v=(k=b-(M=(w=E*b)-(w-b)))*(f=_-(c=(w=E*_)-(w-_)))-((p=b*_)-M*c-k*c-M*f)))+(u=d-l))+(u-v),$a[1]=(h=x-((s=x+l)-(u=s-x))+(l-u))-((l=h-p)+(u=h-l))+(u-p),$a[2]=s-((y=s+l)-(u=y-s))+(l-u),$a[3]=y,((t,n)=>{for(var e=n[0],r=1;r<t;r++)e+=n[r];return e})(4,$a)),A=Ka*a;if(A<=T||A<=-T)return T;if(t=t-(g+(u=t-g))+(u-i),e=e-(_+(u=e-_))+(u-i),i=n-(b+(u=n-b))+(u-o),n=r-(m+(u=r-m))+(u-o),0==t&&0==i&&0==e&&0==n)return T;if((A=Qa*a+Va*Math.abs(T))<=(T+=g*n+m*t-(b*e+_*i))||A<=-T)return T;N[0]=(d=(k=t-(M=(w=E*t)-(w-t)))*(f=m-(c=(w=E*m)-(w-m)))-((x=t*m)-M*c-k*c-M*f))-((l=d-(v=(k=i-(M=(w=E*i)-(w-i)))*(f=_-(c=(w=E*_)-(w-_)))-((p=i*_)-M*c-k*c-M*f)))+(u=d-l))+(u-v),N[1]=(h=x-((s=x+l)-(u=s-x))+(l-u))-((l=h-p)+(u=h-l))+(u-p),N[2]=s-((y=s+l)-(u=y-s))+(l-u),N[3]=y;r=Wa(4,$a,4,N,Ja),N[0]=(d=(k=g-(M=(w=E*g)-(w-g)))*(f=n-(c=(w=E*n)-(w-n)))-((x=g*n)-M*c-k*c-M*f))-((l=d-(v=(k=b-(M=(w=E*b)-(w-b)))*(f=e-(c=(w=E*e)-(w-e)))-((p=b*e)-M*c-k*c-M*f)))+(u=d-l))+(u-v),N[1]=(h=x-((s=x+l)-(u=s-x))+(l-u))-((l=h-p)+(u=h-l))+(u-p),N[2]=s-((y=s+l)-(u=y-s))+(l-u),N[3]=y,o=Wa(r,Ja,4,N,tu),N[0]=(d=(k=t-(M=(w=E*t)-(w-t)))*(f=n-(c=(w=E*n)-(w-n)))-((x=t*n)-M*c-k*c-M*f))-((l=d-(v=(k=i-(M=(w=E*i)-(w-i)))*(f=e-(c=(w=E*e)-(w-e)))-((p=i*e)-M*c-k*c-M*f)))+(u=d-l))+(u-v),N[1]=(h=x-((s=x+l)-(u=s-x))+(l-u))-((l=h-p)+(u=h-l))+(u-p),N[2]=s-((y=s+l)-(u=y-s))+(l-u),N[3]=y,a=Wa(o,tu,4,N,nu);return nu[a-1]}function ru(t,n,e,r,i,o){var a=(n-o)*(e-i),u=(t-i)*(r-o),c=a-u,a=Math.abs(a+u);return Math.abs(c)>=33306690738754716e-32*a?c:-eu(t,n,e,r,i,o,a)}var iu=Math.pow(2,-52),ou=new Uint32Array(512),au=(()=>{function u(t){_classCallCheck(this,u);var n=t.length>>1;if(0<n&&"number"!=typeof t[0])throw new Error("Expected coords to contain numbers.");this.coords=t;t=Math.max(2*n-5,0);this._triangles=new Uint32Array(3*t),this._halfedges=new Int32Array(3*t),this._hashSize=Math.ceil(Math.sqrt(n)),this._hullPrev=new Uint32Array(n),this._hullNext=new Uint32Array(n),this._hullTri=new Uint32Array(n),this._hullHash=new Int32Array(this._hashSize),this._ids=new Uint32Array(n),this._dists=new Float64Array(n),this.update()}return _createClass(u,[{key:"update",value:function(){for(var t=this.coords,n=this._hullPrev,e=this._hullNext,r=this._hullTri,i=this._hullHash,o=t.length>>1,z=1/0,R=1/0,H=-1/0,D=-1/0,a=0;a<o;a++){var L=t[2*a],q=t[2*a+1];L<z&&(z=L),q<R&&(R=q),H<L&&(H=L),D<q&&(D=q),this._ids[a]=a}for(var u,U=(z+H)/2,B=(R+D)/2,c=0,Y=1/0;c<o;c++){var G=uu(U,B,t[2*c],t[2*c+1]);G<Y&&(u=c,Y=G)}for(var X,f=t[2*u],l=t[2*u+1],s=0,V=1/0;s<o;s++)s!==u&&(X=uu(f,l,t[2*s],t[2*s+1]))<V&&0<X&&(w=s,V=X);for(var h,d,p,v,y,W,Z,g=t[2*w],_=t[2*w+1],K=1/0,b=0;b<o;b++)b!==u&&b!==w&&(h=f,d=l,p=g,v=_,y=t[2*b],W=t[2*b+1],Z=void 0,p-=h,y-=h,(h=(h=((h=W-d)*(W=p*p+(v-=d)*v)-v*(d=y*y+h*h))*(Z=.5/(p*h-v*y)))*h+(v=(p*d-y*W)*Z)*v)<K)&&(M=b,K=h);var m=t[2*M],x=t[2*M+1];if(K===1/0){for(var Q=0;Q<o;Q++)this._dists[Q]=t[2*Q]-t[0]||t[2*Q+1]-t[1];cu(this._ids,this._dists,0,o-1);for(var $=new Uint32Array(o),J=0,tt=0,nt=-1/0;tt<o;tt++){var et=this._ids[tt],rt=this._dists[et];nt<rt&&($[J++]=et,nt=rt)}this.hull=$.subarray(0,J),this.triangles=new Uint32Array(0),this.halfedges=new Uint32Array(0)}else{ru(f,l,g,_,m,x)<0&&(k=w,T=g,A=_,w=M,g=m,_=x,M=k,m=T,x=A),k=g,T=_,A=m,S=x;var w,M,k,T,A,it,ot,S,at={x:f+((S-=l)*(it=(k-=f)*k+(T-=l)*T)-T*(ot=(A-=f)*A+S*S))*(S=.5/(k*S-T*A)),y:l+(k*ot-A*it)*S};this._cx=at.x,this._cy=at.y;for(var ut=0;ut<o;ut++)this._dists[ut]=uu(t[2*ut],t[2*ut+1],at.x,at.y);cu(this._ids,this._dists,0,o-1);var ct=3;e[this._hullStart=u]=n[M]=w,e[w]=n[u]=M,r[e[M]=n[w]=u]=0,r[w]=1,r[M]=2,i.fill(-1),i[this._hashKey(f,l)]=u,i[this._hashKey(g,_)]=w,i[this._hashKey(m,x)]=M,this.trianglesLen=0,this._addTriangle(u,w,M,-1,-1,-1);for(var ft,lt,st=0;st<this._ids.length;st++){var E=this._ids[st],N=t[2*E],O=t[2*E+1];if(!(0<st&&Math.abs(N-ft)<=iu&&Math.abs(O-lt)<=iu)&&(ft=N,lt=O,E!==u&&E!==w&&E!==M)){for(var C=0,ht=0,dt=this._hashKey(N,O);ht<this._hashSize&&(-1===(C=i[(dt+ht)%this._hashSize])||C===e[C]);ht++);for(var P=C=n[C],I=void 0;I=e[P],0<=ru(N,O,t[2*P],t[2*P+1],t[2*I],t[2*I+1]);)if((P=I)===C){P=-1;break}if(-1!==P){for(var F=this._addTriangle(P,E,e[P],-1,-1,r[P]),j=(r[E]=this._legalize(F+2),r[P]=F,ct++,e[P]);I=e[j],ru(N,O,t[2*j],t[2*j+1],t[2*I],t[2*I+1])<0;)F=this._addTriangle(j,E,I,r[E],-1,r[j]),r[E]=this._legalize(F+2),e[j]=j,ct--,j=I;if(P===C)for(;ru(N,O,t[2*(I=n[P])],t[2*I+1],t[2*P],t[2*P+1])<0;)F=this._addTriangle(I,E,P,-1,r[P],r[I]),this._legalize(F+2),r[I]=F,e[P]=P,ct--,P=I;e[this._hullStart=n[E]=P]=n[j]=E,e[E]=j,i[this._hashKey(N,O)]=E,i[this._hashKey(t[2*P],t[2*P+1])]=P}}}this.hull=new Uint32Array(ct);for(var pt=0,vt=this._hullStart;pt<ct;pt++)vt=e[this.hull[pt]=vt];this.triangles=this._triangles.subarray(0,this.trianglesLen),this.halfedges=this._halfedges.subarray(0,this.trianglesLen)}}},{key:"_hashKey",value:function(t,n){return Math.floor(((t,n)=>(t/=Math.abs(t)+Math.abs(n),(0<n?3-t:1+t)/4))(t-this._cx,n-this._cy)*this._hashSize)%this._hashSize}},{key:"_legalize",value:function(t){for(var n=this._triangles,e=this._halfedges,r=this.coords,i=0,o=0;;){var a=e[t],u=t-t%3,o=u+(t+2)%3;if(-1===a){if(0===i)break;t=ou[--i]}else{var c=a-a%3,f=c+(a+2)%3,l=n[o],s=n[t],u=n[u+(t+1)%3],h=n[f];if(((t,n,e,r,i,o,a,u)=>(n-=u,e-=a,(t-=a)*((r-=u)*(u=(i-=a)*i+(a=o-u)*a)-(o=e*e+r*r)*a)-n*(e*u-o*i)+(t*t+n*n)*(e*a-r*i)<0))(r[2*l],r[2*l+1],r[2*s],r[2*s+1],r[2*u],r[2*u+1],r[2*h],r[2*h+1])){n[t]=h,n[a]=l;s=e[f];if(-1===s){var d=this._hullStart;do{if(this._hullTri[d]===f){this._hullTri[d]=t;break}}while((d=this._hullPrev[d])!==this._hullStart)}this._link(t,s),this._link(a,e[o]),this._link(o,f),i<ou.length&&(ou[i++]=c+(a+1)%3)}else{if(0===i)break;t=ou[--i]}}}return o}},{key:"_link",value:function(t,n){-1!==(this._halfedges[t]=n)&&(this._halfedges[n]=t)}},{key:"_addTriangle",value:function(t,n,e,r,i,o){var a=this.trianglesLen;return this._triangles[a]=t,this._triangles[a+1]=n,this._triangles[a+2]=e,this._link(a,r),this._link(a+1,i),this._link(a+2,o),this.trianglesLen+=3,a}}],[{key:"from",value:function(t){for(var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:lu,e=2<arguments.length&&void 0!==arguments[2]?arguments[2]:su,r=t.length,i=new Float64Array(2*r),o=0;o<r;o++){var a=t[o];i[2*o]=n(a),i[2*o+1]=e(a)}return new u(i)}}])})();function uu(t,n,e,r){t-=e,e=n-r;return t*t+e*e}function cu(t,n,e,r){if(r-e<=20)for(var i=e+1;i<=r;i++){for(var o=t[i],a=n[o],u=i-1;e<=u&&n[t[u]]>a;)t[u+1]=t[u--];t[u+1]=o}else{for(var c=e+1,f=r,l=(fu(t,e+r>>1,c),n[t[e]]>n[t[r]]&&fu(t,e,r),n[t[r]]<n[t[c]]&&fu(t,c,r),n[t[c]]<n[t[e]]&&fu(t,e,c),t[c]),s=n[l];;){for(;n[t[++c]]<s;);for(;n[t[--f]]>s;);if(f<c)break;fu(t,c,f)}t[e+1]=t[f],t[f]=l,f-e<=r-c+1?(cu(t,n,c,r),cu(t,n,e,f-1)):(cu(t,n,e,f-1),cu(t,n,c,r))}}function fu(t,n,e){var r=t[n];t[n]=t[e],t[e]=r}function lu(t){return t[0]}function su(t){return t[1]}var hu=(()=>_createClass(function t(){_classCallCheck(this,t),this._x0=this._y0=this._x1=this._y1=null,this._=""},[{key:"moveTo",value:function(t,n){this._+="M".concat(this._x0=this._x1=+t,",").concat(this._y0=this._y1=+n)}},{key:"closePath",value:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")}},{key:"lineTo",value:function(t,n){this._+="L".concat(this._x1=+t,",").concat(this._y1=+n)}},{key:"arc",value:function(t,n,e){var r=(t=+t)+(e=+e),i=n=+n;if(e<0)throw new Error("negative radius");null===this._x1?this._+="M".concat(r,",").concat(i):(1e-6<Math.abs(this._x1-r)||1e-6<Math.abs(this._y1-i))&&(this._+="L"+r+","+i),e&&(this._+="A".concat(e,",").concat(e,",0,1,1,").concat(t-e,",").concat(n,"A").concat(e,",").concat(e,",0,1,1,").concat(this._x1=r,",").concat(this._y1=i))}},{key:"rect",value:function(t,n,e,r){this._+="M".concat(this._x0=this._x1=+t,",").concat(this._y0=this._y1=+n,"h").concat(+e,"v").concat(+r,"h").concat(-e,"Z")}},{key:"value",value:function(){return this._||null}}]))(),du=(()=>_createClass(function t(){_classCallCheck(this,t),this._=[]},[{key:"moveTo",value:function(t,n){this._.push([t,n])}},{key:"closePath",value:function(){this._.push(this._[0].slice())}},{key:"lineTo",value:function(t,n){this._.push([t,n])}},{key:"value",value:function(){return this._.length?this._:null}}]))(),pu=(()=>_createClass(function t(n){var e=_slicedToArray(1<arguments.length&&void 0!==arguments[1]?arguments[1]:[0,0,960,500],4),r=e[0],i=e[1],o=e[2],e=e[3];if(_classCallCheck(this,t),!((o=+o)>=(r=+r)&&(e=+e)>=(i=+i)))throw new Error("invalid bounds");this.delaunay=n,this._circumcenters=new Float64Array(2*n.points.length),this.vectors=new Float64Array(2*n.points.length),this.xmax=o,this.xmin=r,this.ymax=e,this.ymin=i,this._init()},[{key:"update",value:function(){return this.delaunay.update(),this._init(),this}},{key:"_init",value:function(){for(var t,n=this.delaunay,e=n.points,r=n.hull,i=n.triangles,o=this.vectors,a=this.circumcenters=this._circumcenters.subarray(0,i.length/3*2),u=0,c=0,f=i.length;u<f;u+=3,c+=2){var l=2*i[u],s=2*i[u+1],h=2*i[u+2],d=e[l],l=e[1+l],p=e[s],s=e[1+s],v=e[h],h=e[1+h],p=p-d,s=s-l,y=v-d,g=h-l,_=2*(p*g-s*y);if(Math.abs(_)<1e-9){if(void 0===m){var b,m=t=0,x=_createForOfIteratorHelper(r);try{for(x.s();!(b=x.n()).done;){var w=b.value;m+=e[2*w],t+=e[2*w+1]}}catch(t){x.e(t)}finally{x.f()}m/=r.length,t/=r.length}var M=1e9*Math.sign((m-d)*g-(t-l)*y),k=(d+v)/2-M*g,M=(l+h)/2+M*y}else{v=1/_,h=p*p+s*s,_=y*y+g*g;k=d+(g*h-s*_)*v,M=l+(p*_-y*h)*v}a[c]=k,a[c+1]=M}var T,A,S,E=r[r.length-1],N=4*E,O=e[2*E],C=e[2*E+1];o.fill(0);for(var P=0;P<r.length;++P)T=N,A=O,S=C,O=e[2*(E=r[P])],C=e[2*E+1],o[T+2]=o[N=4*E]=S-C,o[T+3]=o[N+1]=O-A}},{key:"render",value:function(t){var n=null==t?t=new hu:void 0,e=this.delaunay,r=e.halfedges,i=e.inedges,o=e.hull,a=this.circumcenters,u=this.vectors;if(o.length<=1)return null;for(var c=0,f=r.length;c<f;++c){var l,s,h,d=r[c];d<c||(s=2*Math.floor(c/3),d=2*Math.floor(d/3),l=a[s],s=a[1+s],h=a[d],d=a[1+d],this._renderSegment(l,s,h,d,t))}for(var p=o[o.length-1],v=0;v<o.length;++v){var y=p,p=o[v],g=2*Math.floor(i[p]/3),_=a[g],g=a[1+g],y=4*y,y=this._project(_,g,u[2+y],u[3+y]);y&&this._renderSegment(_,g,y[0],y[1],t)}return n&&n.value()}},{key:"renderBounds",value:function(t){var n=null==t?t=new hu:void 0;return t.rect(this.xmin,this.ymin,this.xmax-this.xmin,this.ymax-this.ymin),n&&n.value()}},{key:"renderCell",value:function(t,n){var e=null==n?n=new hu:void 0,r=this._clip(t);if(null!==r&&r.length){n.moveTo(r[0],r[1]);for(var i=r.length;r[0]===r[i-2]&&r[1]===r[i-1]&&1<i;)i-=2;for(var o=2;o<i;o+=2)r[o]===r[o-2]&&r[o+1]===r[o-1]||n.lineTo(r[o],r[o+1]);return n.closePath(),e&&e.value()}}},{key:"cellPolygons",value:_regeneratorRuntime().mark(function t(){var n,e,r;return _regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:e=this.delaunay.points,n=0,e=e.length/2;case 2:if(n<e){if(r=this.cellPolygon(n))return r.index=n,t.next=8,r;t.next=8}else t.next=11;break;case 8:++n,t.next=2;break;case 11:case"end":return t.stop()}},t,this)})},{key:"cellPolygon",value:function(t){var n=new du;return this.renderCell(t,n),n.value()}},{key:"_renderSegment",value:function(t,n,e,r,i){var o=this._regioncode(t,n),a=this._regioncode(e,r);0===o&&0===a?(i.moveTo(t,n),i.lineTo(e,r)):(t=this._clipSegment(t,n,e,r,o,a))&&(i.moveTo(t[0],t[1]),i.lineTo(t[2],t[3]))}},{key:"contains",value:function(t,n,e){return(n=+n)==n&&(e=+e)==e&&this.delaunay._step(t,n,e)===t}},{key:"neighbors",value:_regeneratorRuntime().mark(function t(n){var e,r,i,o,a,u,c,f,l;return _regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!(e=this._clip(n))){t.next=33;break}r=_createForOfIteratorHelper(this.delaunay.neighbors(n)),t.prev=3,r.s();case 5:if((i=r.n()).done){t.next=25;break}if(o=i.value,!(a=this._clip(o))){t.next=23;break}u=0,c=e.length;case 10:if(!(u<c)){t.next=23;break}f=0,l=a.length;case 12:if(f<l){if(e[u]===a[f]&&e[u+1]===a[f+1]&&e[(u+2)%c]===a[(f+l-2)%l]&&e[(u+3)%c]===a[(f+l-1)%l])return t.next=16,o;t.next=17}else t.next=20;break;case 16:return t.abrupt("break",23);case 17:f+=2,t.next=12;break;case 20:u+=2,t.next=10;break;case 23:t.next=5;break;case 25:t.next=30;break;case 27:t.prev=27,t.t0=t.catch(3),r.e(t.t0);case 30:return t.prev=30,r.f(),t.finish(30);case 33:case"end":return t.stop()}},t,this,[[3,27,30,33]])})},{key:"_cell",value:function(t){var n=this.circumcenters,e=this.delaunay,r=e.inedges,i=e.halfedges,o=e.triangles,a=r[t];if(-1===a)return null;var u=[],c=a;do{var f=Math.floor(c/3)}while((u.push(n[2*f],n[2*f+1]),o[c=c%3==2?c-2:c+1]===t)&&((c=i[c])!==a&&-1!==c));return u}},{key:"_clip",value:function(t){var n,e,r;return 0===t&&1===this.delaunay.hull.length?[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin]:null===(n=this._cell(t))?null:(e=this.vectors,this._simplify(e[r=4*t]||e[1+r]?this._clipInfinite(t,n,e[r],e[1+r],e[2+r],e[3+r]):this._clipFinite(t,n)))}},{key:"_clipFinite",value:function(t,n){for(var e,r,i,o,a=n.length,u=null,c=n[a-2],f=n[a-1],l=this._regioncode(c,f),s=0,h=0;h<a;h+=2)if(e=c,r=f,c=n[h],i=l,l=this._regioncode(c,f=n[h+1]),0===i&&0===l)o=s,s=0,u?u.push(c,f):u=[c,f];else{var d=void 0,p=void 0,v=void 0,y=void 0,g=void 0;if(0===i){if(null===(d=this._clipSegment(e,r,c,f,i,l)))continue;var _=_slicedToArray(d,4),p=_[0],v=_[1],y=_[2],g=_[3]}else{if(null===(d=this._clipSegment(c,f,e,r,l,i)))continue;_=_slicedToArray(d,4);y=_[0],g=_[1],o=s,s=this._edgecode(p=_[2],v=_[3]),o&&s&&this._edge(t,o,s,u,u.length),u?u.push(p,v):u=[p,v]}o=s,s=this._edgecode(y,g),o&&s&&this._edge(t,o,s,u,u.length),u?u.push(y,g):u=[y,g]}if(u)o=s,s=this._edgecode(u[0],u[1]),o&&s&&this._edge(t,o,s,u,u.length);else if(this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2))return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];return u}},{key:"_clipSegment",value:function(t,n,e,r,i,o){var a,u=i<o;for(u&&(t=(a=[e,r,t,n,o,i])[0],n=a[1],e=a[2],r=a[3],i=a[4],o=a[5]);;){if(0===i&&0===o)return u?[e,r,t,n]:[t,n,e,r];if(i&o)return null;var c=void 0,f=void 0,l=i||o;8&l?(c=t+(e-t)*(this.ymax-n)/(r-n),f=this.ymax):4&l?(c=t+(e-t)*(this.ymin-n)/(r-n),f=this.ymin):c=2&l?(f=n+(r-n)*(this.xmax-t)/(e-t),this.xmax):(f=n+(r-n)*(this.xmin-t)/(e-t),this.xmin),i?(t=c,n=f,i=this._regioncode(t,n)):(e=c,r=f,o=this._regioncode(e,r))}}},{key:"_clipInfinite",value:function(t,n,e,r,i,o){var a=Array.from(n);if((n=this._project(a[0],a[1],e,r))&&a.unshift(n[0],n[1]),(n=this._project(a[a.length-2],a[a.length-1],i,o))&&a.push(n[0],n[1]),a=this._clipFinite(t,a))for(var u,c=0,f=a.length,l=this._edgecode(a[f-2],a[f-1]);c<f;c+=2)u=l,l=this._edgecode(a[c],a[c+1]),u&&l&&(c=this._edge(t,u,l,a,c),f=a.length);else this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2)&&(a=[this.xmin,this.ymin,this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax]);return a}},{key:"_edge",value:function(t,n,e,r,i){for(;n!==e;){var o=void 0,a=void 0;switch(n){case 5:n=4;continue;case 4:n=6,o=this.xmax,a=this.ymin;break;case 6:n=2;continue;case 2:n=10,o=this.xmax,a=this.ymax;break;case 10:n=8;continue;case 8:n=9,o=this.xmin,a=this.ymax;break;case 9:n=1;continue;case 1:n=5,o=this.xmin,a=this.ymin}r[i]===o&&r[i+1]===a||!this.contains(t,o,a)||(r.splice(i,0,o,a),i+=2)}return i}},{key:"_project",value:function(t,n,e,r){var i,o,a,u=1/0;if(r<0){if(n<=this.ymin)return null;(i=(this.ymin-n)/r)<u&&(a=this.ymin,o=t+(u=i)*e)}else if(0<r){if(n>=this.ymax)return null;(i=(this.ymax-n)/r)<u&&(a=this.ymax,o=t+(u=i)*e)}if(0<e){if(t>=this.xmax)return null;(i=(this.xmax-t)/e)<u&&(o=this.xmax,a=n+(u=i)*r)}else if(e<0){if(t<=this.xmin)return null;(i=(this.xmin-t)/e)<u&&(o=this.xmin,a=n+(u=i)*r)}return[o,a]}},{key:"_edgecode",value:function(t,n){return(t===this.xmin?1:t===this.xmax?2:0)|(n===this.ymin?4:n===this.ymax?8:0)}},{key:"_regioncode",value:function(t,n){return(t<this.xmin?1:t>this.xmax?2:0)|(n<this.ymin?4:n>this.ymax?8:0)}},{key:"_simplify",value:function(t){if(t&&4<t.length){for(var n=0;n<t.length;n+=2){var e=(n+2)%t.length,r=(n+4)%t.length;(t[n]===t[e]&&t[e]===t[r]||t[n+1]===t[1+e]&&t[1+e]===t[1+r])&&(t.splice(e,2),n-=2)}t.length||(t=null)}return t}}]))(),vu=2*Math.PI,yu=Math.pow;function gu(t){return t[0]}function _u(t){return t[1]}fa=(()=>{function i(t){_classCallCheck(this,i),this._delaunator=new au(t),this.inedges=new Int32Array(t.length/2),this._hullIndex=new Int32Array(t.length/2),this.points=this._delaunator.coords,this._init()}return _createClass(i,[{key:"update",value:function(){return this._delaunator.update(),this._init(),this}},{key:"_init",value:function(){var t,n,e=this._delaunator,r=this.points;if(e.hull&&2<e.hull.length&&(t=>{for(var n=t.triangles,e=t.coords,r=0;r<n.length;r+=3){var i=2*n[r],o=2*n[r+1],a=2*n[r+2];if(1e-10<(e[a]-e[i])*(e[1+o]-e[1+i])-(e[o]-e[i])*(e[1+a]-e[1+i]))return}return 1})(e)){this.collinear=Int32Array.from({length:r.length/2},function(t,n){return n}).sort(function(t,n){return r[2*t]-r[2*n]||r[2*t+1]-r[2*n+1]});for(var e=this.collinear[0],i=this.collinear[this.collinear.length-1],e=[r[2*e],r[2*e+1],r[2*i],r[2*i+1]],o=1e-8*Math.hypot(e[3]-e[1],e[2]-e[0]),a=0,u=r.length/2;a<u;++a){c=r[2*a],t=r[2*a+1],n=o;var c=[c+Math.sin(c+t)*n,t+Math.cos(c-t)*n];r[2*a]=c[0],r[2*a+1]=c[1]}this._delaunator=new au(r)}else delete this.collinear;for(var f=this.halfedges=this._delaunator.halfedges,l=this.hull=this._delaunator.hull,s=this.triangles=this._delaunator.triangles,h=this.inedges.fill(-1),d=this._hullIndex.fill(-1),p=0,v=f.length;p<v;++p){var y=s[p%3==2?p-2:p+1];-1!==f[p]&&-1!==h[y]||(h[y]=p)}for(var g=0,_=l.length;g<_;++g)d[l[g]]=g;l.length<=2&&0<l.length&&(this.triangles=new Int32Array(3).fill(-1),this.halfedges=new Int32Array(3).fill(-1),this.triangles[0]=l[0],h[l[0]]=1,2===l.length)&&(h[l[1]]=0,this.triangles[1]=l[1],this.triangles[2]=l[1])}},{key:"voronoi",value:function(t){return new pu(this,t)}},{key:"neighbors",value:_regeneratorRuntime().mark(function t(n){var e,r,i,o,a,u,c,f,l,s,h;return _regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(e=this.inedges,r=this.hull,i=this._hullIndex,o=this.halfedges,a=this.triangles,u=this.collinear){if(0<(c=u.indexOf(n)))return t.next=6,u[c-1];t.next=6}else t.next=10;break;case 6:if(c<u.length-1)return t.next=9,u[c+1];t.next=9;break;case 9:return t.abrupt("return");case 10:if(-1===(f=e[n]))return t.abrupt("return");t.next=13;break;case 13:l=f,s=-1;case 14:return t.next=16,s=a[l];case 16:if(a[l=l%3==2?l-2:l+1]!==n)return t.abrupt("return");t.next=19;break;case 19:if(-1!==(l=o[l]))t.next=26;else{if((h=r[(i[n]+1)%r.length])!==s)return t.next=25,h;t.next=25}break;case 25:return t.abrupt("return");case 26:if(l!==f){t.next=14;break}case 27:case"end":return t.stop()}},t,this)})},{key:"find",value:function(t,n){var e=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;if((t=+t)!=t||(n=+n)!=n)return-1;for(var r,i=e;0<=(r=this._step(e,t,n))&&r!==e&&r!==i;)e=r;return r}},{key:"_step",value:function(t,n,e){var r=this.inedges,i=this.hull,o=this._hullIndex,a=this.halfedges,u=this.triangles,c=this.points;if(-1===r[t]||!c.length)return(t+1)%(c.length>>1);var f=t,l=yu(n-c[2*t],2)+yu(e-c[2*t+1],2),s=r[t],h=s;do{var d=u[h],p=yu(n-c[2*d],2)+yu(e-c[2*d+1],2);if(p<l&&(l=p,f=d),u[h=h%3==2?h-2:h+1]!==t)break;if(-1===(h=a[h])){if((h=i[(o[t]+1)%i.length])!==d&&yu(n-c[2*h],2)+yu(e-c[2*h+1],2)<l)return h;break}}while(h!==s);return f}},{key:"render",value:function(t){for(var n=null==t?t=new hu:void 0,e=this.points,r=this.halfedges,i=this.triangles,o=0,a=r.length;o<a;++o){var u,c=r[o];c<o||(u=2*i[o],c=2*i[c],t.moveTo(e[u],e[1+u]),t.lineTo(e[c],e[1+c]))}return this.renderHull(t),n&&n.value()}},{key:"renderPoints",value:function(t,n){void 0!==n||t&&"function"==typeof t.moveTo||(n=t,t=null),n=null==n?2:+n;for(var e=null==t?t=new hu:void 0,r=this.points,i=0,o=r.length;i<o;i+=2){var a=r[i],u=r[i+1];t.moveTo(a+n,u),t.arc(a,u,n,0,vu)}return e&&e.value()}},{key:"renderHull",value:function(t){var n=null==t?t=new hu:void 0,e=this.hull,r=this.points,i=2*e[0],o=e.length;t.moveTo(r[i],r[1+i]);for(var a=1;a<o;++a){var u=2*e[a];t.lineTo(r[u],r[1+u])}return t.closePath(),n&&n.value()}},{key:"hullPolygon",value:function(){var t=new du;return this.renderHull(t),t.value()}},{key:"renderTriangle",value:function(t,n){var e=null==n?n=new hu:void 0,r=this.points,i=this.triangles,o=2*i[t*=3],a=2*i[t+1],i=2*i[t+2];return n.moveTo(r[o],r[1+o]),n.lineTo(r[a],r[1+a]),n.lineTo(r[i],r[1+i]),n.closePath(),e&&e.value()}},{key:"trianglePolygons",value:_regeneratorRuntime().mark(function t(){var n,e;return _regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:e=this.triangles,n=0,e=e.length/3;case 2:if(n<e)return t.next=5,this.trianglePolygon(n);t.next=8;break;case 5:++n,t.next=2;break;case 8:case"end":return t.stop()}},t,this)})},{key:"trianglePolygon",value:function(t){var n=new du;return this.renderTriangle(t,n),n.value()}}],[{key:"from",value:function(t){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:gu,e=2<arguments.length&&void 0!==arguments[2]?arguments[2]:_u,r=3<arguments.length?arguments[3]:void 0;return new i("length"in t?((t,n,e,r)=>{for(var i=t.length,o=new Float64Array(2*i),a=0;a<i;++a){var u=t[a];o[2*a]=n.call(r,u,a,t),o[2*a+1]=e.call(r,u,a,t)}return o})(t,n,e,r):Float64Array.from(bu(t,n,e,r)))}}])})();function bu(n,e,r,i){var o,a,u,c;return _regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:o=0,a=_createForOfIteratorHelper(n),t.prev=2,a.s();case 4:if((u=a.n()).done){t.next=13;break}return c=u.value,t.next=8,e.call(i,c,o,n);case 8:return t.next=10,r.call(i,c,o,n);case 10:++o;case 11:t.next=4;break;case 13:t.next=18;break;case 15:t.prev=15,t.t0=t.catch(2),a.e(t.t0);case 18:return t.prev=18,a.f(),t.finish(18);case 21:case"end":return t.stop()}},m,null,[[2,15,18,21]])}var mu={},xu={};function wu(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'}).join(",")+"}")}function Mu(t){var e=Object.create(null),r=[];return t.forEach(function(t){for(var n in t)n in e||r.push(e[n]=n)}),r}function ku(t,n){var t=t+"",e=t.length;return e<n?new Array(n-e+1).join(0)+t:t}function Tu(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+ku(-n,6):9999<n?"+"+ku(n,6):ku(n,4))+"-"+ku(t.getUTCMonth()+1,2)+"-"+ku(t.getUTCDate(),2)+(o?"T"+ku(e,2)+":"+ku(r,2)+":"+ku(i,2)+"."+ku(o,3)+"Z":i?"T"+ku(e,2)+":"+ku(r,2)+":"+ku(i,2)+"Z":r||e?"T"+ku(e,2)+":"+ku(r,2)+"Z":"")}function Au(r){var n=new RegExp('["'+r+"\n\r]"),s=r.charCodeAt(0);function e(r,t){var n,e=[],i=r.length,o=0,a=0,u=i<=0,c=!1;function f(){if(u)return xu;if(c)return c=!1,mu;var t,n,e=o;if(34===r.charCodeAt(e)){for(;o++<i&&34!==r.charCodeAt(o)||34===r.charCodeAt(++o););return(t=o)>=i?u=!0:10===(n=r.charCodeAt(o++))?c=!0:13===n&&(c=!0,10===r.charCodeAt(o))&&++o,r.slice(e+1,t-1).replace(/""/g,'"')}for(;o<i;){if(10===(n=r.charCodeAt(t=o++)))c=!0;else if(13===n)c=!0,10===r.charCodeAt(o)&&++o;else if(n!==s)continue;return r.slice(e,t)}return u=!0,r.slice(e,i)}for(10===r.charCodeAt(i-1)&&--i,13===r.charCodeAt(i-1)&&--i;(n=f())!==xu;){for(var l=[];n!==mu&&n!==xu;)l.push(n),n=f();t&&null==(l=t(l,a++))||e.push(l)}return e}function i(t,e){return t.map(function(n){return e.map(function(t){return a(n[t])}).join(r)})}function o(t){return t.map(a).join(r)}function a(t){return null==t?"":t instanceof Date?Tu(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,o){var a,u;return(t=e(t,function(t,n){if(a)return a(t,n-1);var e,r,i;u=t,a=o?(r=o,i=wu(e=t),function(t,n){return r(i(t),n,e)}):wu(t)})).columns=u||[],t},parseRows:e,format:function(t,n){return[(n=null==n?Mu(t):n).map(a).join(r)].concat(i(t,n)).join("\n")},formatBody:function(t,n){return i(t,n=null==n?Mu(t):n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}}var Su=Au(","),Eu=Su.parse,Nu=Su.parseRows,Ou=Su.format,Cu=Su.formatBody,Pu=Su.formatRows,Iu=Su.formatRow,Su=Su.formatValue,Fu=Au("\t"),ju=Fu.parse,zu=Fu.parseRows,Ru=Fu.format,Hu=Fu.formatBody,Du=Fu.formatRows,Lu=Fu.formatRow,Fu=Fu.formatValue;var qu=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours();function Uu(t){if(t.ok)return t.blob();throw new Error(t.status+" "+t.statusText)}function Bu(t){if(t.ok)return t.arrayBuffer();throw new Error(t.status+" "+t.statusText)}function Yu(t){if(t.ok)return t.text();throw new Error(t.status+" "+t.statusText)}function Gu(t,n){return fetch(t,n).then(Yu)}function Xu(r){return function(t,n,e){return 2===arguments.length&&"function"==typeof n&&(e=n,n=void 0),Gu(t,n).then(function(t){return r(t,e)})}}var Vu=Xu(Eu),Wu=Xu(ju);function Zu(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function Ku(e){return function(t,n){return Gu(t,n).then(function(t){return(new DOMParser).parseFromString(t,e)})}}var Qu=Ku("application/xml"),$u=Ku("text/html"),Ju=Ku("image/svg+xml");function tc(t,n,e,r){if(!isNaN(n)&&!isNaN(e)){var i,o,a,u,c,f,l,s,h,d=t._root,p={data:r},v=t._x0,y=t._y0,g=t._x1,_=t._y1;if(d){for(;d.length;)if((f=n>=(o=(v+g)/2))?v=o:g=o,(l=e>=(a=(y+_)/2))?y=a:_=a,!(d=(i=d)[s=l<<1|f]))return i[s]=p,t;if(u=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===u&&e===c)p.next=d,i?i[s]=p:t._root=p;else{for(;i=i?i[s]=new Array(4):t._root=new Array(4),(f=n>=(o=(v+g)/2))?v=o:g=o,(l=e>=(a=(y+_)/2))?y=a:_=a,(s=l<<1|f)==(h=(a<=c)<<1|o<=u););i[h]=d,i[s]=p}}else t._root=p}return t}function g(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i}function nc(t){return t[0]}function ec(t){return t[1]}function rc(t,n,e){n=new ic(null==n?nc:n,null==e?ec:e,NaN,NaN,NaN,NaN);return null==t?n:n.addAll(t)}function ic(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function oc(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var t=rc.prototype=ic.prototype;function y(t){return function(){return t}}function ac(t){return 1e-6*(t()-.5)}function uc(t){return t.x+t.vx}function cc(t){return t.y+t.vy}function fc(t){return t.index}function lc(t,n){t=t.get(n);if(t)return t;throw new Error("node not found: "+n)}t.copy=function(){var t,n,e=new ic(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(r)if(r.length)for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=oc(n));else e._root=oc(r);return e},t.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return tc(this.cover(n,e),n,e,t)},t.addAll=function(t){for(var n,e,r=t.length,i=new Array(r),o=new Array(r),a=1/0,u=1/0,c=-1/0,f=-1/0,l=0;l<r;++l)isNaN(n=+this._x.call(null,e=t[l]))||isNaN(e=+this._y.call(null,e))||((i[l]=n)<a&&(a=n),c<n&&(c=n),(o[l]=e)<u&&(u=e),f<e&&(f=e));if(!(c<a||f<u))for(this.cover(a,u).cover(c,f),l=0;l<r;++l)tc(this,i[l],o[l],t[l]);return this},t.cover=function(t,n){if(!isNaN(t=+t)&&!isNaN(n=+n)){var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var a,u,c=i-e||1,f=this._root;t<e||i<=t||n<r||o<=n;)switch(u=(n<r)<<1|t<e,(a=new Array(4))[u]=f,f=a,c*=2,u){case 0:i=e+c,o=r+c;break;case 1:e=i-c,o=r+c;break;case 2:i=e+c,r=o-c;break;case 3:e=i-c,r=o-c}this._root&&this._root.length&&(this._root=f)}this._x0=e,this._y0=r,this._x1=i,this._y1=o}return this},t.data=function(){var n=[];return this.visit(function(t){if(!t.length)for(;n.push(t.data),t=t.next;);}),n},t.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},t.find=function(t,n,e){var r,i,o,a,u,c,f,l,s=this._x0,h=this._y0,d=this._x1,p=this._y1,v=[],y=this._root;for(y&&v.push(new g(y,s,h,d,p)),null==e?e=1/0:(s=t-e,h=n-e,d=t+e,p=n+e,e*=e);r=v.pop();)!(y=r.node)||(u=r.x0)>d||(c=r.y0)>p||(a=r.x1)<s||(i=r.y1)<h||(y.length?(v.push(new g(y[3],o=(u+a)/2,f=(c+i)/2,a,i),new g(y[2],u,f,o,i),new g(y[1],o,c,a,f),new g(y[0],u,c,o,f)),(i=(f<=n)<<1|o<=t)&&(r=v[v.length-1],v[v.length-1]=v[v.length-1-i],v[v.length-1-i]=r)):(c=(a=t-+this._x.call(null,y.data))*a+(u=n-+this._y.call(null,y.data))*u)<e&&(s=t-(f=Math.sqrt(e=c)),h=n-f,d=t+f,p=n+f,l=y.data));return l},t.remove=function(t){if(!isNaN(o=+this._x.call(null,t))&&!isNaN(a=+this._y.call(null,t))){var n,e,r,i,o,a,u,c,f,l,s,h=this._root,d=this._x0,p=this._y0,v=this._x1,y=this._y1;if(h){if(h.length)for(;;){if((c=o>=(u=(d+v)/2))?d=u:v=u,(f=a>=(u=(p+y)/2))?p=u:y=u,!(h=(n=h)[l=f<<1|c]))return this;if(!h.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,s=l)}for(;h.data!==t;)if(!(h=(r=h).next))return this;(i=h.next)&&delete h.next,r?i?r.next=i:delete r.next:n?(i?n[l]=i:delete n[l],(h=n[0]||n[1]||n[2]||n[3])&&h===(n[3]||n[2]||n[1]||n[0])&&!h.length&&(e?e[s]=h:this._root=h)):this._root=i}}return this},t.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},t.root=function(){return this._root},t.size=function(){var n=0;return this.visit(function(t){if(!t.length)for(;++n,t=t.next;);}),n},t.visit=function(t){var n,e,r,i,o,a,u,c=[],f=this._root;for(f&&c.push(new g(f,this._x0,this._y0,this._x1,this._y1));o=c.pop();)!t(f=o.node,e=o.x0,r=o.y0,i=o.x1,o=o.y1)&&f.length&&(a=(e+i)/2,u=(r+o)/2,(n=f[3])&&c.push(new g(n,a,u,i,o)),(n=f[2])&&c.push(new g(n,e,u,a,o)),(n=f[1])&&c.push(new g(n,a,r,i,u)),n=f[0])&&c.push(new g(n,e,r,a,u));return this},t.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new g(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i,o,a,u,c,f,l,s=n.node;s.length&&(o=n.x0,a=n.y0,f=(o+(u=n.x1))/2,l=(a+(c=n.y1))/2,(i=s[0])&&e.push(new g(i,o,a,f,l)),(i=s[1])&&e.push(new g(i,f,a,u,l)),(i=s[2])&&e.push(new g(i,o,l,f,c)),i=s[3])&&e.push(new g(i,f,l,u,c)),r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},t.x=function(t){return arguments.length?(this._x=t,this):this._x},t.y=function(t){return arguments.length?(this._y=t,this):this._y};var sc=1664525,hc=1013904223,dc=4294967296;function pc(t){return t.x}function vc(t){return t.y}var yc=Math.PI*(3-Math.sqrt(5));function gc(t,n){var e;return(n=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0?null:[1<(e=t.slice(0,n)).length?e[0]+e.slice(2):e,+t.slice(n+1)]}function _c(t){return(t=gc(Math.abs(t)))?t[1]:NaN}var bc,mc=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function xc(t){var n;if(n=mc.exec(t))return new wc({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]});throw new Error("invalid format: "+t)}function wc(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Mc(t,n){var e,n=gc(t,n);return n?(e=n[0],(n=n[1])<0?"0."+new Array(-n).join("0")+e:e.length>n+1?e.slice(0,n+1)+"."+e.slice(n+1):e+new Array(n-e.length+2).join("0")):t+""}xc.prototype=wc.prototype,wc.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var kc={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return 1e21<=Math.abs(t=Math.round(t))?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Mc(100*t,n)},r:Mc,s:function(t,n){var e,r,i=gc(t,n);return i?(e=i[0],(i=(i=i[1])-(bc=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1)===(r=e.length)?e:r<i?e+new Array(i-r+1).join("0"):0<i?e.slice(0,i)+"."+e.slice(i):"0."+new Array(1-i).join("0")+gc(t,Math.max(0,n+i-1))[0]):t+""},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Tc(t){return t}var Ac,Sc=Array.prototype.map,Ec=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Nc(t){var n,u,c,w=void 0===t.grouping||void 0===t.thousands?Tc:(u=Sc.call(t.grouping,Number),c=t.thousands+"",function(t,n){for(var e=t.length,r=[],i=0,o=u[0],a=0;0<e&&0<o&&(n<a+o+1&&(o=Math.max(1,n-a)),r.push(t.substring(e-=o,e+o)),!((a+=o+1)>n));)o=u[i=(i+1)%u.length];return r.reverse().join(c)}),r=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",M=void 0===t.decimal?".":t.decimal+"",k=void 0===t.numerals?Tc:(n=Sc.call(t.numerals,String),function(t){return t.replace(/[0-9]/g,function(t){return n[+t]})}),o=void 0===t.percent?"%":t.percent+"",T=void 0===t.minus?"−":t.minus+"",A=void 0===t.nan?"NaN":t.nan+"";function a(t){var f=(t=xc(t)).fill,l=t.align,s=t.sign,n=t.symbol,h=t.zero,d=t.width,p=t.comma,v=t.precision,y=t.trim,g=t.type,_=("n"===g?(p=!0,g="g"):kc[g]||(void 0===v&&(v=12),y=!0,g="g"),(h||"0"===f&&"="===l)&&(h=!0,f="0",l="="),"$"===n?r:"#"===n&&/[boxX]/.test(g)?"0"+g.toLowerCase():""),b="$"===n?i:/[%p]/.test(g)?o:"",m=kc[g],x=/[defgprs%]/.test(g);function e(t){var n,e,r,i=_,o=b;if("c"===g)o=m(t)+o,t="";else{var a=(t=+t)<0||1/t<0;if(t=isNaN(t)?A:m(Math.abs(t),v),y&&(t=(t=>{t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;0<i&&(i=0)}return 0<i?t.slice(0,i)+t.slice(n+1):t})(t)),i=((a=a&&0==+t&&"+"!==s?!1:a)?"("===s?s:T:"-"===s||"("===s?"":s)+i,o=("s"===g?Ec[8+bc/3]:"")+o+(a&&"("===s?")":""),x)for(n=-1,e=t.length;++n<e;)if((r=t.charCodeAt(n))<48||57<r){o=(46===r?M+t.slice(n+1):t.slice(n))+o,t=t.slice(0,n);break}}p&&!h&&(t=w(t,1/0));var u=i.length+t.length+o.length,c=u<d?new Array(d-u+1).join(f):"";switch(p&&h&&(t=w(c+t,c.length?d-o.length:1/0),c=""),l){case"<":t=i+t+o+c;break;case"=":t=i+c+t+o;break;case"^":t=c.slice(0,u=c.length>>1)+i+t+o+c.slice(u);break;default:t=c+i+t+o}return k(t)}return v=void 0===v?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),e.toString=function(){return t+""},e}return{format:a,formatPrefix:function(t,n){var e=a(((t=xc(t)).type="f",t)),t=3*Math.max(-8,Math.min(8,Math.floor(_c(n)/3))),r=Math.pow(10,-t),i=Ec[8+t/3];return function(t){return e(r*t)+i}}}}function Oc(t){return Ac=Nc(t),u.format=Ac.format,u.formatPrefix=Ac.formatPrefix,Ac}function Cc(t){return Math.max(0,-_c(Math.abs(t)))}function Pc(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(_c(n)/3)))-_c(Math.abs(t)))}function Ic(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,_c(n)-_c(t))+1}u.format=void 0,u.formatPrefix=void 0,Oc({thousands:",",grouping:[3],currency:["$",""]});var O=1e-6,Fc=1e-12,C=Math.PI,P=C/2,jc=C/4,zc=2*C,I=180/C,F=C/180,j=Math.abs,Rc=Math.atan,Hc=Math.atan2,z=Math.cos,Dc=Math.ceil,Lc=Math.exp,qc=Math.hypot,Uc=Math.log,Bc=Math.pow,R=Math.sin,Yc=Math.sign||function(t){return 0<t?1:t<0?-1:0},H=Math.sqrt,Gc=Math.tan;function Xc(t){return 1<t?0:t<-1?C:Math.acos(t)}function Vc(t){return 1<t?P:t<-1?-P:Math.asin(t)}function Wc(t){return(t=R(t/2))*t}function e(){}function Zc(t,n){t&&Qc.hasOwnProperty(t.type)&&Qc[t.type](t,n)}var Kc={Feature:function(t,n){Zc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Zc(e[r].geometry,n)}},Qc={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){$c(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)$c(e[r],n,0)},Polygon:function(t,n){Jc(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Jc(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Zc(e[r],n)}};function $c(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function Jc(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)$c(t[e],n,1);n.polygonEnd()}function tf(t,n){t&&Kc.hasOwnProperty(t.type)?Kc[t.type](t,n):Zc(t,n)}var nf,ef,rf,of,af,l,uf,s,cf,ff,lf,sf,hf,df,pf,vf,yf=new S,gf=new S,_f={point:e,lineStart:e,lineEnd:e,polygonStart:function(){yf=new S,_f.lineStart=bf,_f.lineEnd=mf},polygonEnd:function(){var t=+yf;gf.add(t<0?zc+t:t),this.lineStart=this.lineEnd=this.point=e},sphere:function(){gf.add(zc)}};function bf(){_f.point=xf}function mf(){wf(nf,ef)}function xf(t,n){_f.point=wf,nf=t,ef=n,rf=t*=F,of=z(n=(n*=F)/2+jc),af=R(n)}function wf(t,n){var e=(t*=F)-rf,r=0<=e?1:-1,e=r*e,i=z(n=(n*=F)/2+jc),n=R(n),o=af*n,a=of*i+o*z(e),o=o*r*R(e);yf.add(Hc(o,a)),rf=t,of=i,af=n}function Mf(t){return[Hc(t[1],t[0]),Vc(t[2])]}function kf(t){var n=t[0],t=t[1],e=z(t);return[e*z(n),e*R(n),R(t)]}function Tf(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Af(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Sf(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Ef(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Nf(t){var n=H(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var Of,Cf,Pf,If,Ff,jf,zf,Rf,Hf,Df,Lf,qf,Uf,Bf,Yf,Gf,Xf={point:Vf,lineStart:Zf,lineEnd:Kf,polygonStart:function(){Xf.point=Qf,Xf.lineStart=$f,Xf.lineEnd=Jf,df=new S,_f.polygonStart()},polygonEnd:function(){_f.polygonEnd(),Xf.point=Vf,Xf.lineStart=Zf,Xf.lineEnd=Kf,yf<0?(l=-(s=180),uf=-(cf=90)):O<df?cf=90:df<-O&&(uf=-90),vf[0]=l,vf[1]=s},sphere:function(){l=-(s=180),uf=-(cf=90)}};function Vf(t,n){pf.push(vf=[l=t,s=t]),n<uf&&(uf=n),cf<n&&(cf=n)}function Wf(t,n){var e,r,i,o,a,u=kf([t*F,n*F]);hf?(e=Af(hf,u),Nf(e=Af([e[1],-e[0],0],e)),e=Mf(e),a=t-ff,i=e[0]*I*(r=0<a?1:-1),(a=180<j(a))^(r*ff<i&&i<r*t)?(o=e[1]*I,cf<o&&(cf=o)):a^(r*ff<(i=(360+i)%360-180)&&i<r*t)?(o=-e[1]*I)<uf&&(uf=o):(n<uf&&(uf=n),cf<n&&(cf=n)),a?t<ff?tl(l,t)>tl(l,s)&&(s=t):tl(t,s)>tl(l,s)&&(l=t):l<=s?(t<l&&(l=t),s<t&&(s=t)):ff<t?tl(l,t)>tl(l,s)&&(s=t):tl(t,s)>tl(l,s)&&(l=t)):pf.push(vf=[l=t,s=t]),n<uf&&(uf=n),cf<n&&(cf=n),hf=u,ff=t}function Zf(){Xf.point=Wf}function Kf(){vf[0]=l,vf[1]=s,Xf.point=Vf,hf=null}function Qf(t,n){var e;hf?(e=t-ff,df.add(180<j(e)?e+(0<e?360:-360):e)):(lf=t,sf=n),_f.point(t,n),Wf(t,n)}function $f(){_f.lineStart()}function Jf(){Qf(lf,sf),_f.lineEnd(),j(df)>O&&(l=-(s=180)),vf[0]=l,vf[1]=s,hf=null}function tl(t,n){return(n-=t)<0?n+360:n}function nl(t,n){return t[0]-n[0]}function el(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var rl={sphere:e,point:il,lineStart:al,lineEnd:fl,polygonStart:function(){rl.lineStart=ll,rl.lineEnd=sl},polygonEnd:function(){rl.lineStart=al,rl.lineEnd=fl}};function il(t,n){t*=F;var e=z(n*=F);ol(e*z(t),e*R(t),R(n))}function ol(t,n,e){Pf+=(t-Pf)/++Of,If+=(n-If)/Of,Ff+=(e-Ff)/Of}function al(){rl.point=ul}function ul(t,n){t*=F;var e=z(n*=F);Bf=e*z(t),Yf=e*R(t),Gf=R(n),rl.point=cl,ol(Bf,Yf,Gf)}function cl(t,n){t*=F;var e=z(n*=F),r=e*z(t),e=e*R(t),t=R(n),n=Hc(H((n=Yf*t-Gf*e)*n+(n=Gf*r-Bf*t)*n+(n=Bf*e-Yf*r)*n),Bf*r+Yf*e+Gf*t);Cf+=n,jf+=n*(Bf+(Bf=r)),zf+=n*(Yf+(Yf=e)),Rf+=n*(Gf+(Gf=t)),ol(Bf,Yf,Gf)}function fl(){rl.point=il}function ll(){rl.point=hl}function sl(){dl(qf,Uf),rl.point=il}function hl(t,n){qf=t,Uf=n,t*=F,n*=F,rl.point=dl;var e=z(n);Bf=e*z(t),Yf=e*R(t),Gf=R(n),ol(Bf,Yf,Gf)}function dl(t,n){t*=F;var e=z(n*=F),r=e*z(t),e=e*R(t),t=R(n),n=Yf*t-Gf*e,i=Gf*r-Bf*t,o=Bf*e-Yf*r,a=qc(n,i,o),u=Vc(a),a=a&&-u/a;Hf.add(a*n),Df.add(a*i),Lf.add(a*o),Cf+=u,jf+=u*(Bf+(Bf=r)),zf+=u*(Yf+(Yf=e)),Rf+=u*(Gf+(Gf=t)),ol(Bf,Yf,Gf)}function pl(t){return function(){return t}}function vl(e,r){function t(t,n){return t=e(t,n),r(t[0],t[1])}return e.invert&&r.invert&&(t.invert=function(t,n){return(t=r.invert(t,n))&&e.invert(t[0],t[1])}),t}function yl(t,n){return j(t)>C&&(t-=Math.round(t/zc)*zc),[t,n]}function gl(t,n,e){return(t%=zc)?n||e?vl(bl(t),ml(n,e)):bl(t):n||e?ml(n,e):yl}function _l(e){return function(t,n){return j(t+=e)>C&&(t-=Math.round(t/zc)*zc),[t,n]}}function bl(t){var n=_l(t);return n.invert=_l(-t),n}function ml(t,n){var i=z(t),o=R(t),a=z(n),u=R(n);function e(t,n){var e=z(n),r=z(t)*e,t=R(t)*e,e=R(n),n=e*i+r*o;return[Hc(t*a-n*u,r*i-e*o),Vc(n*a+t*u)]}return e.invert=function(t,n){var e=z(n),r=z(t)*e,t=R(t)*e,e=R(n),n=e*a-t*u;return[Hc(t*a+e*u,r*i+n*o),Vc(n*i-r*o)]},e}function xl(n){function t(t){return(t=n(t[0]*F,t[1]*F))[0]*=I,t[1]*=I,t}return n=gl(n[0]*F,n[1]*F,2<n.length?n[2]*F:0),t.invert=function(t){return(t=n.invert(t[0]*F,t[1]*F))[0]*=I,t[1]*=I,t},t}function wl(t,n,e,r,i,o){if(e){var a=z(n),u=R(n),c=r*e;null==i?(i=n+r*zc,o=n-c/2):(i=Ml(a,i),o=Ml(a,o),(0<r?i<o:o<i)&&(i+=r*zc));for(var f,l=i;0<r?o<l:l<o;l-=c)f=Mf([a,-u*z(l),-u*R(l)]),t.point(f[0],f[1])}}function Ml(t,n){(n=kf(n))[0]-=t,Nf(n);t=Xc(-n[1]);return((-n[2]<0?-t:t)+zc-O)%zc}function kl(){var r,n=[];return{point:function(t,n,e){r.push([t,n,e])},lineStart:function(){n.push(r=[])},lineEnd:e,rejoin:function(){1<n.length&&n.push(n.pop().concat(n.shift()))},result:function(){var t=n;return n=[],r=null,t}}}function Tl(t,n){return j(t[0]-n[0])<O&&j(t[1]-n[1])<O}function Al(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Sl(t,n,e,r,o){var a,i,u=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],i=t[n];if(Tl(r,i)){if(!r[2]&&!i[2]){for(o.lineStart(),a=0;a<n;++a)o.point((r=t[a])[0],r[1]);return void o.lineEnd()}i[0]+=2*O}u.push(e=new Al(r,t,null,!0)),c.push(e.o=new Al(r,null,e,!1)),u.push(e=new Al(i,t,null,!1)),c.push(e.o=new Al(i,null,e,!0))}}),u.length){for(c.sort(n),El(u),El(c),a=0,i=c.length;a<i;++a)c[a].e=e=!e;for(var f,l,s=u[0];;){for(var h=s,d=!0;h.v;)if((h=h.n)===s)return;f=h.z,o.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(a=0,i=f.length;a<i;++a)o.point((l=f[a])[0],l[1]);else r(h.x,h.n.x,1,o);h=h.n}else{if(d)for(f=h.p.z,a=f.length-1;0<=a;--a)o.point((l=f[a])[0],l[1]);else r(h.x,h.p.x,-1,o);h=h.p}}while(f=(h=h.o).z,d=!d,!h.v);o.lineEnd()}}}function El(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}function Nl(t){return j(t[0])<=C?t[0]:Yc(t[0])*((j(t[0])+C)%zc-C)}function Ol(t,n){var e=Nl(n),r=n[1],n=R(r),i=[R(e),-z(e),0],o=0,a=0,u=new S;1===n?r=P+O:-1===n&&(r=-P-O);for(var c=0,f=t.length;c<f;++c)if(s=(l=t[c]).length)for(var l,s,h=l[s-1],d=Nl(h),p=h[1]/2+jc,v=R(p),y=z(p),g=0;g<s;++g,d=b,v=x,y=m,h=_){var _=l[g],b=Nl(_),m=_[1]/2+jc,x=R(m),m=z(m),w=b-d,M=0<=w?1:-1,k=M*w,T=C<k,A=v*x;u.add(Hc(A*M*R(k),y*m+A*z(k))),o+=T?w+M*zc:w,T^e<=d^e<=b&&(Nf(A=Af(kf(h),kf(_))),Nf(k=Af(i,A)),(M=(T^0<=w?-1:1)*Vc(k[2]))<r||r===M&&(A[0]||A[1]))&&(a+=T^0<=w?1:-1)}return(o<-O||o<O&&u<-Fc)^1&a}function Cl(y,g,_,b){return function(u){var c,f,l,e=g(u),s=kl(),h=g(s),d=!1,n={point:r,lineStart:i,lineEnd:o,polygonStart:function(){n.point=p,n.lineStart=a,n.lineEnd=v,f=[],c=[]},polygonEnd:function(){n.point=r,n.lineStart=i,n.lineEnd=o,f=Kt(f);var t=Ol(c,b);f.length?(d||(u.polygonStart(),d=!0),Sl(f,Il,t,_,u)):t&&(d||(u.polygonStart(),d=!0),u.lineStart(),_(null,null,1,u),u.lineEnd()),d&&(u.polygonEnd(),d=!1),f=c=null},sphere:function(){u.polygonStart(),u.lineStart(),_(null,null,1,u),u.lineEnd(),u.polygonEnd()}};function r(t,n){y(t,n)&&u.point(t,n)}function t(t,n){e.point(t,n)}function i(){n.point=t,e.lineStart()}function o(){n.point=r,e.lineEnd()}function p(t,n){l.push([t,n]),h.point(t,n)}function a(){h.lineStart(),l=[]}function v(){p(l[0][0],l[0][1]),h.lineEnd();var t,n,e,r,i=h.clean(),o=s.result(),a=o.length;if(l.pop(),c.push(l),l=null,a)if(1&i){if(0<(n=(e=o[0]).length-1)){for(d||(u.polygonStart(),d=!0),u.lineStart(),t=0;t<n;++t)u.point((r=e[t])[0],r[1]);u.lineEnd()}}else 1<a&&2&i&&o.push(o.pop().concat(o.shift())),f.push(o.filter(Pl))}return n}}function Pl(t){return 1<t.length}function Il(t,n){return((t=t.x)[0]<0?t[1]-P-O:P-t[1])-((n=n.x)[0]<0?n[1]-P-O:P-n[1])}yl.invert=yl;var Fl=Cl(function(){return 1},function(f){var l,s=NaN,h=NaN,d=NaN;return{lineStart:function(){f.lineStart(),l=1},point:function(t,n){var e,r,i,o,a,u=0<t?C:-C,c=j(t-s);j(c-C)<O?(f.point(s,h=0<(h+n)/2?P:-P),f.point(d,h),f.lineEnd(),f.lineStart(),f.point(u,h),f.point(t,h),l=0):d!==u&&C<=c&&(j(s-d)<O&&(s-=d*O),j(t-u)<O&&(t-=u*O),c=h,i=n,a=R((e=s)-(r=t)),h=j(a)>O?Rc((R(c)*(o=z(i))*R(r)-R(i)*(r=z(c))*R(e))/(r*o*a)):(c+i)/2,f.point(d,h),f.lineEnd(),f.lineStart(),f.point(u,h),l=0),f.point(s=t,h=n),d=u},lineEnd:function(){f.lineEnd(),s=h=NaN},clean:function(){return 2-l}}},function(t,n,e,r){var i;null==t?(i=e*P,r.point(-C,i),r.point(0,i),r.point(C,i),r.point(C,0),r.point(C,-i),r.point(0,-i),r.point(-C,-i),r.point(-C,0),r.point(-C,i)):j(t[0]-n[0])>O?(t=t[0]<n[0]?C:-C,i=e*t/2,r.point(-t,i),r.point(0,i),r.point(t,i)):r.point(n[0],n[1])},[-C,-P]);function jl(i){var v=z(i),o=2*F,s=0<v,h=j(v)>O;function d(t,n){return z(t)*z(n)>v}function p(t,n,e){var r,i,o,a,u,c,f,l=[1,0,0],s=Af(kf(t),kf(n)),h=Tf(s,s),d=s[0],p=h-d*d;return p?(r=Af(l,s),Sf(l=Ef(l,v*h/p),Ef(s,-v*d/p)),(p=(s=Tf(l,h=r))*s-(d=Tf(h,h))*(Tf(l,l)-1))<0?void 0:(Sf(p=Ef(h,(-s-(r=H(p)))/d),l),p=Mf(p),e?(i=t[0],o=n[0],a=t[1],n=n[1],o<i&&(f=i,i=o,o=f),!(c=j((u=o-i)-C)<O)&&n<a&&(f=a,a=n,n=f),(c||u<O?c?0<a+n^p[1]<(j(p[0]-i)<O?a:n):a<=p[1]&&p[1]<=n:C<u^(i<=p[0]&&p[0]<=o))?(Sf(f=Ef(h,(-s+r)/d),l),[p,Mf(f)]):void 0):p)):!e&&t}function y(t,n){var e=s?i:C-i,r=0;return t<-e?r|=1:e<t&&(r|=2),n<-e?r|=4:e<n&&(r|=8),r}return Cl(d,function(o){var a,u,c,f,l;return{lineStart:function(){f=c=!1,l=1},point:function(t,n){var e,r=[t,n],i=d(t,n),t=s?i?0:y(t,n):i?y(t+(t<0?C:-C),n):0;!a&&(f=c=i)&&o.lineStart(),i===c||(e=p(a,r))&&!Tl(a,e)&&!Tl(r,e)||(r[2]=1),i!==c?(l=0,i?(o.lineStart(),e=p(r,a),o.point(e[0],e[1])):(e=p(a,r),o.point(e[0],e[1],2),o.lineEnd()),a=e):h&&a&&s^i&&(t&u||!(n=p(r,a,!0))||(l=0,s?(o.lineStart(),o.point(n[0][0],n[0][1]),o.point(n[1][0],n[1][1]),o.lineEnd()):(o.point(n[1][0],n[1][1]),o.lineEnd(),o.lineStart(),o.point(n[0][0],n[0][1],3)))),!i||a&&Tl(a,r)||o.point(r[0],r[1]),a=r,c=i,u=t},lineEnd:function(){c&&o.lineEnd(),a=null},clean:function(){return l|(f&&c)<<1}}},function(t,n,e,r){wl(r,i,o,e,t,n)},s?[0,-i]:[-C,i-C])}var zl,Rl,Hl,Dl,Ll=1e9,ql=-Ll;function Ul(g,_,b,m){function x(t,n){return g<=t&&t<=b&&_<=n&&n<=m}function w(t,n,e,r){var i=0,o=0;if(null==t||(i=a(t,e))!==(o=a(n,e))||u(t,n)<0^0<e)for(;r.point(0===i||3===i?g:b,1<i?m:_),(i=(i+e+4)%4)!==o;);else r.point(n[0],n[1])}function a(t,n){return j(t[0]-g)<O?0<n?0:3:j(t[0]-b)<O?0<n?2:1:j(t[1]-_)<O?0<n?1:0:0<n?3:2}function M(t,n){return u(t.x,n.x)}function u(t,n){var e=a(t,1),r=a(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(r){var i,s,o,a,u,c,f,l,h,d,p,v=r,t=kl(),n={point:e,lineStart:function(){n.point=y,s&&s.push(o=[]);d=!0,h=!1,f=l=NaN},lineEnd:function(){i&&(y(a,u),c&&h&&t.rejoin(),i.push(t.result()));n.point=e,h&&v.lineEnd()},polygonStart:function(){v=t,i=[],s=[],p=!0},polygonEnd:function(){var t=(()=>{for(var t=0,n=0,e=s.length;n<e;++n)for(var r,i,o=s[n],a=1,u=o.length,c=o[0],f=c[0],l=c[1];a<u;++a)r=f,i=l,c=o[a],f=c[0],l=c[1],i<=m?m<l&&(l-i)*(g-r)<(f-r)*(m-i)&&++t:l<=m&&(f-r)*(m-i)<(l-i)*(g-r)&&--t;return t})(),n=p&&t,e=(i=Kt(i)).length;(n||e)&&(r.polygonStart(),n&&(r.lineStart(),w(null,null,1,r),r.lineEnd()),e&&Sl(i,M,t,w,r),r.polygonEnd());v=r,i=s=o=null}};function e(t,n){x(t,n)&&v.point(t,n)}function y(t,n){var e,r,i=x(t,n);s&&o.push([t,n]),d?(a=t,u=n,d=!1,(c=i)&&(v.lineStart(),v.point(t,n))):i&&h?v.point(t,n):((t,n,e,r,i,o)=>{var a=t[0],u=t[1],c=0,f=1,l=n[0]-a,s=n[1]-u,e=e-a;if(l||!(0<e)){if(e/=l,l<0){if(e<c)return;e<f&&(f=e)}else if(0<l){if(f<e)return;c<e&&(c=e)}if(e=i-a,l||!(e<0)){if(e/=l,l<0){if(f<e)return;c<e&&(c=e)}else if(0<l){if(e<c)return;e<f&&(f=e)}if(e=r-u,s||!(0<e)){if(e/=s,s<0){if(e<c)return;e<f&&(f=e)}else if(0<s){if(f<e)return;c<e&&(c=e)}if(e=o-u,s||!(e<0)){if(e/=s,s<0){if(f<e)return;c<e&&(c=e)}else if(0<s){if(e<c)return;e<f&&(f=e)}return 0<c&&(t[0]=a+c*l,t[1]=u+c*s),f<1&&(n[0]=a+f*l,n[1]=u+f*s),1}}}}})(e=[f=Math.max(ql,Math.min(Ll,f)),l=Math.max(ql,Math.min(Ll,l))],r=[t=Math.max(ql,Math.min(Ll,t)),n=Math.max(ql,Math.min(Ll,n))],g,_,b,m)?(h||(v.lineStart(),v.point(e[0],e[1])),v.point(r[0],r[1]),i||v.lineEnd(),p=!1):i&&(v.lineStart(),v.point(t,n),p=!1),f=t,l=n,h=i}return n}}var Bl={sphere:e,point:e,lineStart:function(){Bl.point=Gl,Bl.lineEnd=Yl},lineEnd:e,polygonStart:e,polygonEnd:e};function Yl(){Bl.point=Bl.lineEnd=e}function Gl(t,n){Rl=t*=F,Hl=R(n*=F),Dl=z(n),Bl.point=Xl}function Xl(t,n){t*=F;var e=R(n*=F),n=z(n),r=j(t-Rl),i=z(r),r=n*R(r),o=Dl*e-Hl*n*i,i=Hl*e+Dl*n*i;zl.add(Hc(H(r*r+o*o),i)),Rl=t,Hl=e,Dl=n}function Vl(t){return zl=new S,tf(t,Bl),+zl}var Wl=[null,null],Zl={type:"LineString",coordinates:Wl};function Kl(t,n){return Wl[0]=t,Wl[1]=n,Vl(Zl)}var Ql={Feature:function(t,n){return Jl(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(Jl(e[r].geometry,n))return!0;return!1}},$l={Sphere:function(){return!0},Point:function(t,n){return ts(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(ts(e[r],n))return!0;return!1},LineString:function(t,n){return ns(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(ns(e[r],n))return!0;return!1},Polygon:function(t,n){return es(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(es(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(Jl(e[r],n))return!0;return!1}};function Jl(t,n){return!(!t||!$l.hasOwnProperty(t.type))&&$l[t.type](t,n)}function ts(t,n){return 0===Kl(t,n)}function ns(t,n){for(var e,r,i,o=0,a=t.length;o<a;o++){if(0===(r=Kl(t[o],n)))return!0;if(0<o&&0<(i=Kl(t[o],t[o-1]))&&e<=i&&r<=i&&(e+r-i)*(1-Math.pow((e-r)/i,2))<Fc*i)return!0;e=r}return!1}function es(t,n){return!!Ol(t.map(rs),is(n))}function rs(t){return(t=t.map(is)).pop(),t}function is(t){return[t[0]*F,t[1]*F]}function os(t,n,e){var r=$t(t,n-O,e).concat(n);return function(n){return r.map(function(t){return[n,t]})}}function as(t,n,e){var r=$t(t,n-O,e).concat(n);return function(n){return r.map(function(t){return[t,n]})}}function us(){var n,e,r,i,o,a,u,c,f,l,s,h,d=10,p=d,v=90,y=360,g=2.5;function _(){return{type:"MultiLineString",coordinates:t()}}function t(){return $t(Dc(i/v)*v,r,v).map(s).concat($t(Dc(c/y)*y,u,y).map(h)).concat($t(Dc(e/d)*d,n,d).filter(function(t){return j(t%v)>O}).map(f)).concat($t(Dc(a/p)*p,o,p).filter(function(t){return j(t%y)>O}).map(l))}return _.lines=function(){return t().map(function(t){return{type:"LineString",coordinates:t}})},_.outline=function(){return{type:"Polygon",coordinates:[s(i).concat(h(u).slice(1),s(r).reverse().slice(1),h(c).reverse().slice(1))]}},_.extent=function(t){return arguments.length?_.extentMajor(t).extentMinor(t):_.extentMinor()},_.extentMajor=function(t){return arguments.length?(i=+t[0][0],r=+t[1][0],c=+t[0][1],u=+t[1][1],r<i&&(t=i,i=r,r=t),u<c&&(t=c,c=u,u=t),_.precision(g)):[[i,c],[r,u]]},_.extentMinor=function(t){return arguments.length?(e=+t[0][0],n=+t[1][0],a=+t[0][1],o=+t[1][1],n<e&&(t=e,e=n,n=t),o<a&&(t=a,a=o,o=t),_.precision(g)):[[e,a],[n,o]]},_.step=function(t){return arguments.length?_.stepMajor(t).stepMinor(t):_.stepMinor()},_.stepMajor=function(t){return arguments.length?(v=+t[0],y=+t[1],_):[v,y]},_.stepMinor=function(t){return arguments.length?(d=+t[0],p=+t[1],_):[d,p]},_.precision=function(t){return arguments.length?(g=+t,f=os(a,o,90),l=as(e,n,g),s=os(c,u,90),h=as(i,r,g),_):g},_.extentMajor([[-180,-90+O],[180,90-O]]).extentMinor([[-180,-80-O],[180,80+O]])}function cs(t){return t}var fs,ls,ss,hs,ds=new S,ps=new S,vs={point:e,lineStart:e,lineEnd:e,polygonStart:function(){vs.lineStart=ys,vs.lineEnd=bs},polygonEnd:function(){vs.lineStart=vs.lineEnd=vs.point=e,ds.add(j(ps)),ps=new S},result:function(){var t=ds/2;return ds=new S,t}};function ys(){vs.point=gs}function gs(t,n){vs.point=_s,fs=ss=t,ls=hs=n}function _s(t,n){ps.add(hs*t-ss*n),ss=t,hs=n}function bs(){_s(fs,ls)}var ms=vs,xs=1/0,ws=xs,Ms=-xs,ks=Ms;var Ts,As,Ss,Es,Ns={point:function(t,n){t<xs&&(xs=t);Ms<t&&(Ms=t);n<ws&&(ws=n);ks<n&&(ks=n)},lineStart:e,lineEnd:e,polygonStart:e,polygonEnd:e,result:function(){var t=[[xs,ws],[Ms,ks]];return Ms=ks=-(ws=xs=1/0),t}},Os=0,Cs=0,Ps=0,Is=0,Fs=0,js=0,zs=0,Rs=0,Hs=0,Ds={point:Ls,lineStart:qs,lineEnd:Ys,polygonStart:function(){Ds.lineStart=Gs,Ds.lineEnd=Xs},polygonEnd:function(){Ds.point=Ls,Ds.lineStart=qs,Ds.lineEnd=Ys},result:function(){var t=Hs?[zs/Hs,Rs/Hs]:js?[Is/js,Fs/js]:Ps?[Os/Ps,Cs/Ps]:[NaN,NaN];return Os=Cs=Ps=Is=Fs=js=zs=Rs=Hs=0,t}};function Ls(t,n){Os+=t,Cs+=n,++Ps}function qs(){Ds.point=Us}function Us(t,n){Ds.point=Bs,Ls(Ss=t,Es=n)}function Bs(t,n){var e=t-Ss,r=n-Es,e=H(e*e+r*r);Is+=e*(Ss+t)/2,Fs+=e*(Es+n)/2,js+=e,Ls(Ss=t,Es=n)}function Ys(){Ds.point=Ls}function Gs(){Ds.point=Vs}function Xs(){Ws(Ts,As)}function Vs(t,n){Ds.point=Ws,Ls(Ts=Ss=t,As=Es=n)}function Ws(t,n){var e=t-Ss,r=n-Es,e=H(e*e+r*r);Is+=e*(Ss+t)/2,Fs+=e*(Es+n)/2,js+=e,zs+=(e=Es*t-Ss*n)*(Ss+t),Rs+=e*(Es+n),Hs+=3*e,Ls(Ss=t,Es=n)}var Zs=Ds;function Ks(t){this._context=t}Ks.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,zc)}},result:e};var Qs,$s,Js,th,nh,eh=new S,rh={point:e,lineStart:function(){rh.point=ih},lineEnd:function(){Qs&&oh($s,Js),rh.point=e},polygonStart:function(){Qs=!0},polygonEnd:function(){Qs=null},result:function(){var t=+eh;return eh=new S,t}};function ih(t,n){rh.point=oh,$s=th=t,Js=nh=n}function oh(t,n){th-=t,nh-=n,eh.add(H(th*th+nh*nh)),th=t,nh=n}var ah,uh,ch,fh,lh=rh,sh=(()=>_createClass(function t(n){_classCallCheck(this,t),this._append=null==n?hh:(t=>{var r,n=Math.floor(t);if(0<=n)return 15<n?hh:(n!==ah&&(r=Math.pow(10,n),ah=n,uh=function(t){var n=1;this._+=t[0];for(var e=t.length;n<e;++n)this._+=Math.round(arguments[n]*r)/r+t[n]}),uh);throw new RangeError("invalid digits: ".concat(t))})(n),this._radius=4.5,this._=""},[{key:"pointRadius",value:function(t){return this._radius=+t,this}},{key:"polygonStart",value:function(){this._line=0}},{key:"polygonEnd",value:function(){this._line=NaN}},{key:"lineStart",value:function(){this._point=0}},{key:"lineEnd",value:function(){0===this._line&&(this._+="Z"),this._point=NaN}},{key:"point",value:function(t,n){switch(this._point){case 0:this._append(_templateObject15=_templateObject15||_taggedTemplateLiteral(["M",",",""]),t,n),this._point=1;break;case 1:this._append(_templateObject16=_templateObject16||_taggedTemplateLiteral(["L",",",""]),t,n);break;default:var e,r;this._append(_templateObject17=_templateObject17||_taggedTemplateLiteral(["M",",",""]),t,n),this._radius===ch&&this._append===uh||(e=this._radius,r=this._,this._="",this._append(_templateObject18=_templateObject18||_taggedTemplateLiteral(["m0,","a",","," 0 1,1 0,","a",","," 0 1,1 0,","z"]),e,e,e,-2*e,e,e,2*e),ch=e,uh=this._append,fh=this._,this._=r),this._+=fh}}},{key:"result",value:function(){var t=this._;return this._="",t.length?t:null}}]))();function hh(t){var n=1;this._+=t[0];for(var e=t.length;n<e;++n)this._+=arguments[n]+t[n]}function dh(r){return function(t){var n,e=new ph;for(n in r)e[n]=r[n];return e.stream=t,e}}function ph(){}function vh(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),tf(e,t.stream(Ns)),n(Ns.result()),null!=r&&t.clipExtent(r),t}function yh(i,o,t){return vh(i,function(t){var n=o[1][0]-o[0][0],e=o[1][1]-o[0][1],r=Math.min(n/(t[1][0]-t[0][0]),e/(t[1][1]-t[0][1])),n=+o[0][0]+(n-r*(t[1][0]+t[0][0]))/2,e=+o[0][1]+(e-r*(t[1][1]+t[0][1]))/2;i.scale(150*r).translate([n,e])},t)}function gh(t,n,e){return yh(t,[[0,0],n],e)}function _h(r,i,t){return vh(r,function(t){var n=+i,e=n/(t[1][0]-t[0][0]),n=(n-e*(t[1][0]+t[0][0]))/2,t=-e*t[0][1];r.scale(150*e).translate([n,t])},t)}function bh(i,o,t){return vh(i,function(t){var n=+o,e=n/(t[1][1]-t[0][1]),r=-e*t[0][0],n=(n-e*(t[1][1]+t[0][1]))/2;i.scale(150*e).translate([r,n])},t)}ph.prototype={constructor:ph,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var mh=16,xh=z(30*F);function wh(t,n){return+n?(S=t,E=n,function(r){var e,i,o,a,u,c,f,l,s,h,d,p,v={point:t,lineStart:n,lineEnd:g,polygonStart:function(){r.polygonStart(),v.lineStart=_},polygonEnd:function(){r.polygonEnd(),v.lineStart=n}};function t(t,n){t=S(t,n),r.point(t[0],t[1])}function n(){l=NaN,v.point=y,r.lineStart()}function y(t,n){var e=kf([t,n]),n=S(t,n);N(l,s,f,h,d,p,l=n[0],s=n[1],f=t,h=e[0],d=e[1],p=e[2],mh,r),r.point(l,s)}function g(){v.point=t,r.lineEnd()}function _(){n(),v.point=b,v.lineEnd=m}function b(t,n){y(e=t,n),i=l,o=s,a=h,u=d,c=p,v.point=y}function m(){N(l,s,f,h,d,p,i,o,e,a,u,c,mh,r),v.lineEnd=g,g()}return v}):(e=t,dh({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}}));var e,S,E;function N(t,n,e,r,i,o,a,u,c,f,l,s,h,d){var p,v,y,g,_,b,m,x,w,M,k=a-t,T=u-n,A=k*k+T*T;4*E<A&&h--&&(y=o+s,m=Vc(y/=g=H((p=r+f)*p+(v=i+l)*v+y*y)),_=j(j(y)-1)<O||j(e-c)<O?(e+c)/2:Hc(v,p),b=(m=S(_,m))[0],E<(M=T*(x=b-t)-k*(w=(m=m[1])-n))*M/A||.3<j((k*x+T*w)/A-.5)||r*f+i*l+o*s<xh)&&(N(t,n,e,r,i,o,b,m,_,p/=g,v/=g,y,h,d),d.point(b,m),N(b,m,_,p,v,y,a,u,c,f,l,s,h,d))}}var Mh=dh({point:function(t,n){this.stream.point(t*F,n*F)}});function kh(t,e,r,i,o,n){var a,u,c,f,l,s,h,d,p,v,y,g;return n?(s=z(n),n=R(n),h=s*t,d=n*t,p=s/t,v=n/t,y=(n*r-s*e)/t,g=(n*e+s*r)/t,b.invert=function(t,n){return[i*(p*t-v*n+y),o*(g-v*t-p*n)]},b):(a=t,u=e,c=r,f=i,l=o,_.invert=function(t,n){return[(t-u)/a*f,(c-n)/a*l]},_);function _(t,n){return[u+a*(t*=f),c-a*(n*=l)]}function b(t,n){return[h*(t*=i)-d*(n*=o)+e,r-d*t-h*n]}}function Th(t){return Ah(function(){return t})()}function Ah(t){var n,r,e,i,o,a,u,c,f,l,s=150,h=480,d=250,p=0,v=0,y=0,g=0,_=0,b=0,m=1,x=1,w=null,M=Fl,k=null,T=cs,A=.5;function S(t){return c(t[0]*F,t[1]*F)}function E(t){return(t=c.invert(t[0],t[1]))&&[t[0]*I,t[1]*I]}function N(){var t=kh(s,0,0,m,x,b).apply(null,n(p,v)),t=kh(s,h-t[0],d-t[1],m,x,b);return r=gl(y,g,_),u=vl(n,t),c=vl(r,u),a=wh(u,A),O()}function O(){return f=l=null,S}return S.stream=function(t){return f&&l===t?f:f=Mh((e=r,dh({point:function(t,n){t=e(t,n);return this.stream.point(t[0],t[1])}})(M(a(T(l=t))))));var e},S.preclip=function(t){return arguments.length?(M=t,w=void 0,O()):M},S.postclip=function(t){return arguments.length?(T=t,k=e=i=o=null,O()):T},S.clipAngle=function(t){return arguments.length?(M=+t?jl(w=t*F):(w=null,Fl),O()):w*I},S.clipExtent=function(t){return arguments.length?(T=null==t?(k=e=i=o=null,cs):Ul(k=+t[0][0],e=+t[0][1],i=+t[1][0],o=+t[1][1]),O()):null==k?null:[[k,e],[i,o]]},S.scale=function(t){return arguments.length?(s=+t,N()):s},S.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],N()):[h,d]},S.center=function(t){return arguments.length?(p=t[0]%360*F,v=t[1]%360*F,N()):[p*I,v*I]},S.rotate=function(t){return arguments.length?(y=t[0]%360*F,g=t[1]%360*F,_=2<t.length?t[2]%360*F:0,N()):[y*I,g*I,_*I]},S.angle=function(t){return arguments.length?(b=t%360*F,N()):b*I},S.reflectX=function(t){return arguments.length?(m=t?-1:1,N()):m<0},S.reflectY=function(t){return arguments.length?(x=t?-1:1,N()):x<0},S.precision=function(t){return arguments.length?(a=wh(u,A=t*t),O()):H(A)},S.fitExtent=function(t,n){return yh(S,t,n)},S.fitSize=function(t,n){return gh(S,t,n)},S.fitWidth=function(t,n){return _h(S,t,n)},S.fitHeight=function(t,n){return bh(S,t,n)},function(){return n=t.apply(this,arguments),S.invert=n.invert&&E,N()}}function Sh(t){var n=0,e=C/3,r=Ah(t),t=r(n,e);return t.parallels=function(t){return arguments.length?r(n=t[0]*F,e=t[1]*F):[n*I,e*I]},t}function Eh(t,n){var e,r,i,o=R(t),a=(o+R(n))/2;return j(a)<O?(e=z(t),u.invert=function(t,n){return[t/e,Vc(n*e)]},u):(i=H(r=1+o*(2*a-o))/a,c.invert=function(t,n){var n=i-n,e=Hc(t,j(n))*Yc(n);return n*a<0&&(e-=C*Yc(t)*Yc(n)),[e/a,Vc((r-(t*t+n*n)*a*a)/(2*a))]},c);function u(t,n){return[t*e,R(n)/e]}function c(t,n){n=H(r-2*a*R(n))/a;return[n*R(t*=a),i-n*z(t)]}}function Nh(){return Sh(Eh).scale(155.424).center([0,33.6442])}function Oh(){return Nh().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function Ch(i){return function(t,n){var e=z(t),r=z(n),e=i(e*r);return e===1/0?[2,0]:[e*r*R(t),e*R(n)]}}function Ph(o){return function(t,n){var e=H(t*t+n*n),r=o(e),i=R(r),r=z(r);return[Hc(t*i,e*r),Vc(e&&n*i/e)]}}var Ih=Ch(function(t){return H(2/(1+t))});Ih.invert=Ph(function(t){return 2*Vc(t/2)});var Fh=Ch(function(t){return(t=Xc(t))&&t/R(t)});function jh(t,n){return[t,Uc(Gc((P+n)/2))]}function zh(e){var r,i,o,a=Th(e),n=a.center,u=a.scale,c=a.translate,f=a.clipExtent,l=null;function s(){var t=C*u(),n=a(xl(a.rotate()).invert([0,0]));return f(null==l?[[n[0]-t,n[1]-t],[n[0]+t,n[1]+t]]:e===jh?[[Math.max(n[0]-t,l),r],[Math.min(n[0]+t,i),o]]:[[l,Math.max(n[1]-t,r)],[i,Math.min(n[1]+t,o)]])}return a.scale=function(t){return(arguments.length?(u(t),s):u)()},a.translate=function(t){return(arguments.length?(c(t),s):c)()},a.center=function(t){return(arguments.length?(n(t),s):n)()},a.clipExtent=function(t){return arguments.length?(null==t?l=r=i=o=null:(l=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),s()):null==l?null:[[l,r],[i,o]]},s()}function Rh(t){return Gc((P+t)/2)}function Hh(t,n){var e=z(t),i=t===n?R(t):Uc(e/z(n))/Uc(Rh(n)/Rh(t)),o=e*Bc(Rh(t),i)/i;return i?(r.invert=function(t,n){var n=o-n,e=Yc(i)*H(t*t+n*n),r=Hc(t,j(n))*Yc(n);return n*i<0&&(r-=C*Yc(t)*Yc(n)),[r/i,2*Rc(Bc(o/e,1/i))-P]},r):jh;function r(t,n){0<o?n<-P+O&&(n=-P+O):P-O<n&&(n=P-O);n=o/Bc(Rh(n),i);return[n*R(i*t),o-n*z(i*t)]}}function Dh(t,n){return[t,n]}function Lh(t,n){var e=z(t),r=t===n?R(t):(e-z(n))/(n-t),i=e/r+t;return j(r)<O?Dh:(o.invert=function(t,n){var n=i-n,e=Hc(t,j(n))*Yc(n);return n*r<0&&(e-=C*Yc(t)*Yc(n)),[e/r,i-Yc(r)*H(t*t+n*n)]},o);function o(t,n){n=i-n,t*=r;return[n*R(t),i-n*z(t)]}}Fh.invert=Ph(function(t){return t}),jh.invert=function(t,n){return[t,2*Rc(Lc(n))-P]},Dh.invert=Dh;var qh=1.340264,Uh=-.081106,Bh=893e-6,Yh=.003796,Gh=H(3)/2;function Xh(t,n){var n=Vc(Gh*R(n)),e=n*n,r=e*e*e;return[t*z(n)/(Gh*(qh+3*Uh*e+r*(7*Bh+9*Yh*e))),n*(qh+Uh*e+r*(Bh+Yh*e))]}function Vh(t,n){var e=z(n),r=z(t)*e;return[e*R(t)/r,R(n)/r]}function Wh(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}function Zh(t,n){return[z(n)*R(t),R(n)]}function Kh(t,n){var e=z(n),r=1+z(t)*e;return[e*R(t)/r,R(n)/r]}function Qh(t,n){return[Uc(Gc((P+n)/2)),-t]}function $h(t,n){return t.parent===n.parent?1:2}function Jh(t,n){return t+n.x}function t0(t,n){return Math.max(t,n.y)}function n0(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;0<=--r;)n+=e[r].value;else n=1;t.value=n}function e0(){var n,e,r,i,o,a;return _regeneratorRuntime().wrap(function(t){for(;;)switch(t.prev=t.next){case 0:r=[n=this];case 1:e=r.reverse(),r=[];case 2:if(n=e.pop())return t.next=5,n;t.next=8;break;case 5:if(i=n.children)for(o=0,a=i.length;o<a;++o)r.push(i[o]);t.next=2;break;case 8:if(r.length){t.next=1;break}case 9:case"end":return t.stop()}},x,this)}function r0(t,n){t instanceof Map?(t=[void 0,t],void 0===n&&(n=o0)):void 0===n&&(n=i0);for(var e,r,i,o,a,t=new c0(t),u=[t];e=u.pop();)if((i=n(e.data))&&(a=(i=Array.from(i)).length))for(e.children=i,o=a-1;0<=o;--o)u.push(r=i[o]=new c0(i[o])),r.parent=e,r.depth=e.depth+1;return t.eachBefore(u0)}function i0(t){return t.children}function o0(t){return Array.isArray(t)?t[1]:null}function a0(t){void 0!==t.data.value&&(t.value=t.data.value),t.data=t.data.data}function u0(t){for(var n=0;t.height=n,(t=t.parent)&&t.height<++n;);}function c0(t){this.data=t,this.depth=this.height=0,this.parent=null}function f0(t){return null==t?null:l0(t)}function l0(t){if("function"!=typeof t)throw new Error;return t}function s0(){return 0}function h0(t){return function(){return t}}Xh.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,a=0;a<12&&(o=(i=(r-=e=(r*(qh+Uh*i+o*(Bh+Yh*i))-n)/(qh+3*Uh*i+o*(7*Bh+9*Yh*i)))*r)*i*i,!(j(e)<Fc));++a);return[Gh*t*(qh+3*Uh*i+o*(7*Bh+9*Yh*i))/z(r),Vc(R(r)/Gh)]},Vh.invert=Ph(Rc),Wh.invert=function(t,n){var e=n,r=25;do{var i=e*e,o=i*i}while(e-=o=(e*(1.007226+i*(.015085+o*(.028874*i-.044475-.005916*o)))-n)/(1.007226+i*(.045255+o*(.259866*i-.311325-.005916*11*o))),j(o)>O&&0<--r);return[t/(.8707+(i=e*e)*(i*(i*i*i*(.003971-.001529*i)-.013791)-.131979)),e]},Zh.invert=Ph(Vc),Kh.invert=Ph(function(t){return 2*Rc(t)}),Qh.invert=function(t,n){return[-n,2*Rc(Lc(t))-P]},c0.prototype=r0.prototype=_defineProperty({constructor:c0,count:function(){return this.eachAfter(n0)},each:function(t,n){var e,r=-1,i=_createForOfIteratorHelper(this);try{for(i.s();!(e=i.n()).done;){var o=e.value;t.call(n,o,++r,this)}}catch(t){i.e(t)}finally{i.f()}return this},eachAfter:function(t,n){for(var e,r,i,o=this,a=[o],u=[],c=-1;o=a.pop();)if(u.push(o),e=o.children)for(r=0,i=e.length;r<i;++r)a.push(e[r]);for(;o=u.pop();)t.call(n,o,++c,this);return this},eachBefore:function(t,n){for(var e,r,i,o=[this],a=-1;e=o.pop();)if(t.call(n,e,++a,this),r=e.children)for(i=r.length-1;0<=i;--i)o.push(r[i]);return this},find:function(t,n){var e,r=-1,i=_createForOfIteratorHelper(this);try{for(i.s();!(e=i.n()).done;){var o=e.value;if(t.call(n,o,++r,this))return o}}catch(t){i.e(t)}finally{i.f()}},sum:function(i){return this.eachAfter(function(t){for(var n=+i(t.data)||0,e=t.children,r=e&&e.length;0<=--r;)n+=e[r].value;t.value=n})},sort:function(n){return this.eachBefore(function(t){t.children&&t.children.sort(n)})},path:function(t){for(var n=this,e=((t,n)=>{if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i})(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){return Array.from(this)},leaves:function(){var n=[];return this.eachBefore(function(t){t.children||n.push(t)}),n},links:function(){var n=this,e=[];return n.each(function(t){t!==n&&e.push({source:t.parent,target:t})}),e},copy:function(){return r0(this).eachBefore(a0)}},Symbol.iterator,e0);var d0=1664525,p0=1013904223,v0=4294967296;function y0(){var t=1;return function(){return(t=(d0*t+p0)%v0)/v0}}function g0(t,n){for(var e,r,i=0,o=(t=((t,n)=>{for(var e,r,i=t.length;i;)r=n()*i--|0,e=t[i],t[i]=t[r],t[r]=e;return t})(Array.from(t),n)).length,a=[];i<o;)e=t[i],r&&b0(r,e)?++i:(r=(t=>{switch(t.length){case 1:return(t=>({x:t.x,y:t.y,r:t.r}))(t[0]);case 2:return x0(t[0],t[1]);case 3:return w0(t[0],t[1],t[2])}})(a=((t,n)=>{var e,r;if(m0(n,t))return[n];for(e=0;e<t.length;++e)if(_0(n,t[e])&&m0(x0(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(_0(x0(t[e],t[r]),n)&&_0(x0(t[e],n),t[r])&&_0(x0(t[r],n),t[e])&&m0(w0(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error})(a,e)),i=0);return r}function _0(t,n){var e=t.r-n.r,r=n.x-t.x,n=n.y-t.y;return e<0||e*e<r*r+n*n}function b0(t,n){var e=t.r-n.r+1e-9*Math.max(t.r,n.r,1),r=n.x-t.x,n=n.y-t.y;return 0<e&&r*r+n*n<e*e}function m0(t,n){for(var e=0;e<n.length;++e)if(!b0(t,n[e]))return;return 1}function x0(t,n){var e=t.x,r=t.y,t=t.r,i=n.x,o=n.y,n=n.r,a=i-e,u=o-r,c=n-t,f=Math.sqrt(a*a+u*u);return{x:(e+i+a/f*c)/2,y:(r+o+u/f*c)/2,r:(f+t+n)/2}}function w0(t,n,e){var r=t.x,i=t.y,t=t.r,o=n.x,a=n.y,n=n.r,u=e.x,c=e.y,e=e.r,f=r-o,l=r-u,s=i-a,h=i-c,d=n-t,p=e-t,v=r*r+i*i-t*t,o=v-o*o-a*a+n*n,a=v-u*u-c*c+e*e,n=l*s-f*h,v=(s*a-h*o)/(2*n)-r,u=(h*d-s*p)/n,c=(l*o-f*a)/(2*n)-i,e=(f*p-l*d)/n,h=u*u+e*e-1,s=2*(t+v*u+c*e),o=v*v+c*c-t*t,a=-(1e-6<Math.abs(h)?(s+Math.sqrt(s*s-4*h*o))/(2*h):o/s);return{x:r+v+u*a,y:i+c+e*a,r:a}}function M0(t,n,e){var r,i,o,a,u=t.x-n.x,c=t.y-n.y,f=u*u+c*c;f?(i=n.r+e.r,a=t.r+e.r,(a*=a)<(i*=i)?(r=(f+a-i)/(2*f),o=Math.sqrt(Math.max(0,a/f-r*r)),e.x=t.x-r*u-o*c,e.y=t.y-r*c+o*u):(r=(f+i-a)/(2*f),o=Math.sqrt(Math.max(0,i/f-r*r)),e.x=n.x+r*u-o*c,e.y=n.y+r*c+o*u)):(e.x=n.x+e.r,e.y=n.y)}function k0(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,n=n.y-t.y;return 0<e&&r*r+n*n<e*e}function T0(t){var n=t._,t=t.next._,e=n.r+t.r,r=(n.x*t.r+t.x*n.r)/e,t=(n.y*t.r+t.y*n.r)/e;return r*r+t*t}function A0(t){this._=t,this.next=null,this.previous=null}function S0(t,n){if(!(o=(t="object"===_typeof(e=t)&&"length"in e?e:Array.from(e)).length))return 0;var e,r,i,o,a,u,c,f,l,s,h,d=t[0];if(d.x=0,d.y=0,!(1<o))return d.r;if(d.x=-(r=t[1]).r,r.x=d.r,r.y=0,!(2<o))return d.r+r.r;M0(r,d,i=t[2]),d=new A0(d),r=new A0(r),i=new A0(i),((d.next=i.previous=r).next=d.previous=i).next=r.previous=d;t:for(c=3;c<o;++c){M0(d._,r._,i=t[c]),i=new A0(i),f=r.next,l=d.previous,s=r._.r,h=d._.r;do{if(s<=h){if(k0(f._,i._)){r=f,(d.next=r).previous=d,--c;continue t}s+=f._.r,f=f.next}else{if(k0(l._,i._)){((d=l).next=r).previous=d,--c;continue t}h+=l._.r,l=l.previous}}while(f!==l.next);for(i.previous=d,i.next=r,d.next=r.previous=r=i,a=T0(d);(i=i.next)!==r;)(u=T0(i))<a&&(d=i,a=u);r=d.next}for(d=[r._],i=r;(i=i.next)!==r;)d.push(i._);for(i=g0(d,n),c=0;c<o;++c)(d=t[c]).x-=i.x,d.y-=i.y;return i.r}function E0(t){return Math.sqrt(t.value)}function N0(n){return function(t){t.children||(t.r=Math.max(0,+n(t)||0))}}function O0(a,u,c){return function(t){if(n=t.children){var n,e,r,i=n.length,o=a(t)*u||0;if(o)for(e=0;e<i;++e)n[e].r+=o;if(r=S0(n,c),o)for(e=0;e<i;++e)n[e].r-=o;t.r=r+o}}}function C0(e){return function(t){var n=t.parent;t.r*=e,n&&(t.x=n.x+e*t.x,t.y=n.y+e*t.y)}}function P0(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function I0(t,n,e,r,i){for(var o,a=t.children,u=-1,c=a.length,f=t.value&&(r-n)/t.value;++u<c;)(o=a[u]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*f}var F0={depth:-1},j0={},z0={};function R0(t){return t.id}function H0(t){return t.parentId}function D0(t){var n=t.length;if(n<2)return"";for(;1<--n&&!L0(t,n););return t.slice(0,n)}function L0(t,n){if("/"===t[n]){for(var e=0;0<n&&"\\"===t[--n];)++e;if(0==(1&e))return 1}}function q0(t,n){return t.parent===n.parent?1:2}function U0(t){var n=t.children;return n?n[0]:t.t}function B0(t){var n=t.children;return n?n[n.length-1]:t.t}function Y0(t,n){this._=t,this.parent=null,this.children=null,this.A=null,(this.a=this).z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function G0(t,n,e,r,i){for(var o,a=t.children,u=-1,c=a.length,f=t.value&&(i-e)/t.value;++u<c;)(o=a[u]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*f}Y0.prototype=Object.create(c0.prototype);t=(1+Math.sqrt(5))/2;function X0(t,n,e,r,i,o){for(var a,u,c,f,l,s,h,d,p,v,y,g=[],_=n.children,b=0,m=0,x=_.length,w=n.value;b<x;){for(c=i-e,f=o-r;!(l=_[m++].value)&&m<x;);for(y=(s=h=l)*l*(v=Math.max(f/c,c/f)/(w*t)),p=Math.max(h/y,y/s);m<x;++m){if(l+=u=_[m].value,u<s&&(s=u),h<u&&(h=u),y=l*l*v,p<(d=Math.max(h/y,y/s))){l-=u;break}p=d}g.push(a={value:l,dice:c<f,children:_.slice(b,m)}),a.dice?I0(a,e,r,i,w?r+=f*l/w:o):G0(a,e,r,w?e+=c*l/w:i,o),w-=l,b=m}return g}var V0=function n(o){function t(t,n,e,r,i){X0(o,t,n,e,r,i)}return t.ratio=function(t){return n(1<(t=+t)?t:1)},t}(t);t=function n(d){function t(t,n,e,r,i){if((o=t._squarify)&&o.ratio===d)for(var o,a,u,c,f,l=-1,s=o.length,h=t.value;++l<s;){for(u=(a=o[l]).children,c=a.value=0,f=u.length;c<f;++c)a.value+=u[c].value;a.dice?I0(a,n,e,r,h?e+=(i-e)*a.value/h:i):G0(a,n,e,h?n+=(r-n)*a.value/h:r,i),h-=a.value}else t._squarify=o=X0(d,t,n,e,r,i),o.ratio=d}return t.ratio=function(t){return n(1<(t=+t)?t:1)},t}(t);function W0(t,n){return t[0]-n[0]||t[1]-n[1]}function Z0(t){for(var n,e,r,i=t.length,o=[0,1],a=2,u=2;u<i;++u){for(;1<a&&(n=t[o[a-2]],r=t[u],((e=t[o[a-1]])[0]-n[0])*(r[1]-n[1])-(e[1]-n[1])*(r[0]-n[0])<=0);)--a;o[a++]=u}return o.slice(0,a)}var n=Math.random,K0=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(n),Q0=function t(e){function n(t,n){return arguments.length<2&&(n=t,t=0),t=Math.floor(t),n=Math.floor(n)-t,function(){return Math.floor(e()*n+t)}}return n.source=t,n}(n),$0=function t(o){function n(n,e){var r,i;return n=null==n?0:+n,e=null==e?1:+e,function(){var t;if(null!=r)t=r,r=null;else for(;r=2*o()-1,t=2*o()-1,!(i=r*r+t*t)||1<i;);return n+e*t*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(n),J0=function t(n){var e=$0.source(n);function r(){var t=e.apply(this,arguments);return function(){return Math.exp(t())}}return r.source=t,r}(n),t1=function t(r){function n(e){return(e=+e)<=0?function(){return 0}:function(){for(var t=0,n=e;1<n;--n)t+=r();return t+n*r()}}return n.source=t,n}(n),n1=function t(e){var r=t1.source(e);function n(t){var n;return 0==(t=+t)?e:(n=r(t),function(){return n()/t})}return n.source=t,n}(n),e1=function t(n){function e(t){return function(){return-Math.log1p(-n())/t}}return e.source=t,e}(n),r1=function t(n){function e(t){if((t=+t)<0)throw new RangeError("invalid alpha");return t=1/-t,function(){return Math.pow(1-n(),t)}}return e.source=t,e}(n),i1=function t(n){function e(t){if((t=+t)<0||1<t)throw new RangeError("invalid p");return function(){return Math.floor(n()+t)}}return e.source=t,e}(n),o1=function t(n){function e(t){if((t=+t)<0||1<t)throw new RangeError("invalid p");return 0===t?function(){return 1/0}:1===t?function(){return 1}:(t=Math.log1p(-t),function(){return 1+Math.floor(Math.log1p(-n())/t)})}return e.source=t,e}(n),a1=function t(u){var c=$0.source(u)();function n(t,r){if((t=+t)<0)throw new RangeError("invalid k");var i,o,a;return 0===t?function(){return 0}:(r=null==r?1:+r,1===t?function(){return-Math.log1p(-u())*r}:(i=(t<1?t+1:t)-1/3,o=1/(3*Math.sqrt(i)),a=t<1?function(){return Math.pow(u(),1/t)}:function(){return 1},function(){do{do{var t=c(),n=1+o*t}while(n<=0);n*=n*n;var e=1-u()}while(1-.0331*t*t*t*t<=e&&Math.log(e)>=.5*t*t+i*(1-n+Math.log(n)));return i*n*a()*r}))}return n.source=t,n}(n),u1=function t(n){var i=a1.source(n);function e(t,n){var e=i(t),r=i(n);return function(){var t=e();return 0===t?0:t/(t+r())}}return e.source=t,e}(n),c1=function t(n){var s=o1.source(n),h=u1.source(n);function e(f,l){return f=+f,1<=(l=+l)?function(){return f}:l<=0?function(){return 0}:function(){for(var t=0,n=f,e=l;16<n*e&&16<n*(1-e);){var r=Math.floor((n+1)*e),i=h(r,n-r+1)();i<=e?(t+=r,n-=r,e=(e-i)/(1-i)):(n=r-1,e/=i)}for(var o=e<.5,a=s(o?e:1-e),u=a(),c=0;u<=n;++c)u+=a();return t+(o?c:n-c)}}return e.source=t,e}(n),f1=function t(i){function n(n,t,e){var r=0==(n=+n)?function(t){return-Math.log(t)}:(n=1/n,function(t){return Math.pow(t,n)});return t=null==t?0:+t,e=null==e?1:+e,function(){return t+e*r(-Math.log1p(-i()))}}return n.source=t,n}(n),l1=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,function(){return t+n*Math.tan(Math.PI*e())}}return n.source=t,n}(n),s1=function t(r){function n(n,e){return n=null==n?0:+n,e=null==e?1:+e,function(){var t=r();return n+e*Math.log(t/(1-t))}}return n.source=t,n}(n),n=function t(u){var c=a1.source(u),f=c1.source(u);function n(a){return function(){for(var t=0,n=a;16<n;){var e=Math.floor(.875*n),r=c(e)();if(n<r)return t+f(e-1,n/r)();t+=e,n-=r}for(var i=-Math.log1p(-u()),o=0;i<=n;++o)i-=Math.log1p(-u());return t+o}}return n.source=t,n}(n),h1=1/4294967296;function d1(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function p1(t,n){switch(arguments.length){case 0:break;case 1:"function"==typeof t?this.interpolator(t):this.range(t);break;default:this.domain(t),"function"==typeof n?this.interpolator(n):this.range(n)}return this}var v1=Symbol("implicit");function y1(){var i=new ft,o=[],e=[],r=v1;function a(t){var n=i.get(t);if(void 0===n){if(r!==v1)return r;i.set(t,n=o.push(t)-1)}return e[n%e.length]}return a.domain=function(t){if(!arguments.length)return o.slice();o=[],i=new ft;var n,e=_createForOfIteratorHelper(t);try{for(e.s();!(n=e.n()).done;){var r=n.value;i.has(r)||i.set(r,o.push(r)-1)}}catch(t){e.e(t)}finally{e.f()}return a},a.range=function(t){return arguments.length?(e=Array.from(t),a):e.slice()},a.unknown=function(t){return arguments.length?(r=t,a):r},a.copy=function(){return y1(o,e).unknown(r)},d1.apply(a,arguments),a}function g1(){var i,o,t=y1().unknown(void 0),a=t.domain,u=t.range,c=0,f=1,l=!1,s=0,h=0,d=.5;function n(){var t=a().length,n=f<c,e=n?f:c,r=n?c:f,r=(i=(r-e)/Math.max(1,t-s+2*h),l&&(i=Math.floor(i)),e+=(r-e-i*(t-s))*d,o=i*(1-s),l&&(e=Math.round(e),o=Math.round(o)),$t(t).map(function(t){return e+i*t}));return u(n?r.reverse():r)}return delete t.unknown,t.domain=function(t){return(arguments.length?(a(t),n):a)()},t.range=function(t){return arguments.length?(t=_slicedToArray(t,2),c=+(c=t[0]),f=+(f=t[1]),n()):[c,f]},t.rangeRound=function(t){t=_slicedToArray(t,2);return c=+(c=t[0]),f=+(f=t[1]),l=!0,n()},t.bandwidth=function(){return o},t.step=function(){return i},t.round=function(t){return arguments.length?(l=!!t,n()):l},t.padding=function(t){return arguments.length?(s=Math.min(1,h=+t),n()):s},t.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),n()):s},t.paddingOuter=function(t){return arguments.length?(h=+t,n()):h},t.align=function(t){return arguments.length?(d=Math.max(0,Math.min(1,t)),n()):d},t.copy=function(){return g1(a(),[c,f]).round(l).paddingInner(s).paddingOuter(h).align(d)},d1.apply(n(),arguments)}function _1(t){return+t}var b1=[0,1];function m1(t){return t}function x1(n,e){return(e-=n=+n)?function(t){return(t-n)/e}:(t=isNaN(e)?NaN:.5,function(){return t});var t}function w1(t,n,e){var r=t[0],t=t[1],i=n[0],n=n[1],i=t<r?(r=x1(t,r),e(n,i)):(r=x1(r,t),e(i,n));return function(t){return i(r(t))}}function M1(e,t,n){var r=Math.min(e.length,t.length)-1,i=new Array(r),o=new Array(r),a=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++a<r;)i[a]=x1(e[a],e[a+1]),o[a]=n(t[a],t[a+1]);return function(t){var n=Z(e,t,1,r)-1;return o[n](i[n](t))}}function k1(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function T1(){var e,r,n,i,o,a,u=b1,c=b1,f=ri,l=m1;function s(){var n,e,t,r=Math.min(u.length,c.length);return l!==m1&&(n=u[0],(e=u[r-1])<n&&(t=n,n=e,e=t),l=function(t){return Math.max(n,Math.min(e,t))}),i=2<r?M1:w1,o=a=null,h}function h(t){return null==t||isNaN(t=+t)?n:(o=o||i(u.map(e),c,f))(e(l(t)))}return h.invert=function(t){return l(r((a=a||i(c,u.map(e),$r))(t)))},h.domain=function(t){return arguments.length?(u=Array.from(t,_1),s()):u.slice()},h.range=function(t){return arguments.length?(c=Array.from(t),s()):c.slice()},h.rangeRound=function(t){return c=Array.from(t),f=ii,s()},h.clamp=function(t){return arguments.length?(l=!!t||m1,s()):l!==m1},h.interpolate=function(t){return arguments.length?(f=t,s()):f},h.unknown=function(t){return arguments.length?(n=t,h):n},function(t,n){return e=t,r=n,s()}}function A1(){return T1()(m1,m1)}function S1(t,n,e,r){var i,o=jt(t,n,e);switch((r=xc(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=Pc(o,a))||(r.precision=i),u.formatPrefix(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=Ic(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=Cc(o))||(r.precision=i-2*("%"===r.type))}return u.format(r)}function E1(f){var l=f.domain;return f.ticks=function(t){var n=l();return It(n[0],n[n.length-1],null==t?10:t)},f.tickFormat=function(t,n){var e=l();return S1(e[0],e[e.length-1],null==t?10:t,n)},f.nice=function(t){null==t&&(t=10);var n,e,r=l(),i=0,o=r.length-1,a=r[i],u=r[o],c=10;for(u<a&&(e=a,a=u,u=e,e=i,i=o,o=e);0<c--;){if((e=Ft(a,u,t))===n)return r[i]=a,r[o]=u,l(r);if(0<e)a=Math.floor(a/e)*e,u=Math.ceil(u/e)*e;else{if(!(e<0))break;a=Math.ceil(a*e)/e,u=Math.floor(u*e)/e}n=e}return f},f}function N1(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t}function O1(t){return Math.log(t)}function C1(t){return Math.exp(t)}function P1(t){return-Math.log(-t)}function I1(t){return-Math.exp(-t)}function F1(t){return isFinite(t)?+("1e"+t):t<0?0:t}function j1(e){return function(t,n){return-e(-t,n)}}function z1(t){var l,s,i=t(O1,C1),h=i.domain,d=10;function n(){var n,e;return l=(e=d)===Math.E?Math.log:10===e&&Math.log10||2===e&&Math.log2||(e=Math.log(e),function(t){return Math.log(t)/e}),s=10===(n=d)?F1:n===Math.E?Math.exp:function(t){return Math.pow(n,t)},h()[0]<0?(l=j1(l),s=j1(s),t(P1,I1)):t(O1,C1),i}return i.base=function(t){return arguments.length?(d=+t,n()):d},i.domain=function(t){return(arguments.length?(h(t),n):h)()},i.ticks=function(t){var n,e,r=h(),i=r[0],o=r[r.length-1],r=o<i,a=(r&&(i=(c=[o,i])[0],o=c[1]),l(i)),u=l(o),c=null==t?10:+t,f=[];if(!(d%1)&&u-a<c){if(a=Math.floor(a),u=Math.ceil(u),0<i){for(;a<=u;++a)for(n=1;n<d;++n)if(!((e=a<0?n/s(-a):n*s(a))<i)){if(o<e)break;f.push(e)}}else for(;a<=u;++a)for(n=d-1;1<=n;--n)if(!((e=0<a?n/s(-a):n*s(a))<i)){if(o<e)break;f.push(e)}2*f.length<c&&(f=It(i,o,c))}else f=It(a,u,Math.min(u-a,c)).map(s);return r?f.reverse():f},i.tickFormat=function(t,e){var r;return null==t&&(t=10),"function"!=typeof(e=null==e?10===d?"s":",":e)&&(d%1||null!=(e=xc(e)).precision||(e.trim=!0),e=u.format(e)),t===1/0?e:(r=Math.max(1,d*t/i.ticks().length),function(t){var n=t/s(Math.round(l(t)));return n*d<d-.5&&(n*=d),n<=r?e(t):""})},i.nice=function(){return h(N1(h(),{floor:function(t){return s(Math.floor(l(t)))},ceil:function(t){return s(Math.ceil(l(t)))}}))},i}function R1(n){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/n))}}function H1(n){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*n}}function D1(n){var e=1,t=n(R1(e),H1(e));return t.constant=function(t){return arguments.length?n(R1(e=+t),H1(e)):e},E1(t)}function L1(n){return function(t){return t<0?-Math.pow(-t,n):Math.pow(t,n)}}function q1(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function U1(t){return t<0?-t*t:t*t}function B1(n){var t=n(m1,m1),e=1;return t.exponent=function(t){return arguments.length?1===(e=+t)?n(m1,m1):.5===e?n(q1,U1):n(L1(e),L1(1/e)):e},E1(t)}function Y1(){var t=B1(T1());return t.copy=function(){return k1(t,Y1()).exponent(t.exponent())},d1.apply(t,arguments),t}function G1(t){return Math.sign(t)*t*t}var X1=new Date,V1=new Date;function i(o,a,e,r){function u(t){return o(t=0===arguments.length?new Date:new Date(+t)),t}return u.floor=function(t){return o(t=new Date(+t)),t},u.ceil=function(t){return o(t=new Date(t-1)),a(t,1),o(t),t},u.round=function(t){var n=u(t),e=u.ceil(t);return t-n<e-t?n:e},u.offset=function(t,n){return a(t=new Date(+t),null==n?1:Math.floor(n)),t},u.range=function(t,n,e){var r,i=[];if(t=u.ceil(t),e=null==e?1:Math.floor(e),t<n&&0<e)for(;i.push(r=new Date(+t)),a(t,e),o(t),r<t&&t<n;);return i},u.filter=function(e){return i(function(t){if(t<=t)for(;o(t),!e(t);)t.setTime(t-1)},function(t,n){if(t<=t)if(n<0)for(;++n<=0;)for(;a(t,-1),!e(t););else for(;0<=--n;)for(;a(t,1),!e(t););})},e&&(u.count=function(t,n){return X1.setTime(+t),V1.setTime(+n),o(X1),o(V1),Math.floor(e(X1,V1))},u.every=function(n){return n=Math.floor(n),isFinite(n)&&0<n?1<n?u.filter(r?function(t){return r(t)%n==0}:function(t){return u.count(0,t)%n==0}):u:null}),u}var W1=i(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t}),Z1=(W1.every=function(e){return e=Math.floor(e),isFinite(e)&&0<e?1<e?i(function(t){t.setTime(Math.floor(t/e)*e)},function(t,n){t.setTime(+t+n*e)},function(t,n){return(n-t)/e}):W1:null},W1.range),K1=1e3,Q1=6e4,$1=36e5,J1=864e5,td=7*J1,nd=365*J1,ed=i(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+n*K1)},function(t,n){return(n-t)/K1},function(t){return t.getUTCSeconds()}),rd=ed.range,id=i(function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*K1)},function(t,n){t.setTime(+t+n*Q1)},function(t,n){return(n-t)/Q1},function(t){return t.getMinutes()}),od=id.range,ad=i(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Q1)},function(t,n){return(n-t)/Q1},function(t){return t.getUTCMinutes()}),ud=ad.range,cd=i(function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*K1-t.getMinutes()*Q1)},function(t,n){t.setTime(+t+n*$1)},function(t,n){return(n-t)/$1},function(t){return t.getHours()}),fd=cd.range,ld=i(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+n*$1)},function(t,n){return(n-t)/$1},function(t){return t.getUTCHours()}),sd=ld.range,hd=i(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Q1)/J1},function(t){return t.getDate()-1}),dd=hd.range,pd=i(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/J1},function(t){return t.getUTCDate()-1}),vd=pd.range,yd=i(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/J1},function(t){return Math.floor(t/J1)}),gd=yd.range;function _d(n){return i(function(t){t.setDate(t.getDate()-(t.getDay()+7-n)%7),t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Q1)/td})}var bd=_d(0),md=_d(1),xd=_d(2),wd=_d(3),Md=_d(4),kd=_d(5),Td=_d(6),Ad=bd.range,Sd=md.range,Ed=xd.range,Nd=wd.range,Od=Md.range,Cd=kd.range,Pd=Td.range;function Id(n){return i(function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-n)%7),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/td})}var Fd=Id(0),jd=Id(1),zd=Id(2),Rd=Id(3),Hd=Id(4),Dd=Id(5),Ld=Id(6),qd=Fd.range,Ud=jd.range,Bd=zd.range,Yd=Rd.range,Gd=Hd.range,Xd=Dd.range,Vd=Ld.range,Wd=i(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Zd=Wd.range,Kd=i(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Qd=Kd.range,$d=i(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}),Jd=($d.every=function(e){return isFinite(e=Math.floor(e))&&0<e?i(function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n*e)}):null},$d.range),tp=i(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}),np=(tp.every=function(e){return isFinite(e=Math.floor(e))&&0<e?i(function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)}):null},tp.range);function ep(o,t,n,e,r,i){var a=[[ed,1,K1],[ed,5,5e3],[ed,15,15e3],[ed,30,3e4],[i,1,Q1],[i,5,3e5],[i,15,9e5],[i,30,18e5],[r,1,$1],[r,3,3*$1],[r,6,6*$1],[r,12,432e5],[e,1,J1],[e,2,2*J1],[n,1,td],[t,1,2592e6],[t,3,7776e6],[o,1,nd]];function u(t,n,e){var r=Math.abs(n-t)/e,i=k(function(t){return _slicedToArray(t,3)[2]}).right(a,r);return i===a.length?o.every(jt(t/nd,n/nd,e)):0===i?W1.every(Math.max(jt(t,n,e),1)):(t=_slicedToArray(a[r/a[i-1][2]<a[i][2]/r?i-1:i],2))[0].every(t[1])}return[function(t,n,e){var r=n<t,i=(r&&(t=(i=[n,t])[0],n=i[1]),e&&"function"==typeof e.range?e:u(t,n,e)),e=i?i.range(t,+n+1):[];return r?e.reverse():e},u]}var rp=_slicedToArray(ep(tp,Kd,Fd,yd,ld,ad),2),ip=rp[0],op=rp[1],rp=_slicedToArray(ep($d,Wd,bd,hd,cd,id),2),ap=rp[0],up=rp[1];function cp(t){var n;return 0<=t.y&&t.y<100?((n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L)).setFullYear(t.y),n):new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function fp(t){var n;return 0<=t.y&&t.y<100?((n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L))).setUTCFullYear(t.y),n):new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function lp(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}function sp(t){var r=t.dateTime,i=t.date,o=t.time,n=t.periods,e=t.days,a=t.shortDays,u=t.months,c=t.shortMonths,f=gp(n),l=_p(n),s=gp(e),h=_p(e),d=gp(a),p=_p(a),v=gp(u),y=_p(u),g=gp(c),_=_p(c),b={a:function(t){return a[t.getDay()]},A:function(t){return e[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:Dp,e:Dp,f:Yp,g:nv,G:rv,H:Lp,I:qp,j:Up,L:Bp,m:Gp,M:Xp,p:function(t){return n[+(12<=t.getHours())]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Av,s:Sv,S:Vp,u:Wp,U:Zp,V:Qp,w:$p,W:Jp,x:null,X:null,y:tv,Y:ev,Z:iv,"%":Tv},m={a:function(t){return a[t.getUTCDay()]},A:function(t){return e[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:ov,e:ov,f:lv,g:xv,G:Mv,H:av,I:uv,j:cv,L:fv,m:sv,M:hv,p:function(t){return n[+(12<=t.getUTCHours())]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Av,s:Sv,S:dv,u:pv,U:vv,V:gv,w:_v,W:bv,x:null,X:null,y:mv,Y:wv,Z:kv,"%":Tv},x={a:function(t,n,e){n=d.exec(n.slice(e));return n?(t.w=p.get(n[0].toLowerCase()),e+n[0].length):-1},A:function(t,n,e){n=s.exec(n.slice(e));return n?(t.w=h.get(n[0].toLowerCase()),e+n[0].length):-1},b:function(t,n,e){n=g.exec(n.slice(e));return n?(t.m=_.get(n[0].toLowerCase()),e+n[0].length):-1},B:function(t,n,e){n=v.exec(n.slice(e));return n?(t.m=y.get(n[0].toLowerCase()),e+n[0].length):-1},c:function(t,n,e){return k(t,r,n,e)},d:Np,e:Np,f:jp,g:Tp,G:kp,H:Cp,I:Cp,j:Op,L:Fp,m:Ep,M:Pp,p:function(t,n,e){n=f.exec(n.slice(e));return n?(t.p=l.get(n[0].toLowerCase()),e+n[0].length):-1},q:Sp,Q:Rp,s:Hp,S:Ip,u:mp,U:xp,V:wp,w:bp,W:Mp,x:function(t,n,e){return k(t,i,n,e)},X:function(t,n,e){return k(t,o,n,e)},y:Tp,Y:kp,Z:Ap,"%":zp};function w(c,f){return function(t){var n,e,r,i=[],o=-1,a=0,u=c.length;for(t instanceof Date||(t=new Date(+t));++o<u;)37===c.charCodeAt(o)&&(i.push(c.slice(a,o)),null!=(e=dp[n=c.charAt(++o)])?n=c.charAt(++o):e="e"===n?" ":"0",(r=f[n])&&(n=r(t,e)),i.push(n),a=o+1);return i.push(c.slice(a,o)),i.join("")}}function M(i,o){return function(t){var n,e,r=lp(1900,void 0,1);if(k(r,i,t+="",0)!=t.length)return null;if("Q"in r)return new Date(r.Q);if("s"in r)return new Date(1e3*r.s+("L"in r?r.L:0));if(!o||"Z"in r||(r.Z=0),"p"in r&&(r.H=r.H%12+12*r.p),void 0===r.m&&(r.m="q"in r?r.q:0),"V"in r){if(r.V<1||53<r.V)return null;"w"in r||(r.w=1),"Z"in r?(n=4<(e=(n=fp(lp(r.y,0,1))).getUTCDay())||0===e?jd.ceil(n):jd(n),n=pd.offset(n,7*(r.V-1)),r.y=n.getUTCFullYear(),r.m=n.getUTCMonth(),r.d=n.getUTCDate()+(r.w+6)%7):(n=4<(e=(n=cp(lp(r.y,0,1))).getDay())||0===e?md.ceil(n):md(n),n=hd.offset(n,7*(r.V-1)),r.y=n.getFullYear(),r.m=n.getMonth(),r.d=n.getDate()+(r.w+6)%7)}else("W"in r||"U"in r)&&("w"in r||(r.w="u"in r?r.u%7:"W"in r?1:0),e="Z"in r?fp(lp(r.y,0,1)).getUTCDay():cp(lp(r.y,0,1)).getDay(),r.m=0,r.d="W"in r?(r.w+6)%7+7*r.W-(e+5)%7:r.w+7*r.U-(e+6)%7);return("Z"in r?(r.H+=r.Z/100|0,r.M+=r.Z%100,fp):cp)(r)}}function k(t,n,e,r){for(var i,o,a=0,u=n.length,c=e.length;a<u;){if(c<=r)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=x[i in dp?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return b.x=w(i,b),b.X=w(o,b),b.c=w(r,b),m.x=w(i,m),m.X=w(o,m),m.c=w(r,m),{format:function(t){var n=w(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}}}var hp,dp={"-":"",_:" ",0:"0"},r=/^\s*\d+/,pp=/^%/,vp=/[\\^$*+?|[\]().{}]/g;function o(t,n,e){var r=t<0?"-":"",t=(r?-t:t)+"",i=t.length;return r+(i<e?new Array(e-i+1).join(n)+t:t)}function yp(t){return t.replace(vp,"\\$&")}function gp(t){return new RegExp("^(?:"+t.map(yp).join("|")+")","i")}function _p(t){return new Map(t.map(function(t,n){return[t.toLowerCase(),n]}))}function bp(t,n,e){n=r.exec(n.slice(e,e+1));return n?(t.w=+n[0],e+n[0].length):-1}function mp(t,n,e){n=r.exec(n.slice(e,e+1));return n?(t.u=+n[0],e+n[0].length):-1}function xp(t,n,e){n=r.exec(n.slice(e,e+2));return n?(t.U=+n[0],e+n[0].length):-1}function wp(t,n,e){n=r.exec(n.slice(e,e+2));return n?(t.V=+n[0],e+n[0].length):-1}function Mp(t,n,e){n=r.exec(n.slice(e,e+2));return n?(t.W=+n[0],e+n[0].length):-1}function kp(t,n,e){n=r.exec(n.slice(e,e+4));return n?(t.y=+n[0],e+n[0].length):-1}function Tp(t,n,e){n=r.exec(n.slice(e,e+2));return n?(t.y=+n[0]+(68<+n[0]?1900:2e3),e+n[0].length):-1}function Ap(t,n,e){n=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return n?(t.Z=n[1]?0:-(n[2]+(n[3]||"00")),e+n[0].length):-1}function Sp(t,n,e){n=r.exec(n.slice(e,e+1));return n?(t.q=3*n[0]-3,e+n[0].length):-1}function Ep(t,n,e){n=r.exec(n.slice(e,e+2));return n?(t.m=n[0]-1,e+n[0].length):-1}function Np(t,n,e){n=r.exec(n.slice(e,e+2));return n?(t.d=+n[0],e+n[0].length):-1}function Op(t,n,e){n=r.exec(n.slice(e,e+3));return n?(t.m=0,t.d=+n[0],e+n[0].length):-1}function Cp(t,n,e){n=r.exec(n.slice(e,e+2));return n?(t.H=+n[0],e+n[0].length):-1}function Pp(t,n,e){n=r.exec(n.slice(e,e+2));return n?(t.M=+n[0],e+n[0].length):-1}function Ip(t,n,e){n=r.exec(n.slice(e,e+2));return n?(t.S=+n[0],e+n[0].length):-1}function Fp(t,n,e){n=r.exec(n.slice(e,e+3));return n?(t.L=+n[0],e+n[0].length):-1}function jp(t,n,e){n=r.exec(n.slice(e,e+6));return n?(t.L=Math.floor(n[0]/1e3),e+n[0].length):-1}function zp(t,n,e){n=pp.exec(n.slice(e,e+1));return n?e+n[0].length:-1}function Rp(t,n,e){n=r.exec(n.slice(e));return n?(t.Q=+n[0],e+n[0].length):-1}function Hp(t,n,e){n=r.exec(n.slice(e));return n?(t.s=+n[0],e+n[0].length):-1}function Dp(t,n){return o(t.getDate(),n,2)}function Lp(t,n){return o(t.getHours(),n,2)}function qp(t,n){return o(t.getHours()%12||12,n,2)}function Up(t,n){return o(1+hd.count($d(t),t),n,3)}function Bp(t,n){return o(t.getMilliseconds(),n,3)}function Yp(t,n){return Bp(t,n)+"000"}function Gp(t,n){return o(t.getMonth()+1,n,2)}function Xp(t,n){return o(t.getMinutes(),n,2)}function Vp(t,n){return o(t.getSeconds(),n,2)}function Wp(t){t=t.getDay();return 0===t?7:t}function Zp(t,n){return o(bd.count($d(t)-1,t),n,2)}function Kp(t){var n=t.getDay();return 4<=n||0===n?Md(t):Md.ceil(t)}function Qp(t,n){return t=Kp(t),o(Md.count($d(t),t)+(4===$d(t).getDay()),n,2)}function $p(t){return t.getDay()}function Jp(t,n){return o(md.count($d(t)-1,t),n,2)}function tv(t,n){return o(t.getFullYear()%100,n,2)}function nv(t,n){return o((t=Kp(t)).getFullYear()%100,n,2)}function ev(t,n){return o(t.getFullYear()%1e4,n,4)}function rv(t,n){var e=t.getDay();return o((t=4<=e||0===e?Md(t):Md.ceil(t)).getFullYear()%1e4,n,4)}function iv(t){t=t.getTimezoneOffset();return(0<t?"-":(t*=-1,"+"))+o(t/60|0,"0",2)+o(t%60,"0",2)}function ov(t,n){return o(t.getUTCDate(),n,2)}function av(t,n){return o(t.getUTCHours(),n,2)}function uv(t,n){return o(t.getUTCHours()%12||12,n,2)}function cv(t,n){return o(1+pd.count(tp(t),t),n,3)}function fv(t,n){return o(t.getUTCMilliseconds(),n,3)}function lv(t,n){return fv(t,n)+"000"}function sv(t,n){return o(t.getUTCMonth()+1,n,2)}function hv(t,n){return o(t.getUTCMinutes(),n,2)}function dv(t,n){return o(t.getUTCSeconds(),n,2)}function pv(t){t=t.getUTCDay();return 0===t?7:t}function vv(t,n){return o(Fd.count(tp(t)-1,t),n,2)}function yv(t){var n=t.getUTCDay();return 4<=n||0===n?Hd(t):Hd.ceil(t)}function gv(t,n){return t=yv(t),o(Hd.count(tp(t),t)+(4===tp(t).getUTCDay()),n,2)}function _v(t){return t.getUTCDay()}function bv(t,n){return o(jd.count(tp(t)-1,t),n,2)}function mv(t,n){return o(t.getUTCFullYear()%100,n,2)}function xv(t,n){return o((t=yv(t)).getUTCFullYear()%100,n,2)}function wv(t,n){return o(t.getUTCFullYear()%1e4,n,4)}function Mv(t,n){var e=t.getUTCDay();return o((t=4<=e||0===e?Hd(t):Hd.ceil(t)).getUTCFullYear()%1e4,n,4)}function kv(){return"+0000"}function Tv(){return"%"}function Av(t){return+t}function Sv(t){return Math.floor(+t/1e3)}function Ev(t){return hp=sp(t),u.timeFormat=hp.format,u.timeParse=hp.parse,u.utcFormat=hp.utcFormat,u.utcParse=hp.utcParse,hp}u.timeFormat=void 0,u.timeParse=void 0,u.utcFormat=void 0,u.utcParse=void 0,Ev({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});rp="%Y-%m-%dT%H:%M:%S.%LZ";var Nv=Date.prototype.toISOString?function(t){return t.toISOString()}:u.utcFormat(rp);rp=+new Date("2000-01-01T00:00:00.000Z")?function(t){return t=new Date(t),isNaN(t)?null:t}:u.utcParse(rp);function Ov(t){return new Date(t)}function Cv(t){return t instanceof Date?+t:+new Date(+t)}function Pv(e,r,n,i,o,a,u,c,f,l){var s=A1(),h=s.invert,d=s.domain,p=l(".%L"),v=l(":%S"),y=l("%I:%M"),g=l("%I %p"),_=l("%a %d"),b=l("%b %d"),m=l("%B"),x=l("%Y");function w(t){return(f(t)<t?p:c(t)<t?v:u(t)<t?y:a(t)<t?g:i(t)<t?o(t)<t?_:b:n(t)<t?m:x)(t)}return s.invert=function(t){return new Date(h(t))},s.domain=function(t){return arguments.length?d(Array.from(t,Cv)):d().map(Ov)},s.ticks=function(t){var n=d();return e(n[0],n[n.length-1],null==t?10:t)},s.tickFormat=function(t,n){return null==n?w:l(n)},s.nice=function(t){var n=d();return(t=t&&"function"==typeof t.range?t:r(n[0],n[n.length-1],null==t?10:t))?d(N1(n,t)):s},s.copy=function(){return k1(s,Pv(e,r,n,i,o,a,u,c,f,l))},s}function Iv(){var n,e,r,i,o,a=0,u=1,c=m1,f=!1;function l(t){return null==t||isNaN(t=+t)?o:c(0===r?.5:(t=(i(t)-n)*r,f?Math.max(0,Math.min(1,t)):t))}function t(e){return function(t){var n;return arguments.length?(n=(t=_slicedToArray(t,2))[0],c=e(n,t[1]),l):[c(0),c(1)]}}return l.domain=function(t){return arguments.length?(t=_slicedToArray(t,2),a=t[0],u=t[1],n=i(a=+a),e=i(u=+u),r=n===e?0:1/(e-n),l):[a,u]},l.clamp=function(t){return arguments.length?(f=!!t,l):f},l.interpolator=function(t){return arguments.length?(c=t,l):c},l.range=t(ri),l.rangeRound=t(ii),l.unknown=function(t){return arguments.length?(o=t,l):o},function(t){return n=(i=t)(a),e=t(u),r=n===e?0:1/(e-n),l}}function Fv(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function jv(){var t=B1(Iv());return t.copy=function(){return Fv(t,jv()).exponent(t.exponent())},p1.apply(t,arguments)}function zv(){var n,e,r,i,o,a,u,c=0,f=.5,l=1,s=1,h=m1,d=!1;function p(t){return isNaN(t=+t)?u:(t=.5+((t=+a(t))-e)*(s*t<s*e?i:o),h(d?Math.max(0,Math.min(1,t)):t))}function t(e){return function(t){var n;return arguments.length?(n=(t=_slicedToArray(t,3))[0],h=xi(e,[n,t[1],t[2]]),p):[h(0),h(.5),h(1)]}}return p.domain=function(t){return arguments.length?(t=_slicedToArray(t,3),c=t[0],f=t[1],l=t[2],n=a(c=+c),e=a(f=+f),r=a(l=+l),i=n===e?0:.5/(e-n),o=e===r?0:.5/(r-e),s=e<n?-1:1,p):[c,f,l]},p.clamp=function(t){return arguments.length?(d=!!t,p):d},p.interpolator=function(t){return arguments.length?(h=t,p):h},p.range=t(ri),p.rangeRound=t(ii),p.unknown=function(t){return arguments.length?(u=t,p):u},function(t){return n=(a=t)(c),e=t(f),r=t(l),i=n===e?0:.5/(e-n),o=e===r?0:.5/(r-e),s=e<n?-1:1,p}}function Rv(){var t=B1(zv());return t.copy=function(){return Fv(t,Rv()).exponent(t.exponent())},p1.apply(t,arguments)}function a(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e}function d(t){return Vr(t[t.length-1])}var Hv=a("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Dv=a("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Lv=a("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),qv=a("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0"),Uv=a("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Bv=a("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Yv=a("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Gv=a("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Xv=a("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Vv=a("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Wv=a("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),Zv=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(a),Kv=d(Zv),Qv=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(a),$v=d(Qv),Jv=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(a),ty=d(Jv),ny=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(a),ey=d(ny),ry=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(a),iy=d(ry),oy=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(a),ay=d(oy),uy=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(a),cy=d(uy),fy=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(a),ly=d(fy),sy=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(a),hy=d(sy),dy=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(a),py=d(dy),vy=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(a),yy=d(vy),gy=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(a),_y=d(gy),by=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(a),my=d(by),xy=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(a),wy=d(xy),My=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(a),ky=d(My),Ty=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(a),Ay=d(Ty),Sy=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(a),Ey=d(Sy),Ny=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(a),Oy=d(Ny),Cy=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(a),Py=d(Cy),Iy=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(a),Fy=d(Iy),jy=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(a),zy=d(jy),Ry=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(a),Hy=d(Ry),Dy=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(a),Ly=d(Dy),qy=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(a),Uy=d(qy),By=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(a),Yy=d(By),Gy=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(a),Xy=d(Gy),Vy=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(a),Wy=d(Vy);var Zy=mi(zr(300,.5,0),zr(-240,.5,1)),Ky=mi(zr(-100,.75,.35),zr(80,1.5,.8)),Qy=mi(zr(260,.75,.35),zr(80,1.5,.8)),$y=zr();var Jy=Ke(),t2=Math.PI/3,n2=2*Math.PI/3;function e2(n){var e=n.length;return function(t){return n[Math.max(0,Math.min(e-1,Math.floor(t*e)))]}}var r2=e2(a("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),i2=e2(a("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),o2=e2(a("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),a2=e2(a("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function b(t){return function(){return t}}var u2=Math.abs,D=Math.atan2,c2=Math.cos,f2=Math.max,l2=Math.min,s2=Math.sin,L=Math.sqrt,Y=1e-12,h2=Math.PI,d2=h2/2,p2=2*h2;function v2(t){return 1<=t?d2:t<=-1?-d2:Math.asin(t)}function y2(e){var r=3;return e.digits=function(t){if(!arguments.length)return r;if(null==t)r=null;else{var n=Math.floor(t);if(!(0<=n))throw new RangeError("invalid digits: ".concat(t));r=n}return e},function(){return new xa(r)}}function g2(t){return t.innerRadius}function _2(t){return t.outerRadius}function b2(t){return t.startAngle}function m2(t){return t.endAngle}function x2(t){return t&&t.padAngle}function w2(t,n,e,r,i,o,a){var u=t-e,c=n-r,a=(a?o:-o)/L(u*u+c*c),c=a*c,a=-a*u,u=t+c,t=n+a,n=e+c,e=r+a,r=(u+n)/2,f=(t+e)/2,l=n-u,s=e-t,h=l*l+s*s,o=i-o,u=u*e-n*t,e=(s<0?-1:1)*L(f2(0,o*o*h-u*u)),n=(u*s-l*e)/h,t=(-u*l-s*e)/h,d=(u*s+l*e)/h,u=(-u*l+s*e)/h,l=n-r,s=t-f,e=d-r,h=u-f;return e*e+h*h<l*l+s*s&&(n=d,t=u),{cx:n,cy:t,x01:-c,y01:-a,x11:n*(i/o-1),y11:t*(i/o-1)}}var M2=Array.prototype.slice;function k2(t){return"object"===_typeof(t)&&"length"in t?t:Array.from(t)}function T2(t){this._context=t}function A2(t){return new T2(t)}function S2(t){return t[0]}function E2(t){return t[1]}function N2(a,u){var c=b(!0),f=null,l=A2,s=null,h=y2(n);function n(t){var n,e,r,i=(t=k2(t)).length,o=!1;for(null==f&&(s=l(r=h())),n=0;n<=i;++n)!(n<i&&c(e=t[n],n,t))===o&&((o=!o)?s.lineStart():s.lineEnd()),o&&s.point(+a(e,n,t),+u(e,n,t));if(r)return s=null,r+""||null}return a="function"==typeof a?a:void 0===a?S2:b(a),u="function"==typeof u?u:void 0===u?E2:b(u),n.x=function(t){return arguments.length?(a="function"==typeof t?t:b(+t),n):a},n.y=function(t){return arguments.length?(u="function"==typeof t?t:b(+t),n):u},n.defined=function(t){return arguments.length?(c="function"==typeof t?t:b(!!t),n):c},n.curve=function(t){return arguments.length?(l=t,null!=f&&(s=l(f)),n):l},n.context=function(t){return arguments.length?(null==t?f=s=null:s=l(f=t),n):f},n}function O2(l,s,h){var d=null,p=b(!0),v=null,y=A2,g=null,_=y2(n);function n(t){var n,e,r,i,o,a=(t=k2(t)).length,u=!1,c=new Array(a),f=new Array(a);for(null==v&&(g=y(o=_())),n=0;n<=a;++n){if(!(n<a&&p(i=t[n],n,t))===u)if(u=!u)e=n,g.areaStart(),g.lineStart();else{for(g.lineEnd(),g.lineStart(),r=n-1;e<=r;--r)g.point(c[r],f[r]);g.lineEnd(),g.areaEnd()}u&&(c[n]=+l(i,n,t),f[n]=+s(i,n,t),g.point(d?+d(i,n,t):c[n],h?+h(i,n,t):f[n]))}if(o)return g=null,o+""||null}function t(){return N2().defined(p).curve(y).context(v)}return l="function"==typeof l?l:void 0===l?S2:b(+l),s="function"==typeof s?s:b(void 0===s?0:+s),h="function"==typeof h?h:void 0===h?E2:b(+h),n.x=function(t){return arguments.length?(l="function"==typeof t?t:b(+t),d=null,n):l},n.x0=function(t){return arguments.length?(l="function"==typeof t?t:b(+t),n):l},n.x1=function(t){return arguments.length?(d=null==t?null:"function"==typeof t?t:b(+t),n):d},n.y=function(t){return arguments.length?(s="function"==typeof t?t:b(+t),h=null,n):s},n.y0=function(t){return arguments.length?(s="function"==typeof t?t:b(+t),n):s},n.y1=function(t){return arguments.length?(h=null==t?null:"function"==typeof t?t:b(+t),n):h},n.lineX0=n.lineY0=function(){return t().x(l).y(s)},n.lineY1=function(){return t().x(l).y(h)},n.lineX1=function(){return t().x(d).y(s)},n.defined=function(t){return arguments.length?(p="function"==typeof t?t:b(!!t),n):p},n.curve=function(t){return arguments.length?(y=t,null!=v&&(g=y(v)),n):y},n.context=function(t){return arguments.length?(null==t?v=g=null:g=y(v=t),n):v},n}function C2(t,n){return n<t?-1:t<n?1:t<=n?0:NaN}function P2(t){return t}T2.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var I2=j2(A2);function F2(t){this._curve=t}function j2(n){function t(t){return new F2(n(t))}return t._curve=n,t}function z2(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(j2(t)):n()._curve},t}function R2(){return z2(N2().curve(I2))}function H2(){var t=O2().curve(I2),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return z2(e())},delete t.lineX0,t.lineEndAngle=function(){return z2(r())},delete t.lineX1,t.lineInnerRadius=function(){return z2(i())},delete t.lineY0,t.lineOuterRadius=function(){return z2(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(j2(t)):n()._curve},t}function D2(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}F2.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var L2=(()=>_createClass(function t(n,e){_classCallCheck(this,t),this._context=n,this._x=e},[{key:"areaStart",value:function(){this._line=0}},{key:"areaEnd",value:function(){this._line=NaN}},{key:"lineStart",value:function(){this._point=0}},{key:"lineEnd",value:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line}},{key:"point",value:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._x?this._context.bezierCurveTo(this._x0=(this._x0+t)/2,this._y0,this._x0,n,t,n):this._context.bezierCurveTo(this._x0,this._y0=(this._y0+n)/2,t,this._y0,t,n)}this._x0=t,this._y0=n}}]))(),q2=(()=>_createClass(function t(n){_classCallCheck(this,t),this._context=n},[{key:"lineStart",value:function(){this._point=0}},{key:"lineEnd",value:function(){}},{key:"point",value:function(t,n){var e,r,i,o,a;t=+t,n=+n,0===this._point?this._point=1:(r=D2(this._x0,this._y0),i=D2(this._x0,this._y0=(this._y0+n)/2),o=D2(t,this._y0),a=D2(t,n),(e=this._context).moveTo.apply(e,_toConsumableArray(r)),(e=this._context).bezierCurveTo.apply(e,_toConsumableArray(i).concat(_toConsumableArray(o),_toConsumableArray(a)))),this._x0=t,this._y0=n}}]))();function U2(t){return new L2(t,!0)}function B2(t){return new L2(t,!1)}function Y2(t){return new q2(t)}function G2(t){return t.source}function X2(t){return t.target}function V2(i){var o=G2,a=X2,u=S2,c=E2,f=null,l=null,s=y2(n);function n(){var t,n=M2.call(arguments),e=o.apply(this,n),r=a.apply(this,n);if((l=null==f?i(t=s()):l).lineStart(),n[0]=e,l.point(+u.apply(this,n),+c.apply(this,n)),n[0]=r,l.point(+u.apply(this,n),+c.apply(this,n)),l.lineEnd(),t)return l=null,t+""||null}return n.source=function(t){return arguments.length?(o=t,n):o},n.target=function(t){return arguments.length?(a=t,n):a},n.x=function(t){return arguments.length?(u="function"==typeof t?t:b(+t),n):u},n.y=function(t){return arguments.length?(c="function"==typeof t?t:b(+t),n):c},n.context=function(t){return arguments.length?(null==t?f=l=null:l=i(f=t),n):f},n}var W2=L(3),Z2={draw:function(t,n){var n=.59436*L(n+l2(n/28,.75)),e=n/2,r=e*W2;t.moveTo(0,n),t.lineTo(0,-n),t.moveTo(-r,-e),t.lineTo(r,e),t.moveTo(-r,e),t.lineTo(r,-e)}},K2={draw:function(t,n){n=L(n/h2);t.moveTo(n,0),t.arc(0,0,n,0,p2)}},Q2={draw:function(t,n){n=L(n/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},$2=L(1/3),J2=2*$2,tg={draw:function(t,n){var n=L(n/J2),e=n*$2;t.moveTo(0,-n),t.lineTo(e,0),t.lineTo(0,n),t.lineTo(-e,0),t.closePath()}},ng={draw:function(t,n){n=.62625*L(n);t.moveTo(0,-n),t.lineTo(n,0),t.lineTo(0,n),t.lineTo(-n,0),t.closePath()}},eg={draw:function(t,n){n=.87559*L(n-l2(n/7,2));t.moveTo(-n,0),t.lineTo(n,0),t.moveTo(0,n),t.lineTo(0,-n)}},rg={draw:function(t,n){var n=L(n),e=-n/2;t.rect(e,e,n,n)}},ig={draw:function(t,n){n=.4431*L(n);t.moveTo(n,n),t.lineTo(n,-n),t.lineTo(-n,-n),t.lineTo(-n,n),t.closePath()}},og=s2(h2/10)/s2(7*h2/10),ag=s2(p2/10)*og,ug=-c2(p2/10)*og,og={draw:function(t,n){var e=L(.8908130915292852*n),r=ag*e,i=ug*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var a=p2*o/5,u=c2(a),a=s2(a);t.lineTo(a*e,-u*e),t.lineTo(u*r-a*i,a*r+u*i)}t.closePath()}},cg=L(3),fg={draw:function(t,n){n=-L(n/(3*cg));t.moveTo(0,2*n),t.lineTo(-cg*n,-n),t.lineTo(cg*n,-n),t.closePath()}},lg=L(3),sg={draw:function(t,n){var n=.6824*L(n),e=n/2,r=n*lg/2;t.moveTo(0,-n),t.lineTo(r,e),t.lineTo(-r,e),t.closePath()}},hg=-.5,dg=L(3)/2,pg=1/L(12),vg=3*(pg/2+1),yg={draw:function(t,n){var n=L(n/vg),e=n/2,r=n*pg,i=e,n=n*pg+n,o=-i,a=n;t.moveTo(e,r),t.lineTo(i,n),t.lineTo(o,a),t.lineTo(hg*e-dg*r,dg*e+hg*r),t.lineTo(hg*i-dg*n,dg*i+hg*n),t.lineTo(hg*o-dg*a,dg*o+hg*a),t.lineTo(hg*e+dg*r,hg*r-dg*e),t.lineTo(hg*i+dg*n,hg*n-dg*i),t.lineTo(hg*o+dg*a,hg*a-dg*o),t.closePath()}},gg={draw:function(t,n){n=.6189*L(n-l2(n/6,1.7));t.moveTo(-n,-n),t.lineTo(n,n),t.moveTo(-n,n),t.lineTo(n,-n)}},_g=[K2,Q2,tg,rg,og,fg,yg],bg=[K2,eg,gg,sg,Z2,ig,ng];function mg(){}function xg(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function wg(t){this._context=t}function Mg(t){this._context=t}function kg(t){this._context=t}function Tg(t,n){this._basis=new wg(t),this._beta=n}wg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:xg(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:xg(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},Mg.prototype={areaStart:mg,areaEnd:mg,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:xg(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},kg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:xg(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},Tg.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(0<e)for(var r,i=t[0],o=n[0],a=t[e]-i,u=n[e]-o,c=-1;++c<=e;)this._basis.point(this._beta*t[c]+(1-this._beta)*(i+(r=c/e)*a),this._beta*n[c]+(1-this._beta)*(o+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var Ag=function n(e){function t(t){return 1===e?new wg(t):new Tg(t,e)}return t.beta=function(t){return n(+t)},t}(.85);function Sg(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Eg(t,n){this._context=t,this._k=(1-n)/6}Eg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Sg(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Sg(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Ng=function n(e){function t(t){return new Eg(t,e)}return t.tension=function(t){return n(+t)},t}(0);function Og(t,n){this._context=t,this._k=(1-n)/6}Og.prototype={areaStart:mg,areaEnd:mg,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Sg(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Cg=function n(e){function t(t){return new Og(t,e)}return t.tension=function(t){return n(+t)},t}(0);function Pg(t,n){this._context=t,this._k=(1-n)/6}Pg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Sg(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Ig=function n(e){function t(t){return new Pg(t,e)}return t.tension=function(t){return n(+t)},t}(0);function Fg(t,n,e){var r,i,o=t._x1,a=t._y1,u=t._x2,c=t._y2;Y<t._l01_a&&(o=(o*(r=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a)-t._x0*t._l12_2a+t._x2*t._l01_2a)/(i=3*t._l01_a*(t._l01_a+t._l12_a)),a=(a*r-t._y0*t._l12_2a+t._y2*t._l01_2a)/i),Y<t._l23_a&&(u=(u*(r=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a)+t._x1*t._l23_2a-n*t._l12_2a)/(i=3*t._l23_a*(t._l23_a+t._l12_a)),c=(c*r+t._y1*t._l23_2a-e*t._l12_2a)/i),t._context.bezierCurveTo(o,a,u,c,t._x2,t._y2)}function jg(t,n){this._context=t,this._alpha=n}jg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e,r;switch(t=+t,n=+n,this._point&&(e=this._x2-t,r=this._y2-n,this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))),this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Fg(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var zg=function n(e){function t(t){return e?new jg(t,e):new Eg(t,0)}return t.alpha=function(t){return n(+t)},t}(.5);function Rg(t,n){this._context=t,this._alpha=n}Rg.prototype={areaStart:mg,areaEnd:mg,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){var e,r;switch(t=+t,n=+n,this._point&&(e=this._x2-t,r=this._y2-n,this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))),this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Fg(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Hg=function n(e){function t(t){return e?new Rg(t,e):new Og(t,0)}return t.alpha=function(t){return n(+t)},t}(.5);function Dg(t,n){this._context=t,this._alpha=n}Dg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e,r;switch(t=+t,n=+n,this._point&&(e=this._x2-t,r=this._y2-n,this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))),this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Fg(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Lg=function n(e){function t(t){return e?new Dg(t,e):new Pg(t,0)}return t.alpha=function(t){return n(+t)},t}(.5);function qg(t){this._context=t}function Ug(t){return t<0?-1:1}function Bg(t,n,e){var r=t._x1-t._x0,n=n-t._x1,i=(t._y1-t._y0)/(r||n<0&&-0),e=(e-t._y1)/(n||r<0&&-0),t=(i*n+e*r)/(r+n);return(Ug(i)+Ug(e))*Math.min(Math.abs(i),Math.abs(e),.5*Math.abs(t))||0}function Yg(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Gg(t,n,e){var r=t._x0,i=t._x1,o=t._y1,a=(i-r)/3;t._context.bezierCurveTo(r+a,t._y0+a*n,i-a,o-a*e,i,o)}function Xg(t){this._context=t}function Vg(t){this._context=new Wg(t)}function Wg(t){this._context=t}function Zg(t){this._context=t}function Kg(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(o[i[0]=0]=2,a[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,a[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,a[n]-=e*a[n-1];for(i[r-1]=a[r-1]/o[r-1],n=r-2;0<=n;--n)i[n]=(a[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}function Qg(t,n){this._context=t,this._t=n}function $g(t,n){if(1<(i=t.length))for(var e,r,i,o=1,a=t[n[0]],u=a.length;o<i;++o)for(r=a,a=t[n[o]],e=0;e<u;++e)a[e][1]+=a[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}function Jg(t){for(var n=t.length,e=new Array(n);0<=--n;)e[n]=n;return e}function t_(t,n){return t[n]}function n_(t){var n=[];return n.key=t,n}function e_(t){var e=t.map(r_);return Jg(t).sort(function(t,n){return e[t]-e[n]})}function r_(t){for(var n,e=-1,r=0,i=t.length,o=-1/0;++e<i;)(n=+t[e][1])>o&&(o=n,r=e);return r}function i_(t){var e=t.map(o_);return Jg(t).sort(function(t,n){return e[t]-e[n]})}function o_(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}qg.prototype={areaStart:mg,areaEnd:mg,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},Xg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Gg(this,this._t0,Yg(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Gg(this,Yg(this,e=Bg(this,t,n)),e);break;default:Gg(this,this._t0,e=Bg(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Vg.prototype=Object.create(Xg.prototype)).point=function(t,n){Xg.prototype.point.call(this,n,t)},Wg.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},Zg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Kg(t),i=Kg(n),o=0,a=1;a<e;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],n[a]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},Qg.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),0<=this._line&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:var e;this._t<=0?(this._context.lineTo(this._x,n),this._context.lineTo(t,n)):(e=this._x*(1-this._t)+t*this._t,this._context.lineTo(e,this._y),this._context.lineTo(e,n))}this._x=t,this._y=n}};function a_(t){return function(){return t}}function u_(t,n){var e=n.sourceEvent;Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},target:{value:n.target,enumerable:!0,configurable:!0},transform:{value:n.transform,enumerable:!0,configurable:!0},_:{value:n.dispatch}})}function c_(t,n,e){this.k=t,this.x=n,this.y=e}c_.prototype={constructor:c_,scale:function(t){return 1===t?this:new c_(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new c_(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var f_=new c_(1,0,0);function l_(t){for(;!t.__zoom;)if(!(t=t.parentNode))return f_;return t.__zoom}function s_(t){t.stopImmediatePropagation()}function h_(t){t.preventDefault(),t.stopImmediatePropagation()}function d_(t){return!(t.ctrlKey&&"wheel"!==t.type||t.button)}function p_(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function v_(){return this.__zoom||f_}function y_(t){return-t.deltaY*(1===t.deltaMode?.05:t.deltaMode?1:.002)*(t.ctrlKey?10:1)}function g_(){return navigator.maxTouchPoints||"ontouchstart"in this}function __(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],n=t.invertY(n[1][1])-e[1][1];return t.translate(r<i?(r+i)/2:Math.min(0,r)||Math.max(0,i),o<n?(o+n)/2:Math.min(0,o)||Math.max(0,n))}l_.prototype=c_.prototype,u.Adder=S,u.Delaunay=fa,u.FormatSpecifier=wc,u.InternMap=ft,u.InternSet=lt,u.Node=c0,u.Path=xa,u.Voronoi=pu,u.ZoomTransform=c_,u.active=function(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>Gi&&e.name===n)return new so([[t]],jo,n,+r);return null},u.arc=function(){var E=g2,N=_2,O=b(0),C=null,P=b2,I=m2,F=x2,j=null,z=y2(n);function n(){var t,n,e,r,i,o,a,u,c,f,l,s,h,d,p,v,y,g,_,b,m,x,w=+E.apply(this,arguments),M=+N.apply(this,arguments),k=P.apply(this,arguments)-d2,T=I.apply(this,arguments)-d2,A=u2(T-k),S=k<T;if(j=j||(t=z()),M<w&&(n=M,M=w,w=n),Y<M?p2-Y<A?(j.moveTo(M*c2(k),M*s2(k)),j.arc(0,0,M,k,T,!S),Y<w&&(j.moveTo(w*c2(T),w*s2(T)),j.arc(0,0,w,T,k,S))):(r=n=k,i=e=T,a=o=A,l=F.apply(this,arguments)/2,h=Y<l&&(C?+C.apply(this,arguments):L(w*w+M*M)),x=m=u=l2(u2(M-w)/2,+O.apply(this,arguments)),Y<h&&(s=v2(h/w*s2(l)),h=v2(h/M*s2(l)),(o-=2*s)>Y?(r+=s*=S?1:-1,i-=s):(o=0,r=i=(k+T)/2),(a-=2*h)>Y?(n+=h*=S?1:-1,e-=h):(a=0,n=e=(k+T)/2)),l=M*c2(n),s=M*s2(n),h=w*c2(i),k=w*s2(i),Y<u&&(d=M*c2(e),p=M*s2(e),v=w*c2(r),y=w*s2(r),A<h2)&&((T=((t,n,e,r,i,o,a,u)=>{var c=(u=u-o)*(e=e-t)-(a=a-i)*(r=r-n);if(!(c*c<Y))return[t+(c=(a*(n-o)-u*(t-i))/c)*e,n+c*r]})(l,s,v,y,d,p,h,k))?(A=l-T[0],_=s-T[1],b=d-T[0],g=p-T[1],_=1/s2((1<(A=(A*b+_*g)/(L(A*A+_*_)*L(b*b+g*g)))?0:A<-1?h2:Math.acos(A))/2),b=L(T[0]*T[0]+T[1]*T[1]),m=l2(u,(w-b)/(_-1)),x=l2(u,(M-b)/(1+_))):m=x=0),Y<a?Y<x?(c=w2(v,y,l,s,M,x,S),f=w2(d,p,h,k,M,x,S),j.moveTo(c.cx+c.x01,c.cy+c.y01),x<u?j.arc(c.cx,c.cy,x,D(c.y01,c.x01),D(f.y01,f.x01),!S):(j.arc(c.cx,c.cy,x,D(c.y01,c.x01),D(c.y11,c.x11),!S),j.arc(0,0,M,D(c.cy+c.y11,c.cx+c.x11),D(f.cy+f.y11,f.cx+f.x11),!S),j.arc(f.cx,f.cy,x,D(f.y11,f.x11),D(f.y01,f.x01),!S))):(j.moveTo(l,s),j.arc(0,0,M,n,e,!S)):j.moveTo(l,s),Y<w&&Y<o?Y<m?(c=w2(h,k,d,p,w,-m,S),f=w2(l,s,v,y,w,-m,S),j.lineTo(c.cx+c.x01,c.cy+c.y01),m<u?j.arc(c.cx,c.cy,m,D(c.y01,c.x01),D(f.y01,f.x01),!S):(j.arc(c.cx,c.cy,m,D(c.y01,c.x01),D(c.y11,c.x11),!S),j.arc(0,0,w,D(c.cy+c.y11,c.cx+c.x11),D(f.cy+f.y11,f.cx+f.x11),S),j.arc(f.cx,f.cy,m,D(f.y11,f.x11),D(f.y01,f.x01),!S))):j.arc(0,0,w,i,r,S):j.lineTo(h,k)):j.moveTo(0,0),j.closePath(),t)return j=null,t+""||null}return n.centroid=function(){var t=(+E.apply(this,arguments)+ +N.apply(this,arguments))/2,n=(+P.apply(this,arguments)+ +I.apply(this,arguments))/2-h2/2;return[c2(n)*t,s2(n)*t]},n.innerRadius=function(t){return arguments.length?(E="function"==typeof t?t:b(+t),n):E},n.outerRadius=function(t){return arguments.length?(N="function"==typeof t?t:b(+t),n):N},n.cornerRadius=function(t){return arguments.length?(O="function"==typeof t?t:b(+t),n):O},n.padRadius=function(t){return arguments.length?(C=null==t?null:"function"==typeof t?t:b(+t),n):C},n.startAngle=function(t){return arguments.length?(P="function"==typeof t?t:b(+t),n):P},n.endAngle=function(t){return arguments.length?(I="function"==typeof t?t:b(+t),n):I},n.padAngle=function(t){return arguments.length?(F="function"==typeof t?t:b(+t),n):F},n.context=function(t){return arguments.length?(j=null==t?null:t,n):j},n},u.area=O2,u.areaRadial=H2,u.ascending=h,u.autoType=function(t){for(var n in t){var e,r,i=t[n].trim();if(i)if("true"===i)i=!0;else if("false"===i)i=!1;else if("NaN"===i)i=NaN;else if(isNaN(e=+i)){if(!(r=i.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;qu&&r[4]&&!r[7]&&(i=i.replace(/-/g,"/").replace(/T/," ")),i=new Date(i)}else i=e;else i=null;t[n]=i}return t},u.axisBottom=function(t){return bn(sn,t)},u.axisLeft=function(t){return bn(hn,t)},u.axisRight=function(t){return bn(ln,t)},u.axisTop=function(t){return bn(fn,t)},u.bin=Ht,u.bisect=Z,u.bisectCenter=W,u.bisectLeft=X,u.bisectRight=V,u.bisector=k,u.blob=function(t,n){return fetch(t,n).then(Uu)},u.blur=function(t,n){if(!(0<=(n=+n)))throw new RangeError("invalid r");var e,r=t.length;if(0<=(r=Math.floor(r)))return r&&n&&(n=nt(n),e=t.slice(),n(t,e,0,r,1),n(e,t,0,r,1),n(t,e,0,r,1)),t;throw new RangeError("invalid length")},u.blur2=K,u.blurImage=Q,u.brush=function(){return oa(Wo)},u.brushSelection=function(t){return(t=t.__brush)?t.dim.output(t.selection):null},u.brushX=function(){return oa(Xo)},u.brushY=function(){return oa(Vo)},u.buffer=function(t,n){return fetch(t,n).then(Bu)},u.chord=function(){return va(!1,!1)},u.chordDirected=function(){return va(!0,!1)},u.chordTranspose=function(){return va(!1,!0)},u.cluster=function(){var u=$h,c=1,f=1,l=!1;function n(n){var r,i=0,t=(n.eachAfter(function(t){var n,e=t.children;e?(t.x=(n=e).reduce(Jh,0)/n.length,t.y=1+e.reduce(t0,0)):(t.x=r?i+=u(t,r):0,t.y=0,r=t)}),(t=>{for(var n;n=t.children;)t=n[0];return t})(n)),e=(t=>{for(var n;n=t.children;)t=n[n.length-1];return t})(n),o=t.x-u(t,e)/2,a=e.x+u(e,t)/2;return n.eachAfter(l?function(t){t.x=(t.x-n.x)*c,t.y=(n.y-t.y)*f}:function(t){t.x=(t.x-o)/(a-o)*c,t.y=(1-(n.y?t.y/n.y:1))*f})}return n.separation=function(t){return arguments.length?(u=t,n):u},n.size=function(t){return arguments.length?(l=!1,c=+t[0],f=+t[1],n):l?null:[c,f]},n.nodeSize=function(t){return arguments.length?(l=!0,c=+t[0],f=+t[1],n):l?[c,f]:null},n},u.color=Xe,u.contourDensity=function(){var p=Ya,v=Ga,y=Xa,e=960,r=500,g=20,_=2,b=3*g,m=e+2*b>>_,x=r+2*b>>_,i=ja(20);function o(t){var n,e=new Float32Array(m*x),r=Math.pow(2,-_),i=-1,o=_createForOfIteratorHelper(t);try{for(o.s();!(n=o.n()).done;){var a,u,c,f,l=n.value,s=(p(l,++i,t)+b)*r,h=(v(l,i,t)+b)*r,d=+y(l,i,t);d&&0<=s&&s<m&&0<=h&&h<x&&(a=Math.floor(s),u=Math.floor(h),c=s-a-.5,f=h-u-.5,e[a+u*m]+=(1-c)*(1-f)*d,e[a+1+u*m]+=c*(1-f)*d,e[a+1+(u+1)*m]+=c*f*d,e[a+(u+1)*m]+=(1-c)*f*d)}}catch(t){o.e(t)}finally{o.f()}return K({data:e,width:m,height:x},g*r),e}function n(t){var t=o(t),e=i(t),n=Math.pow(2,2*_);return Array.isArray(e)||(e=It(Number.MIN_VALUE,Dt(t)/n,e)),Da().size([m,x]).thresholds(e.map(function(t){return t*n}))(t).map(function(t,n){return t.value=+e[n],a(t)})}function a(t){return t.coordinates.forEach(u),t}function u(t){t.forEach(c)}function c(t){t.forEach(f)}function f(t){t[0]=t[0]*Math.pow(2,_)-b,t[1]=t[1]*Math.pow(2,_)-b}function l(){return m=e+2*(b=3*g)>>_,x=r+2*b>>_,n}return n.contours=function(t){function n(t){var n=a(r.contour(e,(t=+t)*i));return n.value=t,n}var e=o(t),r=Da().size([m,x]),i=Math.pow(2,2*_);return Object.defineProperty(n,"max",{get:function(){return Dt(e)/i}}),n},n.x=function(t){return arguments.length?(p="function"==typeof t?t:ja(+t),n):p},n.y=function(t){return arguments.length?(v="function"==typeof t?t:ja(+t),n):v},n.weight=function(t){return arguments.length?(y="function"==typeof t?t:ja(+t),n):y},n.size=function(t){if(!arguments.length)return[e,r];var n=+t[0],t=+t[1];if(0<=n&&0<=t)return e=n,r=t,l();throw new Error("invalid size")},n.cellSize=function(t){if(!arguments.length)return 1<<_;if(1<=(t=+t))return _=Math.floor(Math.log(t)/Math.LN2),l();throw new Error("invalid cell size")},n.thresholds=function(t){return arguments.length?(i="function"==typeof t?t:Array.isArray(t)?ja(Ia.call(t)):ja(t),n):i},n.bandwidth=function(t){if(!arguments.length)return Math.sqrt(g*(g+1));if(0<=(t=+t))return g=(Math.sqrt(4*t*t+1)-1)/2,l();throw new Error("invalid bandwidth")},n},u.contours=Da,u.count=et,u.create=function(t){return q(Sn(t).call(document.documentElement))},u.creator=Sn,u.cross=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r,i="function"==typeof e[e.length-1]&&(r=e.pop(),function(t){return r.apply(void 0,_toConsumableArray(t))}),o=(e=e.map(ot)).map(rt),a=e.length-1,u=new Array(1+a).fill(0),c=[];if(a<0||o.some(it))return c;for(;;){c.push(u.map(function(t,n){return e[n][t]}));for(var f=a;++u[f]===o[f];){if(0===f)return i?c.map(i):c;u[f--]=0}}},u.csv=Vu,u.csvFormat=Ou,u.csvFormatBody=Cu,u.csvFormatRow=Iu,u.csvFormatRows=Pu,u.csvFormatValue=Su,u.csvParse=Eu,u.csvParseRows=Nu,u.cubehelix=zr,u.cumsum=function(n,e){var r=0,i=0;return Float64Array.from(n,void 0===e?function(t){return r+=+t||0}:function(t){return r+=+e(t,i++,n)||0})},u.curveBasis=function(t){return new wg(t)},u.curveBasisClosed=function(t){return new Mg(t)},u.curveBasisOpen=function(t){return new kg(t)},u.curveBumpX=U2,u.curveBumpY=B2,u.curveBundle=Ag,u.curveCardinal=Ng,u.curveCardinalClosed=Cg,u.curveCardinalOpen=Ig,u.curveCatmullRom=zg,u.curveCatmullRomClosed=Hg,u.curveCatmullRomOpen=Lg,u.curveLinear=A2,u.curveLinearClosed=function(t){return new qg(t)},u.curveMonotoneX=function(t){return new Xg(t)},u.curveMonotoneY=function(t){return new Vg(t)},u.curveNatural=function(t){return new Zg(t)},u.curveStep=function(t){return new Qg(t,.5)},u.curveStepAfter=function(t){return new Qg(t,1)},u.curveStepBefore=function(t){return new Qg(t,0)},u.descending=M,u.deviation=ut,u.difference=function(t){t=new lt(t);for(var n=arguments.length,e=new Array(1<n?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];for(var i=0,o=e;i<o.length;i++){var a,u=_createForOfIteratorHelper(o[i]);try{for(u.s();!(a=u.n()).done;){var c=a.value;t.delete(c)}}catch(t){u.e(t)}finally{u.f()}}return t},u.disjoint=function(t,n){var e,r,i,o,a=n[Symbol.iterator](),u=new lt,c=_createForOfIteratorHelper(t);try{for(c.s();!(e=c.n()).done;){var f=e.value;if(u.has(f))return!1;for(;r=(o=a.next()).value,i=o.done,o;){if(i)break;if(Object.is(f,r))return!1;u.add(r)}}}catch(t){c.e(t)}finally{c.f()}return!0},u.dispatch=xn,u.drag=function(){var e,r,i,o,u=Te,c=Ae,v=Se,n=Ee,y={},g=xn("start","drag","end"),_=0,a=0;function b(t){t.on("mousedown.drag",f).filter(n).on("touchstart.drag",h).on("touchmove.drag",d,ge).on("touchend.drag touchcancel.drag",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function f(t,n){!o&&u.call(this,t,n)&&(n=m(this,c.call(this,t,n),t,n,"mouse"))&&(q(t.view).on("mousemove.drag",l,_e).on("mouseup.drag",s,_e),xe(t.view),be(t),i=!1,e=t.clientX,r=t.clientY,n("start",t))}function l(t){var n;me(t),i||(n=t.clientX-e,i=a<n*n+(n=t.clientY-r)*n),y.mouse("drag",t)}function s(t){q(t.view).on("mousemove.drag mouseup.drag",null),we(t.view,i),me(t),y.mouse("end",t)}function h(t,n){if(u.call(this,t,n))for(var e,r=t.changedTouches,i=c.call(this,t,n),o=r.length,a=0;a<o;++a)(e=m(this,i,t,n,r[a].identifier,r[a]))&&(be(t),e("start",t,r[a]))}function d(t){for(var n,e=t.changedTouches,r=e.length,i=0;i<r;++i)(n=y[e[i].identifier])&&(me(t),n("drag",t,e[i]))}function p(t){var n,e,r=t.changedTouches,i=r.length;for(o&&clearTimeout(o),o=setTimeout(function(){o=null},500),n=0;n<i;++n)(e=y[r[n].identifier])&&(be(t),e("end",t,r[n]))}function m(a,u,t,c,f,n){var l,s,h,d=g.copy(),p=ye(n||t,u);if(null!=(h=v.call(a,new ke("beforestart",{sourceEvent:t,target:b,identifier:f,active:_,x:p[0],y:p[1],dx:0,dy:0,dispatch:d}),c)))return l=h.x-p[0]||0,s=h.y-p[1]||0,function t(n,e,r){var i,o=p;switch(n){case"start":y[f]=t,i=_++;break;case"end":delete y[f],--_;case"drag":p=ye(r||e,u),i=_}d.call(n,a,new ke(n,{sourceEvent:e,subject:h,target:b,identifier:f,active:i,x:p[0]+l,y:p[1]+s,dx:p[0]-o[0],dy:p[1]-o[1],dispatch:d}),c)}}return b.filter=function(t){return arguments.length?(u="function"==typeof t?t:Me(!!t),b):u},b.container=function(t){return arguments.length?(c="function"==typeof t?t:Me(t),b):c},b.subject=function(t){return arguments.length?(v="function"==typeof t?t:Me(t),b):v},b.touchable=function(t){return arguments.length?(n="function"==typeof t?t:Me(!!t),b):n},b.on=function(){var t=g.on.apply(g,arguments);return t===g?b:t},b.clickDistance=function(t){return arguments.length?(a=(t=+t)*t,b):Math.sqrt(a)},b},u.dragDisable=xe,u.dragEnable=we,u.dsv=function(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=Au(t);return Gu(n,e).then(function(t){return i.parse(t,r)})},u.dsvFormat=Au,u.easeBack=So,u.easeBackIn=Eo,u.easeBackInOut=So,u.easeBackOut=No,u.easeBounce=Ao,u.easeBounceIn=function(t){return 1-Ao(1-t)},u.easeBounceInOut=function(t){return((t*=2)<=1?1-Ao(1-t):Ao(t-1)+1)/2},u.easeBounceOut=Ao,u.easeCircle=ko,u.easeCircleIn=function(t){return 1-Math.sqrt(1-t*t)},u.easeCircleInOut=ko,u.easeCircleOut=function(t){return Math.sqrt(1- --t*t)},u.easeCubic=yo,u.easeCubicIn=function(t){return t*t*t},u.easeCubicInOut=yo,u.easeCubicOut=function(t){return--t*t*t+1},u.easeElastic=Po,u.easeElasticIn=Co,u.easeElasticInOut=Io,u.easeElasticOut=Po,u.easeExp=Mo,u.easeExpIn=function(t){return wo(1-+t)},u.easeExpInOut=Mo,u.easeExpOut=function(t){return 1-wo(t)},u.easeLinear=function(t){return+t},u.easePoly=_o,u.easePolyIn=po,u.easePolyInOut=_o,u.easePolyOut=go,u.easeQuad=vo,u.easeQuadIn=function(t){return t*t},u.easeQuadInOut=vo,u.easeQuadOut=function(t){return t*(2-t)},u.easeSin=xo,u.easeSinIn=function(t){return 1==+t?1:1-Math.cos(t*mo)},u.easeSinInOut=xo,u.easeSinOut=function(t){return Math.sin(t*mo)},u.every=function(t,n){if("function"!=typeof n)throw new TypeError("test is not a function");var e,r=-1,i=_createForOfIteratorHelper(t);try{for(i.s();!(e=i.n()).done;)if(!n(e.value,++r,t))return!1}catch(t){i.e(t)}finally{i.f()}return!0},u.extent=ct,u.fcumsum=function(n,e){var r=new S,i=-1;return Float64Array.from(n,void 0===e?function(t){return r.add(+t||0)}:function(t){return r.add(+e(t,++i,n)||0)})},u.filter=function(t,n){if("function"!=typeof n)throw new TypeError("test is not a function");var e,r=[],i=-1,o=_createForOfIteratorHelper(t);try{for(o.s();!(e=o.n()).done;){var a=e.value;n(a,++i,t)&&r.push(a)}}catch(t){o.e(t)}finally{o.f()}return r},u.flatGroup=function(t){for(var n=arguments.length,e=new Array(1<n?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return _t(gt.apply(void 0,[t].concat(e)),e)},u.flatRollup=function(t,n){for(var e=arguments.length,r=new Array(2<e?e-2:0),i=2;i<e;i++)r[i-2]=arguments[i];return _t(mt.apply(void 0,[t,n].concat(r)),r)},u.forceCenter=function(o,a){var u,c=1;function n(){for(var t,n=u.length,e=0,r=0,i=0;i<n;++i)e+=(t=u[i]).x,r+=t.y;for(e=(e/n-o)*c,r=(r/n-a)*c,i=0;i<n;++i)(t=u[i]).x-=e,t.y-=r}return null==o&&(o=0),null==a&&(a=0),n.initialize=function(t){u=t},n.x=function(t){return arguments.length?(o=+t,n):o},n.y=function(t){return arguments.length?(a=+t,n):a},n.strength=function(t){return arguments.length?(c=+t,n):c},n},u.forceCollide=function(r){var o,a,h,d=1,p=1;function n(){for(var t,n,u,c,f,l,s,e=o.length,r=0;r<p;++r)for(n=rc(o,uc,cc).visitAfter(v),t=0;t<e;++t)u=o[t],l=a[u.index],s=l*l,c=u.x+u.vx,f=u.y+u.vy,n.visit(i);function i(t,n,e,r,i){var o=t.data,t=t.r,a=l+t;if(!o)return c+a<n||r<c-a||f+a<e||i<f-a;o.index>u.index&&(e=(n=c-o.x-o.vx)*n+(r=f-o.y-o.vy)*r)<a*a&&(0===n&&(e+=(n=ac(h))*n),0===r&&(e+=(r=ac(h))*r),e=(a-(e=Math.sqrt(e)))/e*d,u.vx+=(n*=e)*(a=(t*=t)/(s+t)),u.vy+=(r*=e)*a,o.vx-=n*(a=1-a),o.vy-=r*a)}}function v(t){if(t.data)return t.r=a[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function e(){if(o){var t,n,e=o.length;for(a=new Array(e),t=0;t<e;++t)n=o[t],a[n.index]=+r(n,t,o)}}return"function"!=typeof r&&(r=y(null==r?1:+r)),n.initialize=function(t,n){o=t,h=n,e()},n.iterations=function(t){return arguments.length?(p=+t,n):p},n.strength=function(t){return arguments.length?(d=+t,n):d},n.radius=function(t){return arguments.length?(r="function"==typeof t?t:y(+t),e(),n):r},n},u.forceLink=function(f){var l,s,o,a,h,d,u=fc,e=function(t){return 1/Math.min(a[t.source.index],a[t.target.index])},r=y(30),p=1;function n(t){for(var n=0,e=f.length;n<p;++n)for(var r,i,o,a,u,c=0;c<e;++c)r=(i=f[c]).source,o=(i=i.target).x+i.vx-r.x-r.vx||ac(d),a=i.y+i.vy-r.y-r.vy||ac(d),o*=u=((u=Math.sqrt(o*o+a*a))-s[c])/u*t*l[c],a*=u,i.vx-=o*(u=h[c]),i.vy-=a*u,r.vx+=o*(u=1-u),r.vy+=a*u}function i(){if(o){var t,n=o.length,e=f.length,r=new Map(o.map(function(t,n){return[u(t,n,o),t]})),i=0;for(a=new Array(n);i<e;++i)(t=f[i]).index=i,"object"!==_typeof(t.source)&&(t.source=lc(r,t.source)),"object"!==_typeof(t.target)&&(t.target=lc(r,t.target)),a[t.source.index]=(a[t.source.index]||0)+1,a[t.target.index]=(a[t.target.index]||0)+1;for(i=0,h=new Array(e);i<e;++i)t=f[i],h[i]=a[t.source.index]/(a[t.source.index]+a[t.target.index]);l=new Array(e),c(),s=new Array(e),v()}}function c(){if(o)for(var t=0,n=f.length;t<n;++t)l[t]=+e(f[t],t,f)}function v(){if(o)for(var t=0,n=f.length;t<n;++t)s[t]=+r(f[t],t,f)}return null==f&&(f=[]),n.initialize=function(t,n){o=t,d=n,i()},n.links=function(t){return arguments.length?(f=t,i(),n):f},n.id=function(t){return arguments.length?(u=t,n):u},n.iterations=function(t){return arguments.length?(p=+t,n):p},n.strength=function(t){return arguments.length?(e="function"==typeof t?t:y(+t),c(),n):e},n.distance=function(t){return arguments.length?(r="function"==typeof t?t:y(+t),v(),n):r},n},u.forceManyBody=function(){var i,c,f,l,s,r=y(-30),h=1,d=1/0,p=.81;function n(t){var n,e=i.length,r=rc(i,pc,vc).visitAfter(o);for(l=t,n=0;n<e;++n)c=i[n],r.visit(a)}function e(){if(i){var t,n,e=i.length;for(s=new Array(e),t=0;t<e;++t)n=i[t],s[n.index]=+r(n,t,i)}}function o(t){var n,e,r,i,o,a=0,u=0;if(t.length){for(r=i=o=0;o<4;++o)(n=t[o])&&(e=Math.abs(n.value))&&(a+=n.value,u+=e,r+=e*n.x,i+=e*n.y);t.x=r/u,t.y=i/u}else for((n=t).x=n.data.x,n.y=n.data.y;a+=s[n.data.index],n=n.next;);t.value=a}function a(t,n,e,r){if(!t.value)return!0;var i=t.x-c.x,o=t.y-c.y,a=r-n,u=i*i+o*o;if(a*a/p<u)return u<d&&(0===i&&(u+=(i=ac(f))*i),0===o&&(u+=(o=ac(f))*o),u<h&&(u=Math.sqrt(h*u)),c.vx+=i*t.value*l/u,c.vy+=o*t.value*l/u),!0;if(!(t.length||d<=u))for((t.data!==c||t.next)&&(0===i&&(u+=(i=ac(f))*i),0===o&&(u+=(o=ac(f))*o),u<h)&&(u=Math.sqrt(h*u));t.data!==c&&(a=s[t.data.index]*l/u,c.vx+=i*a,c.vy+=o*a),t=t.next;);}return n.initialize=function(t,n){i=t,f=n,e()},n.strength=function(t){return arguments.length?(r="function"==typeof t?t:y(+t),e(),n):r},n.distanceMin=function(t){return arguments.length?(h=t*t,n):Math.sqrt(h)},n.distanceMax=function(t){return arguments.length?(d=t*t,n):Math.sqrt(d)},n.theta=function(t){return arguments.length?(p=t*t,n):Math.sqrt(p)},n},u.forceRadial=function(e,u,c){var f,l,s,r=y(.1);function n(t){for(var n=0,e=f.length;n<e;++n){var r=f[n],i=r.x-u||1e-6,o=r.y-c||1e-6,a=Math.sqrt(i*i+o*o),a=(s[n]-a)*l[n]*t/a;r.vx+=i*a,r.vy+=o*a}}function i(){if(f){var t,n=f.length;for(l=new Array(n),s=new Array(n),t=0;t<n;++t)s[t]=+e(f[t],t,f),l[t]=isNaN(s[t])?0:+r(f[t],t,f)}}return"function"!=typeof e&&(e=y(+e)),null==u&&(u=0),null==c&&(c=0),n.initialize=function(t){f=t,i()},n.strength=function(t){return arguments.length?(r="function"==typeof t?t:y(+t),i(),n):r},n.radius=function(t){return arguments.length?(e="function"==typeof t?t:y(+t),i(),n):e},n.x=function(t){return arguments.length?(u=+t,n):u},n.y=function(t){return arguments.length?(c=+t,n):c},n},u.forceSimulation=function(c){var o,t,a=1,n=.001,u=1-Math.pow(n,1/300),f=0,l=.6,s=new Map,e=zi(h),r=xn("tick","end"),i=(t=1,function(){return(t=(sc*t+hc)%dc)/dc});function h(){d(),r.call("tick",o),a<n&&(e.stop(),r.call("end",o))}function d(t){var n,e,r=c.length;void 0===t&&(t=1);for(var i=0;i<t;++i)for(a+=(f-a)*u,s.forEach(function(t){t(a)}),n=0;n<r;++n)null==(e=c[n]).fx?e.x+=e.vx*=l:(e.x=e.fx,e.vx=0),null==e.fy?e.y+=e.vy*=l:(e.y=e.fy,e.vy=0);return o}function p(){for(var t,n,e,r=0,i=c.length;r<i;++r)(e=c[r]).index=r,null!=e.fx&&(e.x=e.fx),null!=e.fy&&(e.y=e.fy),(isNaN(e.x)||isNaN(e.y))&&(t=10*Math.sqrt(.5+r),n=r*yc,e.x=t*Math.cos(n),e.y=t*Math.sin(n)),(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}function v(t){return t.initialize&&t.initialize(c,i),t}return null==c&&(c=[]),p(),o={tick:d,restart:function(){return e.restart(h),o},stop:function(){return e.stop(),o},nodes:function(t){return arguments.length?(c=t,p(),s.forEach(v),o):c},alpha:function(t){return arguments.length?(a=+t,o):a},alphaMin:function(t){return arguments.length?(n=+t,o):n},alphaDecay:function(t){return arguments.length?(u=+t,o):+u},alphaTarget:function(t){return arguments.length?(f=+t,o):f},velocityDecay:function(t){return arguments.length?(l=1-t,o):1-l},randomSource:function(t){return arguments.length?(i=t,s.forEach(v),o):i},force:function(t,n){return 1<arguments.length?(null==n?s.delete(t):s.set(t,v(n)),o):s.get(t)},find:function(t,n,e){var r,i,o,a=0,u=c.length;for(null==e?e=1/0:e*=e,a=0;a<u;++a)(r=(r=t-(i=c[a]).x)*r+(r=n-i.y)*r)<e&&(o=i,e=r);return o},on:function(t,n){return 1<arguments.length?(r.on(t,n),o):r.on(t)}}},u.forceX=function(e){var i,o,a,r=y(.1);function n(t){for(var n,e=0,r=i.length;e<r;++e)(n=i[e]).vx+=(a[e]-n.x)*o[e]*t}function u(){if(i){var t,n=i.length;for(o=new Array(n),a=new Array(n),t=0;t<n;++t)o[t]=isNaN(a[t]=+e(i[t],t,i))?0:+r(i[t],t,i)}}return"function"!=typeof e&&(e=y(null==e?0:+e)),n.initialize=function(t){i=t,u()},n.strength=function(t){return arguments.length?(r="function"==typeof t?t:y(+t),u(),n):r},n.x=function(t){return arguments.length?(e="function"==typeof t?t:y(+t),u(),n):e},n},u.forceY=function(e){var i,o,a,r=y(.1);function n(t){for(var n,e=0,r=i.length;e<r;++e)(n=i[e]).vy+=(a[e]-n.y)*o[e]*t}function u(){if(i){var t,n=i.length;for(o=new Array(n),a=new Array(n),t=0;t<n;++t)o[t]=isNaN(a[t]=+e(i[t],t,i))?0:+r(i[t],t,i)}}return"function"!=typeof e&&(e=y(null==e?0:+e)),n.initialize=function(t){i=t,u()},n.strength=function(t){return arguments.length?(r="function"==typeof t?t:y(+t),u(),n):r},n.y=function(t){return arguments.length?(e="function"==typeof t?t:y(+t),u(),n):e},n},u.formatDefaultLocale=Oc,u.formatLocale=Nc,u.formatSpecifier=xc,u.fsum=function(t,n){var e=new S;if(void 0===n){var r,i,o=_createForOfIteratorHelper(t);try{for(o.s();!(r=o.n()).done;)(i=+r.value)&&e.add(i)}catch(t){o.e(t)}finally{o.f()}}else{var a,u,c=-1,f=_createForOfIteratorHelper(t);try{for(f.s();!(a=f.n()).done;)(u=+n(a.value,++c,t))&&e.add(u)}catch(t){f.e(t)}finally{f.f()}}return+e},u.geoAlbers=Oh,u.geoAlbersUsa=function(){var n,e,i,o,a,r,u=Oh(),c=Nh().rotate([154,0]).center([-2,58.5]).parallels([55,65]),f=Nh().rotate([157,0]).center([-3,19.9]).parallels([8,18]),l={point:function(t,n){r=[t,n]}};function s(t){var n=t[0],t=t[1];return r=null,i.point(n,t),r||(o.point(n,t),r)||(a.point(n,t),r)}function h(){return n=e=null,s}return s.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,e=(t[1]-e[1])/n;return(.12<=e&&e<.234&&-.425<=r&&r<-.214?c:.166<=e&&e<.234&&-.214<=r&&r<-.115?f:u).invert(t)},s.stream=function(t){return n&&e===t?n:(r=[u.stream(e=t),c.stream(t),f.stream(t)],i=r.length,n={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},s.precision=function(t){return arguments.length?(u.precision(t),c.precision(t),f.precision(t),h()):u.precision()},s.scale=function(t){return arguments.length?(u.scale(t),c.scale(.35*t),f.scale(t),s.translate(u.translate())):u.scale()},s.translate=function(t){var n,e,r;return arguments.length?(n=u.scale(),e=+t[0],r=+t[1],i=u.translate(t).clipExtent([[e-.455*n,r-.238*n],[e+.455*n,r+.238*n]]).stream(l),o=c.translate([e-.307*n,r+.201*n]).clipExtent([[e-.425*n+O,r+.12*n+O],[e-.214*n-O,r+.234*n-O]]).stream(l),a=f.translate([e-.205*n,r+.212*n]).clipExtent([[e-.214*n+O,r+.166*n+O],[e-.115*n-O,r+.234*n-O]]).stream(l),h()):u.translate()},s.fitExtent=function(t,n){return yh(s,t,n)},s.fitSize=function(t,n){return gh(s,t,n)},s.fitWidth=function(t,n){return _h(s,t,n)},s.fitHeight=function(t,n){return bh(s,t,n)},s.scale(1070)},u.geoArea=function(t){return gf=new S,tf(t,_f),2*gf},u.geoAzimuthalEqualArea=function(){return Th(Ih).scale(124.75).clipAngle(179.999)},u.geoAzimuthalEqualAreaRaw=Ih,u.geoAzimuthalEquidistant=function(){return Th(Fh).scale(79.4188).clipAngle(179.999)},u.geoAzimuthalEquidistantRaw=Fh,u.geoBounds=function(t){var n,e,r,i,o,a,u;if(cf=s=-(l=uf=1/0),pf=[],tf(t,Xf),e=pf.length){for(pf.sort(nl),n=1,o=[r=pf[0]];n<e;++n)el(r,(i=pf[n])[0])||el(r,i[1])?(tl(r[0],i[1])>tl(r[0],r[1])&&(r[1]=i[1]),tl(i[0],r[1])>tl(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(a=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)(u=tl(r[1],(i=o[n])[0]))>a&&(a=u,l=i[0],s=r[1])}return pf=vf=null,l===1/0||uf===1/0?[[NaN,NaN],[NaN,NaN]]:[[l,uf],[s,cf]]},u.geoCentroid=function(t){Of=Cf=Pf=If=Ff=jf=zf=Rf=0,Hf=new S,Df=new S,Lf=new S,tf(t,rl);var n=+Df,e=+Lf,r=qc(t=+Hf,n,e);return r<Fc&&(t=jf,n=zf,e=Rf,Cf<O&&(t=Pf,n=If,e=Ff),(r=qc(t,n,e))<Fc)?[NaN,NaN]:[Hc(n,t)*I,Vc(e/r)*I]},u.geoCircle=function(){var r,i,o=pl([0,0]),a=pl(90),u=pl(2),c={point:function(t,n){r.push(t=i(t,n)),t[0]*=I,t[1]*=I}};function n(){var t=o.apply(this,arguments),n=a.apply(this,arguments)*F,e=u.apply(this,arguments)*F;return r=[],i=gl(-t[0]*F,-t[1]*F,0).invert,wl(c,n,e,1),t={type:"Polygon",coordinates:[r]},r=i=null,t}return n.center=function(t){return arguments.length?(o="function"==typeof t?t:pl([+t[0],+t[1]]),n):o},n.radius=function(t){return arguments.length?(a="function"==typeof t?t:pl(+t),n):a},n.precision=function(t){return arguments.length?(u="function"==typeof t?t:pl(+t),n):u},n},u.geoClipAntimeridian=Fl,u.geoClipCircle=jl,u.geoClipExtent=function(){var n,e,r,i=0,o=0,a=960,u=500;return r={stream:function(t){return n&&e===t?n:n=Ul(i,o,a,u)(e=t)},extent:function(t){return arguments.length?(i=+t[0][0],o=+t[0][1],a=+t[1][0],u=+t[1][1],n=e=null,r):[[i,o],[a,u]]}}},u.geoClipRectangle=Ul,u.geoConicConformal=function(){return Sh(Hh).scale(109.5).parallels([30,30])},u.geoConicConformalRaw=Hh,u.geoConicEqualArea=Nh,u.geoConicEqualAreaRaw=Eh,u.geoConicEquidistant=function(){return Sh(Lh).scale(131.154).center([0,13.9389])},u.geoConicEquidistantRaw=Lh,u.geoContains=function(t,n){return(t&&Ql.hasOwnProperty(t.type)?Ql[t.type]:Jl)(t,n)},u.geoDistance=Kl,u.geoEqualEarth=function(){return Th(Xh).scale(177.158)},u.geoEqualEarthRaw=Xh,u.geoEquirectangular=function(){return Th(Dh).scale(152.63)},u.geoEquirectangularRaw=Dh,u.geoGnomonic=function(){return Th(Vh).scale(144.049).clipAngle(60)},u.geoGnomonicRaw=Vh,u.geoGraticule=us,u.geoGraticule10=function(){return us()()},u.geoIdentity=function(){var r,i,n,e,o,a,u,c=1,f=0,l=0,s=1,h=1,d=0,p=null,v=1,y=1,g=dh({point:function(t,n){t=m([t,n]);this.stream.point(t[0],t[1])}}),_=cs;function b(){return v=c*s,y=c*h,a=u=null,m}function m(t){var n,e=t[0]*v,t=t[1]*y;return d&&(n=t*r-e*i,e=e*r+t*i,t=n),[e+f,t+l]}return m.invert=function(t){var n,e=t[0]-f,t=t[1]-l;return d&&(n=t*r+e*i,e=e*r-t*i,t=n),[e/v,t/y]},m.stream=function(t){return a&&u===t?a:a=g(_(u=t))},m.postclip=function(t){return arguments.length?(_=t,p=n=e=o=null,b()):_},m.clipExtent=function(t){return arguments.length?(_=null==t?(p=n=e=o=null,cs):Ul(p=+t[0][0],n=+t[0][1],e=+t[1][0],o=+t[1][1]),b()):null==p?null:[[p,n],[e,o]]},m.scale=function(t){return arguments.length?(c=+t,b()):c},m.translate=function(t){return arguments.length?(f=+t[0],l=+t[1],b()):[f,l]},m.angle=function(t){return arguments.length?(i=R(d=t%360*F),r=z(d),b()):d*I},m.reflectX=function(t){return arguments.length?(s=t?-1:1,b()):s<0},m.reflectY=function(t){return arguments.length?(h=t?-1:1,b()):h<0},m.fitExtent=function(t,n){return yh(m,t,n)},m.fitSize=function(t,n){return gh(m,t,n)},m.fitWidth=function(t,n){return _h(m,t,n)},m.fitHeight=function(t,n){return bh(m,t,n)},m},u.geoInterpolate=function(t,n){var e=t[0]*F,r=t[1]*F,t=n[0]*F,n=n[1]*F,i=z(r),o=R(r),a=z(n),u=R(n),c=i*z(e),f=i*R(e),l=a*z(t),s=a*R(t),h=2*Vc(H(Wc(n-r)+i*a*Wc(t-e))),d=R(h);return(n=h?function(t){var n=R(t*=h)/d,t=R(h-t)/d,e=t*c+n*l,r=t*f+n*s,t=t*o+n*u;return[Hc(r,e)*I,Hc(t,H(e*e+r*r))*I]}:function(){return[e*I,r*I]}).distance=h,n},u.geoLength=Vl,u.geoMercator=function(){return zh(jh).scale(961/zc)},u.geoMercatorRaw=jh,u.geoNaturalEarth1=function(){return Th(Wh).scale(175.295)},u.geoNaturalEarth1Raw=Wh,u.geoOrthographic=function(){return Th(Zh).scale(249.5).clipAngle(90+O)},u.geoOrthographicRaw=Zh,u.geoPath=function(n,e){var r,i,o=3,a=4.5;function u(t){return t&&("function"==typeof a&&i.pointRadius(+a.apply(this,arguments)),tf(t,r(i))),i.result()}return u.area=function(t){return tf(t,r(ms)),ms.result()},u.measure=function(t){return tf(t,r(lh)),lh.result()},u.bounds=function(t){return tf(t,r(Ns)),Ns.result()},u.centroid=function(t){return tf(t,r(Zs)),Zs.result()},u.projection=function(t){return arguments.length?(r=null==t?(n=null,cs):(n=t).stream,u):n},u.context=function(t){return arguments.length?(i=null==t?(e=null,new sh(o)):new Ks(e=t),"function"!=typeof a&&i.pointRadius(a),u):e},u.pointRadius=function(t){return arguments.length?(a="function"==typeof t?t:(i.pointRadius(+t),+t),u):a},u.digits=function(t){if(!arguments.length)return o;if(null==t)o=null;else{var n=Math.floor(t);if(!(0<=n))throw new RangeError("invalid digits: ".concat(t));o=n}return null===e&&(i=new sh(o)),u},u.projection(n).digits(o).context(e)},u.geoProjection=Th,u.geoProjectionMutator=Ah,u.geoRotation=xl,u.geoStereographic=function(){return Th(Kh).scale(250).clipAngle(142)},u.geoStereographicRaw=Kh,u.geoStream=tf,u.geoTransform=function(t){return{stream:dh(t)}},u.geoTransverseMercator=function(){var t=zh(Qh),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],2<t.length?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)},u.geoTransverseMercatorRaw=Qh,u.gray=function(t,n){return new mr(t,0,0,null==n?1:n)},u.greatest=Gt,u.greatestIndex=function(t){var n,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h;if(1===e.length)return Lt(t,e);var r,i=-1,o=-1,a=_createForOfIteratorHelper(t);try{for(a.s();!(r=a.n()).done;){var u=r.value;++o,(i<0?0===e(u,u):0<e(u,n))&&(n=u,i=o)}}catch(t){a.e(t)}finally{a.f()}return i},u.group=yt,u.groupSort=function(t,i,n){return(2!==i.length?kt(bt(t,i,n),function(t,n){var t=_slicedToArray(t,2),e=t[0],t=t[1],n=_slicedToArray(n,2),r=n[0];return h(t,n[1])||h(e,r)}):kt(yt(t,n),function(t,n){var t=_slicedToArray(t,2),e=t[0],t=t[1],n=_slicedToArray(n,2),r=n[0];return i(t,n[1])||h(e,r)})).map(function(t){return _slicedToArray(t,1)[0]})},u.groups=gt,u.hcl=Ar,u.hierarchy=r0,u.histogram=Ht,u.hsl=ir,u.html=$u,u.image=function(i,o){return new Promise(function(t,n){var e,r=new Image;for(e in o)r[e]=o[e];r.onerror=n,r.onload=function(){t(r)},r.src=i})},u.index=function(t){for(var n=arguments.length,e=new Array(1<n?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return wt(t,vt,xt,e)},u.indexes=function(t){for(var n=arguments.length,e=new Array(1<n?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return wt(t,Array.from,xt,e)},u.interpolate=ri,u.interpolateArray=function(t,n){return(Zr(n)?Wr:Kr)(t,n)},u.interpolateBasis=Dr,u.interpolateBasisClosed=Lr,u.interpolateBlues=Hy,u.interpolateBrBG=Kv,u.interpolateBuGn=py,u.interpolateBuPu=yy,u.interpolateCividis=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"},u.interpolateCool=Qy,u.interpolateCubehelix=bi,u.interpolateCubehelixDefault=Zy,u.interpolateCubehelixLong=mi,u.interpolateDate=Qr,u.interpolateDiscrete=function(n){var e=n.length;return function(t){return n[Math.max(0,Math.min(e-1,Math.floor(t*e)))]}},u.interpolateGnBu=_y,u.interpolateGreens=Ly,u.interpolateGreys=Uy,u.interpolateHcl=yi,u.interpolateHclLong=gi,u.interpolateHsl=je,u.interpolateHslLong=Fe,u.interpolateHue=function(t,n){var e=Br(+t,+n);return function(t){t=e(t);return t-360*Math.floor(t/360)}},u.interpolateInferno=o2,u.interpolateLab=function(n,t){var e=c((n=br(n)).l,(t=br(t)).l),r=c(n.a,t.a),i=c(n.b,t.b),o=c(n.opacity,t.opacity);return function(t){return n.l=e(t),n.a=r(t),n.b=i(t),n.opacity=o(t),n+""}},u.interpolateMagma=i2,u.interpolateNumber=$r,u.interpolateNumberArray=Wr,u.interpolateObject=Jr,u.interpolateOrRd=my,u.interpolateOranges=Wy,u.interpolatePRGn=$v,u.interpolatePiYG=ty,u.interpolatePlasma=a2,u.interpolatePuBu=ky,u.interpolatePuBuGn=wy,u.interpolatePuOr=ey,u.interpolatePuRd=Ay,u.interpolatePurples=Yy,u.interpolateRainbow=function(t){(t<0||1<t)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return $y.h=360*t-100,$y.s=1.5-1.5*n,$y.l=.8-.9*n,$y+""},u.interpolateRdBu=iy,u.interpolateRdGy=ay,u.interpolateRdPu=Ey,u.interpolateRdYlBu=cy,u.interpolateRdYlGn=ly,u.interpolateReds=Xy,u.interpolateRgb=Gr,u.interpolateRgbBasis=Vr,u.interpolateRgbBasisClosed=Ie,u.interpolateRound=ii,u.interpolateSinebow=function(t){var n;return t=(.5-t)*Math.PI,Jy.r=255*(n=Math.sin(t))*n,Jy.g=255*(n=Math.sin(t+t2))*n,Jy.b=255*(n=Math.sin(t+n2))*n,Jy+""},u.interpolateSpectral=hy,u.interpolateString=ei,u.interpolateTransformCss=li,u.interpolateTransformSvg=si,u.interpolateTurbo=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"},u.interpolateViridis=r2,u.interpolateWarm=Ky,u.interpolateYlGn=Py,u.interpolateYlGnBu=Oy,u.interpolateYlOrBr=Fy,u.interpolateYlOrRd=zy,u.interpolateZoom=di,u.interrupt=no,u.intersection=function(t){for(var n=arguments.length,e=new Array(1<n?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];t=new lt(t);var i,e=e.map(on),o=_createForOfIteratorHelper(t);try{t:for(o.s();!(i=o.n()).done;){var a,u=i.value,c=_createForOfIteratorHelper(e);try{for(c.s();!(a=c.n()).done;)if(!a.value.has(u)){t.delete(u);continue t}}catch(t){c.e(t)}finally{c.f()}}}catch(t){o.e(t)}finally{o.f()}return t},u.interval=function(t,n,e){var o=new ji,a=n;return null==n?o.restart(t,n,e):(o._restart=o.restart,o.restart=function(e,r,i){r=+r,i=null==i?Ii():+i,o._restart(function t(n){n+=a,o._restart(t,a+=r,i),e(n)},r,i)},o.restart(t,n,e)),o},u.isoFormat=Nv,u.isoParse=rp,u.json=function(t,n){return fetch(t,n).then(Zu)},u.lab=br,u.lch=function(t,n,e,r){return 1===arguments.length?Tr(t):new Sr(e,n,t,null==r?1:r)},u.least=function(t){var n,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h,r=!1;if(1===e.length){var i,o,a=_createForOfIteratorHelper(t);try{for(a.s();!(o=a.n()).done;){var u=o.value,c=e(u);(r?h(c,i)<0:0===h(c,c))&&(n=u,i=c,r=!0)}}catch(t){a.e(t)}finally{a.f()}}else{var f,l=_createForOfIteratorHelper(t);try{for(l.s();!(f=l.n()).done;){var s=f.value;(r?e(s,n)<0:0===e(s,s))&&(n=s,r=!0)}}catch(t){l.e(t)}finally{l.f()}}return n},u.leastIndex=Jt,u.line=N2,u.lineRadial=R2,u.link=V2,u.linkHorizontal=function(){return V2(U2)},u.linkRadial=function(){var t=V2(Y2);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t},u.linkVertical=function(){return V2(B2)},u.local=de,u.map=function(e,r){if("function"!=typeof e[Symbol.iterator])throw new TypeError("values is not iterable");if("function"!=typeof r)throw new TypeError("mapper is not a function");return Array.from(e,function(t,n){return r(t,n,e)})},u.matcher=In,u.max=Dt,u.maxIndex=Lt,u.mean=function(t,n){var e=0,r=0;if(void 0===n){var i,o=_createForOfIteratorHelper(t);try{for(o.s();!(i=o.n()).done;){var a=i.value;null!=a&&(a=+a)>=a&&(++e,r+=a)}}catch(t){o.e(t)}finally{o.f()}}else{var u,c=-1,f=_createForOfIteratorHelper(t);try{for(f.s();!(u=f.n()).done;){var l=u.value;null!=(l=n(l,++c,t))&&(l=+l)>=l&&(++e,r+=l)}}catch(t){f.e(t)}finally{f.f()}}if(e)return r/e},u.median=function(t,n){return Xt(t,.5,n)},u.medianIndex=function(t,n){return Wt(t,.5,n)},u.merge=Kt,u.min=qt,u.minIndex=Ut,u.mode=function(t,n){var e,r=new ft;if(void 0===n){var i,o=_createForOfIteratorHelper(t);try{for(o.s();!(i=o.n()).done;){var a=i.value;null!=a&&a<=a&&r.set(a,(r.get(a)||0)+1)}}catch(t){o.e(t)}finally{o.f()}}else{var u,c,f=-1,l=_createForOfIteratorHelper(t);try{for(l.s();!(u=l.n()).done;)null!=(c=n(u.value,++f,t))&&c<=c&&r.set(c,(r.get(c)||0)+1)}catch(t){l.e(t)}finally{l.f()}}var s,h=0,d=_createForOfIteratorHelper(r);try{for(d.s();!(s=d.n()).done;){var p=_slicedToArray(s.value,2),v=p[0],y=p[1];h<y&&(h=y,e=v)}}catch(t){d.e(t)}finally{d.f()}return e},u.namespace=An,u.namespaces=Tn,u.nice=zt,u.now=Ii,u.pack=function(){var e=null,r=1,i=1,o=s0;function n(t){var n=y0();return t.x=r/2,t.y=i/2,e?t.eachBefore(N0(e)).eachAfter(O0(o,.5,n)).eachBefore(C0(1)):t.eachBefore(N0(E0)).eachAfter(O0(s0,1,n)).eachAfter(O0(o,t.r/Math.min(r,i),n)).eachBefore(C0(Math.min(r,i)/(2*t.r))),t}return n.radius=function(t){return arguments.length?(e=f0(t),n):e},n.size=function(t){return arguments.length?(r=+t[0],i=+t[1],n):[r,i]},n.padding=function(t){return arguments.length?(o="function"==typeof t?t:h0(+t),n):o},n},u.packEnclose=function(t){return g0(t,y0())},u.packSiblings=function(t){return S0(t,y0()),t},u.pairs=function(t){var n,e,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:Qt,i=[],o=!1,a=_createForOfIteratorHelper(t);try{for(a.s();!(e=a.n()).done;){var u=e.value;o&&i.push(r(n,u)),n=u,o=!0}}catch(t){a.e(t)}finally{a.f()}return i},u.partition=function(){var e=1,r=1,u=0,i=!1;function n(t){var o,a,n=t.height+1;return t.x0=t.y0=u,t.x1=e,t.y1=r/n,t.eachBefore((o=r,a=n,function(t){t.children&&I0(t,t.x0,o*(t.depth+1)/a,t.x1,o*(t.depth+2)/a);var n=t.x0,e=t.y0,r=t.x1-u,i=t.y1-u;r<n&&(n=r=(n+r)/2),i<e&&(e=i=(e+i)/2),t.x0=n,t.y0=e,t.x1=r,t.y1=i})),i&&t.eachBefore(P0),t}return n.round=function(t){return arguments.length?(i=!!t,n):i},n.size=function(t){return arguments.length?(e=+t[0],r=+t[1],n):[e,r]},n.padding=function(t){return arguments.length?(u=+t,n):u},n},u.path=wa,u.pathRound=function(){return new xa(+(0<arguments.length&&void 0!==arguments[0]?arguments[0]:3))},u.permute=Mt,u.pie=function(){var d=P2,p=C2,v=null,y=b(0),g=b(p2),_=b(0);function n(e){for(var t,n,r,i=(e=k2(e)).length,o=0,a=new Array(i),u=new Array(i),c=+y.apply(this,arguments),f=Math.min(p2,Math.max(-p2,g.apply(this,arguments)-c)),l=Math.min(Math.abs(f)/i,_.apply(this,arguments)),s=l*(f<0?-1:1),h=0;h<i;++h)0<(r=u[a[h]=h]=+d(e[h],h,e))&&(o+=r);for(null!=p?a.sort(function(t,n){return p(u[t],u[n])}):null!=v&&a.sort(function(t,n){return v(e[t],e[n])}),h=0,t=o?(f-i*s)/o:0;h<i;++h,c=n)n=a[h],r=u[n],u[n]={data:e[n],index:h,value:r,startAngle:c,endAngle:n=c+(0<r?r*t:0)+s,padAngle:l};return u}return n.value=function(t){return arguments.length?(d="function"==typeof t?t:b(+t),n):d},n.sortValues=function(t){return arguments.length?(p=t,v=null,n):p},n.sort=function(t){return arguments.length?(v=t,p=null,n):v},n.startAngle=function(t){return arguments.length?(y="function"==typeof t?t:b(+t),n):y},n.endAngle=function(t){return arguments.length?(g="function"==typeof t?t:b(+t),n):g},n.padAngle=function(t){return arguments.length?(_="function"==typeof t?t:b(+t),n):_},n},u.piecewise=xi,u.pointRadial=D2,u.pointer=ye,u.pointers=function(t,n){return t.target&&(t=ve(t),void 0===n&&(n=t.currentTarget),t=t.touches||[t]),Array.from(t,function(t){return ye(t,n)})},u.polygonArea=function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2},u.polygonCentroid=function(t){for(var n,e,r=-1,i=t.length,o=0,a=0,u=t[i-1],c=0;++r<i;)n=u,u=t[r],c+=e=n[0]*u[1]-u[0]*n[1],o+=(n[0]+u[0])*e,a+=(n[1]+u[1])*e;return[o/(c*=3),a/c]},u.polygonContains=function(t,n){for(var e,r,i=t.length,o=t[i-1],a=n[0],u=n[1],c=o[0],f=o[1],l=!1,s=0;s<i;++s)e=(o=t[s])[0],u<(r=o[1])!=u<f&&a<(c-e)*(u-r)/(f-r)+e&&(l=!l),c=e,f=r;return l},u.polygonHull=function(t){if((n=t.length)<3)return null;for(var n,e=new Array(n),r=new Array(n),i=0;i<n;++i)e[i]=[+t[i][0],+t[i][1],i];for(e.sort(W0),i=0;i<n;++i)r[i]=[e[i][0],-e[i][1]];var o=Z0(e),a=Z0(r),u=a[0]===o[0],c=a[a.length-1]===o[o.length-1],f=[];for(i=o.length-1;0<=i;--i)f.push(t[e[o[i]][2]]);for(i=+u;i<a.length-c;++i)f.push(t[e[a[i]][2]]);return f},u.polygonLength=function(t){for(var n,e,r=-1,i=t.length,o=t[i-1],a=o[0],u=o[1],c=0;++r<i;)n=a,e=u,n-=a=(o=t[r])[0],e-=u=o[1],c+=Math.hypot(n,e);return c},u.precisionFixed=Cc,u.precisionPrefix=Pc,u.precisionRound=Ic,u.quadtree=rc,u.quantile=Xt,u.quantileIndex=Wt,u.quantileSorted=Vt,u.quantize=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e},u.quickselect=Bt,u.radialArea=H2,u.radialLine=R2,u.randomBates=n1,u.randomBernoulli=i1,u.randomBeta=u1,u.randomBinomial=c1,u.randomCauchy=l1,u.randomExponential=e1,u.randomGamma=a1,u.randomGeometric=o1,u.randomInt=Q0,u.randomIrwinHall=t1,u.randomLcg=function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:Math.random(),n=0|(0<=t&&t<1?t/h1:Math.abs(t));return function(){return h1*((n=1664525*n+1013904223|0)>>>0)}},u.randomLogNormal=J0,u.randomLogistic=s1,u.randomNormal=$0,u.randomPareto=r1,u.randomPoisson=n,u.randomUniform=K0,u.randomWeibull=f1,u.range=$t,u.rank=function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h;if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");function r(t,n){return e(a[t],a[n])}var i,o,a=Array.from(t),u=new Float64Array(a.length);return 2!==e.length&&(a=a.map(e),e=h),(t=Uint32Array.from(a,function(t,n){return n})).sort(e===h?function(t,n){return At(a[t],a[n])}:Tt(r)),t.forEach(function(t,n){var e=r(t,void 0===i?t:i);0<=e?((void 0===i||0<e)&&(i=t,o=n),u[t]=o):u[t]=NaN}),u},u.reduce=function(t,n,e){if("function"!=typeof n)throw new TypeError("reducer is not a function");var r,i=t[Symbol.iterator](),o=-1;if(arguments.length<3){var a=i.next(),u=a.done;if(e=a.value,u)return;++o}for(;u=(r=i.next()).done,r=r.value,!u;)e=n(e,r,++o,t);return e},u.reverse=function(t){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");return Array.from(t).reverse()},u.rgb=Ke,u.ribbon=function(){return Pa()},u.ribbonArrow=function(){return Pa(Ca)},u.rollup=bt,u.rollups=mt,u.scaleBand=g1,u.scaleDiverging=function t(){var n=E1(zv()(m1));return n.copy=function(){return Fv(n,t())},p1.apply(n,arguments)},u.scaleDivergingLog=function t(){var n=z1(zv()).domain([.1,1,10]);return n.copy=function(){return Fv(n,t()).base(n.base())},p1.apply(n,arguments)},u.scaleDivergingPow=Rv,u.scaleDivergingSqrt=function(){return Rv.apply(null,arguments).exponent(.5)},u.scaleDivergingSymlog=function t(){var n=D1(zv());return n.copy=function(){return Fv(n,t()).constant(n.constant())},p1.apply(n,arguments)},u.scaleIdentity=function t(n){var e;function r(t){return null==t||isNaN(t=+t)?e:t}return(r.invert=r).domain=r.range=function(t){return arguments.length?(n=Array.from(t,_1),r):n.slice()},r.unknown=function(t){return arguments.length?(e=t,r):e},r.copy=function(){return t(n).unknown(e)},n=arguments.length?Array.from(n,_1):[0,1],E1(r)},u.scaleImplicit=v1,u.scaleLinear=function t(){var n=A1();return n.copy=function(){return k1(n,t())},d1.apply(n,arguments),E1(n)},u.scaleLog=function t(){var n=z1(T1()).domain([1,10]);return n.copy=function(){return k1(n,t()).base(n.base())},d1.apply(n,arguments),n},u.scaleOrdinal=y1,u.scalePoint=function(){return function t(n){var e=n.copy;return n.padding=n.paddingOuter,delete n.paddingInner,delete n.paddingOuter,n.copy=function(){return t(e())},n}(g1.apply(null,arguments).paddingInner(1))},u.scalePow=Y1,u.scaleQuantile=function t(){var n,i=[],e=[],r=[];function o(){var t=0,n=Math.max(1,e.length);for(r=new Array(n-1);++t<n;)r[t-1]=Vt(i,t/n);return a}function a(t){return null==t||isNaN(t=+t)?n:e[Z(r,t)]}return a.invertExtent=function(t){return(t=e.indexOf(t))<0?[NaN,NaN]:[0<t?r[t-1]:i[0],t<r.length?r[t]:i[i.length-1]]},a.domain=function(t){if(!arguments.length)return i.slice();i=[];var n,e=_createForOfIteratorHelper(t);try{for(e.s();!(n=e.n()).done;){var r=n.value;null==r||isNaN(r=+r)||i.push(r)}}catch(t){e.e(t)}finally{e.f()}return i.sort(h),o()},a.range=function(t){return arguments.length?(e=Array.from(t),o()):e.slice()},a.unknown=function(t){return arguments.length?(n=t,a):n},a.quantiles=function(){return r.slice()},a.copy=function(){return t().domain(i).range(e).unknown(n)},d1.apply(a,arguments)},u.scaleQuantize=function t(){var n,e=0,r=1,i=1,o=[.5],a=[0,1];function u(t){return null!=t&&t<=t?a[Z(o,t,0,i)]:n}function c(){var t=-1;for(o=new Array(i);++t<i;)o[t]=((t+1)*r-(t-i)*e)/(i+1);return u}return u.domain=function(t){return arguments.length?(t=_slicedToArray(t,2),e=+(e=t[0]),r=+(r=t[1]),c()):[e,r]},u.range=function(t){return arguments.length?(i=(a=Array.from(t)).length-1,c()):a.slice()},u.invertExtent=function(t){return(t=a.indexOf(t))<0?[NaN,NaN]:t<1?[e,o[0]]:i<=t?[o[i-1],r]:[o[t-1],o[t]]},u.unknown=function(t){return arguments.length&&(n=t),u},u.thresholds=function(){return o.slice()},u.copy=function(){return t().domain([e,r]).range(a).unknown(n)},d1.apply(E1(u),arguments)},u.scaleRadial=function t(){var n,e=A1(),r=[0,1],i=!1;function o(t){return t=e(t),t=Math.sign(t)*Math.sqrt(Math.abs(t)),isNaN(t)?n:i?Math.round(t):t}return o.invert=function(t){return e.invert(G1(t))},o.domain=function(t){return arguments.length?(e.domain(t),o):e.domain()},o.range=function(t){return arguments.length?(e.range((r=Array.from(t,_1)).map(G1)),o):r.slice()},o.rangeRound=function(t){return o.range(t).round(!0)},o.round=function(t){return arguments.length?(i=!!t,o):i},o.clamp=function(t){return arguments.length?(e.clamp(t),o):e.clamp()},o.unknown=function(t){return arguments.length?(n=t,o):n},o.copy=function(){return t(e.domain(),r).round(i).clamp(e.clamp()).unknown(n)},d1.apply(o,arguments),E1(o)},u.scaleSequential=function t(){var n=E1(Iv()(m1));return n.copy=function(){return Fv(n,t())},p1.apply(n,arguments)},u.scaleSequentialLog=function t(){var n=z1(Iv()).domain([1,10]);return n.copy=function(){return Fv(n,t()).base(n.base())},p1.apply(n,arguments)},u.scaleSequentialPow=jv,u.scaleSequentialQuantile=function t(){var i=[],e=m1;function o(t){if(null!=t&&!isNaN(t=+t))return e((Z(i,t,1)-1)/(i.length-1))}return o.domain=function(t){if(!arguments.length)return i.slice();i=[];var n,e=_createForOfIteratorHelper(t);try{for(e.s();!(n=e.n()).done;){var r=n.value;null==r||isNaN(r=+r)||i.push(r)}}catch(t){e.e(t)}finally{e.f()}return i.sort(h),o},o.interpolator=function(t){return arguments.length?(e=t,o):e},o.range=function(){return i.map(function(t,n){return e(n/(i.length-1))})},o.quantiles=function(e){return Array.from({length:e+1},function(t,n){return Xt(i,n/e)})},o.copy=function(){return t(e).domain(i)},p1.apply(o,arguments)},u.scaleSequentialSqrt=function(){return jv.apply(null,arguments).exponent(.5)},u.scaleSequentialSymlog=function t(){var n=D1(Iv());return n.copy=function(){return Fv(n,t()).constant(n.constant())},p1.apply(n,arguments)},u.scaleSqrt=function(){return Y1.apply(null,arguments).exponent(.5)},u.scaleSymlog=function t(){var n=D1(T1());return n.copy=function(){return k1(n,t()).constant(n.constant())},d1.apply(n,arguments)},u.scaleThreshold=function t(){var n,e=[.5],r=[0,1],i=1;function o(t){return null!=t&&t<=t?r[Z(e,t,0,i)]:n}return o.domain=function(t){return arguments.length?(e=Array.from(t),i=Math.min(e.length,r.length-1),o):e.slice()},o.range=function(t){return arguments.length?(r=Array.from(t),i=Math.min(e.length,r.length-1),o):r.slice()},o.invertExtent=function(t){return t=r.indexOf(t),[e[t-1],e[t]]},o.unknown=function(t){return arguments.length?(n=t,o):n},o.copy=function(){return t().domain(e).range(r).unknown(n)},d1.apply(o,arguments)},u.scaleTime=function(){return d1.apply(Pv(ap,up,$d,Wd,bd,hd,cd,id,ed,u.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},u.scaleUtc=function(){return d1.apply(Pv(ip,op,tp,Kd,Fd,pd,ld,ad,ed,u.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)},u.scan=function(t,n){return(t=Jt(t,n))<0?void 0:t},u.schemeAccent=Dv,u.schemeBlues=Ry,u.schemeBrBG=Zv,u.schemeBuGn=dy,u.schemeBuPu=vy,u.schemeCategory10=Hv,u.schemeDark2=Lv,u.schemeGnBu=gy,u.schemeGreens=Dy,u.schemeGreys=qy,u.schemeObservable10=qv,u.schemeOrRd=by,u.schemeOranges=Vy,u.schemePRGn=Qv,u.schemePaired=Uv,u.schemePastel1=Bv,u.schemePastel2=Yv,u.schemePiYG=Jv,u.schemePuBu=My,u.schemePuBuGn=xy,u.schemePuOr=ny,u.schemePuRd=Ty,u.schemePurples=By,u.schemeRdBu=ry,u.schemeRdGy=oy,u.schemeRdPu=Sy,u.schemeRdYlBu=uy,u.schemeRdYlGn=fy,u.schemeReds=Gy,u.schemeSet1=Gv,u.schemeSet2=Xv,u.schemeSet3=Vv,u.schemeSpectral=sy,u.schemeTableau10=Wv,u.schemeYlGn=Cy,u.schemeYlGnBu=Ny,u.schemeYlOrBr=Iy,u.schemeYlOrRd=jy,u.select=q,u.selectAll=function(t){return"string"==typeof t?new w([document.querySelectorAll(t)],[document.documentElement]):new w([On(t)],le)},u.selection=se,u.selector=Nn,u.selectorAll=Pn,u.shuffle=tn,u.shuffler=nn,u.some=function(t,n){if("function"!=typeof n)throw new TypeError("test is not a function");var e,r=-1,i=_createForOfIteratorHelper(t);try{for(i.s();!(e=i.n()).done;)if(n(e.value,++r,t))return!0}catch(t){i.e(t)}finally{i.f()}return!1},u.sort=kt,u.stack=function(){var f=b([]),l=Jg,s=$g,h=t_;function n(t){var n,e,r=Array.from(f.apply(this,arguments),n_),i=r.length,o=-1,a=_createForOfIteratorHelper(t);try{for(a.s();!(e=a.n()).done;){var u=e.value,c=0;for(++o;c<i;++c)(r[c][o]=[0,+h(u,r[c].key,o,t)]).data=u}}catch(t){a.e(t)}finally{a.f()}for(c=0,n=k2(l(r));c<i;++c)r[n[c]].index=c;return s(r,n),r}return n.keys=function(t){return arguments.length?(f="function"==typeof t?t:b(Array.from(t)),n):f},n.value=function(t){return arguments.length?(h="function"==typeof t?t:b(+t),n):h},n.order=function(t){return arguments.length?(l=null==t?Jg:"function"==typeof t?t:b(Array.from(t)),n):l},n.offset=function(t){return arguments.length?(s=null==t?$g:t,n):s},n},u.stackOffsetDiverging=function(t,n){if(0<(u=t.length))for(var e,r,i,o,a,u,c=0,f=t[n[0]].length;c<f;++c)for(e=o=a=0;e<u;++e)0<(i=(r=t[n[e]][c])[1]-r[0])?(r[0]=o,r[1]=o+=i):i<0?(r[1]=a,r[0]=a+=i):(r[0]=0,r[1]=i)},u.stackOffsetExpand=function(t,n){if(0<(r=t.length)){for(var e,r,i,o=0,a=t[0].length;o<a;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}$g(t,n)}},u.stackOffsetNone=$g,u.stackOffsetSilhouette=function(t,n){if(0<(e=t.length)){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var a=0,u=0;a<e;++a)u+=t[a][r][1]||0;i[r][1]+=i[r][0]=-u/2}$g(t,n)}},u.stackOffsetWiggle=function(t,n){if(0<(i=t.length)&&0<(r=(e=t[n[0]]).length)){for(var e,r,i,o=0,a=1;a<r;++a){for(var u=0,c=0,f=0;u<i;++u){for(var l=t[n[u]],s=l[a][1]||0,h=(s-(l[a-1][1]||0))/2,d=0;d<u;++d){var p=t[n[d]];h+=(p[a][1]||0)-(p[a-1][1]||0)}c+=s,f+=h*s}e[a-1][1]+=e[a-1][0]=o,c&&(o-=f/c)}e[a-1][1]+=e[a-1][0]=o,$g(t,n)}},u.stackOrderAppearance=e_,u.stackOrderAscending=i_,u.stackOrderDescending=function(t){return i_(t).reverse()},u.stackOrderInsideOut=function(t){for(var n,e=t.length,r=t.map(o_),i=e_(t),o=0,a=0,u=[],c=[],f=0;f<e;++f)n=i[f],(o<a?(o+=r[n],u):(a+=r[n],c)).push(n);return c.reverse().concat(u)},u.stackOrderNone=Jg,u.stackOrderReverse=function(t){return Jg(t).reverse()},u.stratify=function(){var m,x=R0,w=H0;function n(e){var n,t,r,i,o,a,u,c,f=Array.from(e),l=x,s=w,h=new Map;if(null!=m){var d,p=f.map(function(t,n){t=m(t,n,e),n=(t="".concat(t)).length;return"/"===(t=L0(t,n-1)&&!L0(t,n-2)?t.slice(0,-1):t)[0]?t:"/".concat(t)}),v=p.map(D0),y=new Set(p).add(""),g=_createForOfIteratorHelper(v);try{for(g.s();!(d=g.n()).done;){var _=d.value;y.has(_)||(y.add(_),p.push(_),v.push(D0(_)),f.push(z0))}}catch(t){g.e(t)}finally{g.f()}l=function(t,n){return p[n]},s=function(t,n){return v[n]}}for(r=0,n=f.length;r<n;++r)t=f[r],a=f[r]=new c0(t),null!=(u=l(t,r,e))&&(u+="")&&(c=a.id=u,h.set(c,h.has(c)?j0:a)),null!=(u=s(t,r,e))&&(u+="")&&(a.parent=u);for(r=0;r<n;++r)if(u=(a=f[r]).parent){if(!(o=h.get(u)))throw new Error("missing: "+u);if(o===j0)throw new Error("ambiguous: "+u);o.children?o.children.push(a):o.children=[a],a.parent=o}else{if(i)throw new Error("multiple roots");i=a}if(!i)throw new Error("no root");if(null!=m){for(;i.data===z0&&1===i.children.length;)i=i.children[0],--n;for(var b=f.length-1;0<=b&&(a=f[b]).data===z0;--b)a.data=null}if(i.parent=F0,i.eachBefore(function(t){t.depth=t.parent.depth+1,--n}).eachBefore(u0),i.parent=null,0<n)throw new Error("cycle");return i}return n.id=function(t){return arguments.length?(x=f0(t),n):x},n.parentId=function(t){return arguments.length?(w=f0(t),n):w},n.path=function(t){return arguments.length?(m=f0(t),n):m},n},u.style=Xn,u.subset=function(t,n){return an(n,t)},u.sum=function(t,n){var e=0;if(void 0===n){var r,i,o=_createForOfIteratorHelper(t);try{for(o.s();!(r=o.n()).done;)(i=+r.value)&&(e+=i)}catch(t){o.e(t)}finally{o.f()}}else{var a,u,c=-1,f=_createForOfIteratorHelper(t);try{for(f.s();!(a=f.n()).done;)(u=+n(a.value,++c,t))&&(e+=u)}catch(t){f.e(t)}finally{f.f()}}return e},u.superset=an,u.svg=Ju,u.symbol=function(n,e){var r=null,i=y2(o);function o(){var t;if(r=r||(t=i()),n.apply(this,arguments).draw(r,+e.apply(this,arguments)),t)return r=null,t+""||null}return n="function"==typeof n?n:b(n||K2),e="function"==typeof e?e:b(void 0===e?64:+e),o.type=function(t){return arguments.length?(n="function"==typeof t?t:b(t),o):n},o.size=function(t){return arguments.length?(e="function"==typeof t?t:b(+t),o):e},o.context=function(t){return arguments.length?(r=null==t?null:t,o):r},o},u.symbolAsterisk=Z2,u.symbolCircle=K2,u.symbolCross=Q2,u.symbolDiamond=tg,u.symbolDiamond2=ng,u.symbolPlus=eg,u.symbolSquare=rg,u.symbolSquare2=ig,u.symbolStar=og,u.symbolTimes=gg,u.symbolTriangle=fg,u.symbolTriangle2=sg,u.symbolWye=yg,u.symbolX=gg,u.symbols=_g,u.symbolsFill=_g,u.symbolsStroke=bg,u.text=Gu,u.thresholdFreedmanDiaconis=function(t,n,e){var r=et(t),t=Xt(t,.75)-Xt(t,.25);return r&&t?Math.ceil((e-n)/(2*t*Math.pow(r,-1/3))):1},u.thresholdScott=function(t,n,e){var r=et(t),t=ut(t);return r&&t?Math.ceil((e-n)*Math.cbrt(r)/(3.49*t)):1},u.thresholdSturges=Rt,u.tickFormat=S1,u.tickIncrement=Ft,u.tickStep=jt,u.ticks=It,u.timeDay=hd,u.timeDays=dd,u.timeFormatDefaultLocale=Ev,u.timeFormatLocale=sp,u.timeFriday=kd,u.timeFridays=Cd,u.timeHour=cd,u.timeHours=fd,u.timeInterval=i,u.timeMillisecond=W1,u.timeMilliseconds=Z1,u.timeMinute=id,u.timeMinutes=od,u.timeMonday=md,u.timeMondays=Sd,u.timeMonth=Wd,u.timeMonths=Zd,u.timeSaturday=Td,u.timeSaturdays=Pd,u.timeSecond=ed,u.timeSeconds=rd,u.timeSunday=bd,u.timeSundays=Ad,u.timeThursday=Md,u.timeThursdays=Od,u.timeTickInterval=up,u.timeTicks=ap,u.timeTuesday=xd,u.timeTuesdays=Ed,u.timeWednesday=wd,u.timeWednesdays=Nd,u.timeWeek=bd,u.timeWeeks=Ad,u.timeYear=$d,u.timeYears=Jd,u.timeout=qi,u.timer=zi,u.timerFlush=Ri,u.transition=ho,u.transpose=en,u.tree=function(){var h=q0,c=1,f=1,l=null;function n(t){var n,e,r,i,o,a,u=(t=>{for(var n,e,r,i,o,a=[t=new Y0(t,0)];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;0<=i;--i)a.push(e=n.children[i]=new Y0(r[i],i)),e.parent=n;return(t.parent=new Y0(null,0)).children=[t],t})(t);return u.eachAfter(s),u.parent.m=-u.z,u.eachBefore(d),l?t.eachBefore(p):((r=e=n=t).eachBefore(function(t){t.x<n.x&&(n=t),t.x>e.x&&(e=t),t.depth>r.depth&&(r=t)}),u=n===e?1:h(n,e)/2,i=u-n.x,o=c/(e.x+u+i),a=f/(r.depth||1),t.eachBefore(function(t){t.x=(t.x+i)*o,t.y=t.depth*a})),t}function s(t){var n=t.children,e=t.parent.children,r=t.i?e[t.i-1]:null;if(n){for(var i,o=0,a=0,u=t.children,c=u.length;0<=--c;)(i=u[c]).z+=o,i.m+=o,o+=i.s+(a+=i.c);n=(n[0].z+n[n.length-1].z)/2;r?(t.z=r.z+h(t._,r._),t.m=t.z-n):t.z=n}else r&&(t.z=r.z+h(t._,r._));t.parent.A=((t,n,e)=>{if(n){for(var r,i=t,o=t,a=n,u=i.parent.children[0],c=i.m,f=o.m,l=a.m,s=u.m;a=B0(a),i=U0(i),a&&i;)u=U0(u),(o=B0(o)).a=t,0<(r=a.z+l-i.z-c+h(a._,i._))&&(((t,n,e)=>{var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e})(((t,n,e)=>t.a.parent===n.parent?t.a:e)(a,t,e),t,r),c+=r,f+=r),l+=a.m,c+=i.m,s+=u.m,f+=o.m;a&&!B0(o)&&(o.t=a,o.m+=l-f),i&&!U0(u)&&(u.t=i,u.m+=c-s,e=t)}return e})(t,r,t.parent.A||e[0])}function d(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function p(t){t.x*=c,t.y=t.depth*f}return n.separation=function(t){return arguments.length?(h=t,n):h},n.size=function(t){return arguments.length?(l=!1,c=+t[0],f=+t[1],n):l?null:[c,f]},n.nodeSize=function(t){return arguments.length?(l=!0,c=+t[0],f=+t[1],n):l?[c,f]:null},n},u.treemap=function(){var a=V0,n=!1,e=1,r=1,u=[0],c=s0,f=s0,l=s0,s=s0,h=s0;function i(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(o),u=[0],n&&t.eachBefore(P0),t}function o(t){var n=u[t.depth],e=t.x0+n,r=t.y0+n,i=t.x1-n,o=t.y1-n;i<e&&(e=i=(e+i)/2),o<r&&(r=o=(r+o)/2),t.x0=e,t.y0=r,t.x1=i,t.y1=o,t.children&&(n=u[t.depth+1]=c(t)/2,e+=h(t)-n,r+=f(t)-n,(i-=l(t)-n)<e&&(e=i=(e+i)/2),(o-=s(t)-n)<r&&(r=o=(r+o)/2),a(t,e,r,i,o))}return i.round=function(t){return arguments.length?(n=!!t,i):n},i.size=function(t){return arguments.length?(e=+t[0],r=+t[1],i):[e,r]},i.tile=function(t){return arguments.length?(a=l0(t),i):a},i.padding=function(t){return arguments.length?i.paddingInner(t).paddingOuter(t):i.paddingInner()},i.paddingInner=function(t){return arguments.length?(c="function"==typeof t?t:h0(+t),i):c},i.paddingOuter=function(t){return arguments.length?i.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):i.paddingTop()},i.paddingTop=function(t){return arguments.length?(f="function"==typeof t?t:h0(+t),i):f},i.paddingRight=function(t){return arguments.length?(l="function"==typeof t?t:h0(+t),i):l},i.paddingBottom=function(t){return arguments.length?(s="function"==typeof t?t:h0(+t),i):s},i.paddingLeft=function(t){return arguments.length?(h="function"==typeof t?t:h0(+t),i):h},i},u.treemapBinary=function(t,n,e,r,i){var o,a,v=t.children,u=v.length,y=new Array(u+1);for(y[0]=a=o=0;o<u;++o)y[o+1]=a+=v[o].value;!function t(n,e,r,i,o,a,u){if(e-1<=n)return(c=v[n]).x0=i,c.y0=o,c.x1=a,void(c.y1=u);var c=y[n],f=r/2+c,l=n+1,s=e-1;for(;l<s;){var h=l+s>>>1;y[h]<f?l=1+h:s=h}f-y[l-1]<y[l]-f&&n+1<l&&--l;var c=y[l]-c,d=r-c;{var p;u-o<a-i?(t(n,l,c,i,o,p=r?(i*d+a*c)/r:a,u),t(l,e,d,p,o,a,u)):(t(n,l,c,i,o,a,p=r?(o*d+u*c)/r:u),t(l,e,d,i,p,a,u))}}(0,u,t.value,n,e,r,i)},u.treemapDice=I0,u.treemapResquarify=t,u.treemapSlice=G0,u.treemapSliceDice=function(t,n,e,r,i){(1&t.depth?G0:I0)(t,n,e,r,i)},u.treemapSquarify=V0,u.tsv=Wu,u.tsvFormat=Ru,u.tsvFormatBody=Hu,u.tsvFormatRow=Lu,u.tsvFormatRows=Du,u.tsvFormatValue=Fu,u.tsvParse=ju,u.tsvParseRows=zu,u.union=function(){for(var t=new lt,n=arguments.length,e=new Array(n),r=0;r<n;r++)e[r]=arguments[r];for(var i=0,o=e;i<o.length;i++){var a,u=_createForOfIteratorHelper(o[i]);try{for(u.s();!(a=u.n()).done;){var c=a.value;t.add(c)}}catch(t){u.e(t)}finally{u.f()}}return t},u.unixDay=yd,u.unixDays=gd,u.utcDay=pd,u.utcDays=vd,u.utcFriday=Dd,u.utcFridays=Xd,u.utcHour=ld,u.utcHours=sd,u.utcMillisecond=W1,u.utcMilliseconds=Z1,u.utcMinute=ad,u.utcMinutes=ud,u.utcMonday=jd,u.utcMondays=Ud,u.utcMonth=Kd,u.utcMonths=Qd,u.utcSaturday=Ld,u.utcSaturdays=Vd,u.utcSecond=ed,u.utcSeconds=rd,u.utcSunday=Fd,u.utcSundays=qd,u.utcThursday=Hd,u.utcThursdays=Gd,u.utcTickInterval=op,u.utcTicks=ip,u.utcTuesday=zd,u.utcTuesdays=Bd,u.utcWednesday=Rd,u.utcWednesdays=Yd,u.utcWeek=Fd,u.utcWeeks=qd,u.utcYear=tp,u.utcYears=np,u.variance=at,u.version="7.9.0",u.window=Gn,u.xml=Qu,u.zip=function(){return en(arguments)},u.zoom=function(){var s,h,l,d=d_,p=p_,v=__,c=y_,n=g_,f=[0,1/0],y=[[-1/0,-1/0],[1/0,1/0]],g=250,_=di,e=xn("start","zoom","end"),b=500,m=150,x=0,w=10;function M(t){t.property("__zoom",v_).on("wheel.zoom",i,{passive:!1}).on("mousedown.zoom",o).on("dblclick.zoom",a).filter(n).on("touchstart.zoom",u).on("touchmove.zoom",N).on("touchend.zoom touchcancel.zoom",O).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function k(t,n){return(n=Math.max(f[0],Math.min(f[1],n)))===t.k?t:new c_(n,t.x,t.y)}function T(t,n,e){var r=n[0]-e[0]*t.k,n=n[1]-e[1]*t.k;return r===t.x&&n===t.y?t:new c_(t.k,r,n)}function A(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function S(t,e,c,f){t.on("start.zoom",function(){E(this,arguments).event(f).start()}).on("interrupt.zoom end.zoom",function(){E(this,arguments).event(f).end()}).tween("zoom",function(){var t=arguments,r=E(this,t).event(f),n=p.apply(this,t),i=null==c?A(n):"function"==typeof c?c.apply(this,t):c,o=Math.max(n[1][0]-n[0][0],n[1][1]-n[0][1]),n=this.__zoom,a="function"==typeof e?e.apply(this,t):e,u=_(n.invert(i).concat(o/n.k),a.invert(i).concat(o/a.k));return function(t){var n,e;t=1===t?a:(n=u(t),new c_(e=o/n[2],i[0]-n[0]*e,i[1]-n[1]*e)),r.zoom(null,t)}})}function E(t,n,e){return!e&&t.__zooming||new r(t,n)}function r(t,n){this.that=t,this.args=n,this.active=0,this.sourceEvent=null,this.extent=p.apply(t,n),this.taps=0}function i(t){for(var n=arguments.length,e=new Array(1<n?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];if(d.apply(this,arguments)){var i=E(this,e).event(t),o=this.__zoom,a=Math.max(f[0],Math.min(f[1],o.k*Math.pow(2,c.apply(this,arguments)))),u=ye(t);if(i.wheel)i.mouse[0][0]===u[0]&&i.mouse[0][1]===u[1]||(i.mouse[1]=o.invert(i.mouse[0]=u)),clearTimeout(i.wheel);else{if(o.k===a)return;i.mouse=[u,o.invert(u)],no(this),i.start()}h_(t),i.wheel=setTimeout(function(){i.wheel=null,i.end()},m),i.zoom("mouse",v(T(k(o,a),i.mouse[0],i.mouse[1]),i.extent,y))}}function o(t){for(var r,i,n,e,o,a,u=arguments.length,c=new Array(1<u?u-1:0),f=1;f<u;f++)c[f-1]=arguments[f];!l&&d.apply(this,arguments)&&(r=t.currentTarget,i=E(this,c,!0).event(t),n=q(t.view).on("mousemove.zoom",function(t){{var n,e;h_(t),i.moved||(n=t.clientX-o,e=t.clientY-a,i.moved=x<n*n+e*e)}i.event(t).zoom("mouse",v(T(i.that.__zoom,i.mouse[0]=ye(t,r),i.mouse[1]),i.extent,y))},!0).on("mouseup.zoom",function(t){n.on("mousemove.zoom mouseup.zoom",null),we(t.view,i.moved),h_(t),i.event(t).end()},!0),e=ye(t,r),o=t.clientX,a=t.clientY,xe(t.view),s_(t),i.mouse=[e,this.__zoom.invert(e)],no(this),i.start())}function a(t){for(var n,e,r,i,o=arguments.length,a=new Array(1<o?o-1:0),u=1;u<o;u++)a[u-1]=arguments[u];d.apply(this,arguments)&&(i=this.__zoom,n=ye(t.changedTouches?t.changedTouches[0]:t,this),e=i.invert(n),r=i.k*(t.shiftKey?.5:2),i=v(T(k(i,r),n,e),p.apply(this,a),y),h_(t),0<g?q(this).transition().duration(g).call(S,i,n,t):q(this).call(M.transform,i,n,t))}function u(t){for(var n=arguments.length,e=new Array(1<n?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];if(d.apply(this,arguments)){var i,o,a,u,c=t.touches,f=c.length,l=E(this,e,t.changedTouches.length===f).event(t);for(s_(t),o=0;o<f;++o)u=[u=ye(a=c[o],this),this.__zoom.invert(u),a.identifier],l.touch0?l.touch1||l.touch0[2]===u[2]||(l.touch1=u,l.taps=0):(l.touch0=u,i=!0,l.taps=1+!!s);s=s&&clearTimeout(s),i&&(l.taps<2&&(h=u[0],s=setTimeout(function(){s=null},b)),no(this),l.start())}}function N(t){if(this.__zooming){for(var n=arguments.length,e=new Array(1<n?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];var i,o=E(this,e).event(t),a=t.changedTouches,u=a.length;for(h_(t),i=0;i<u;++i)p=ye(d=a[i],this),o.touch0&&o.touch0[2]===d.identifier?o.touch0[0]=p:o.touch1&&o.touch1[2]===d.identifier&&(o.touch1[0]=p);if(d=o.that.__zoom,o.touch1)var t=o.touch0[0],c=o.touch0[1],f=o.touch1[0],l=o.touch1[1],s=(s=f[0]-t[0])*s+(s=f[1]-t[1])*s,h=(h=l[0]-c[0])*h+(h=l[1]-c[1])*h,d=k(d,Math.sqrt(s/h)),p=[(t[0]+f[0])/2,(t[1]+f[1])/2],s=[(c[0]+l[0])/2,(c[1]+l[1])/2];else{if(!o.touch0)return;p=o.touch0[0],s=o.touch0[1]}o.zoom("touch",v(T(d,p,s),o.extent,y))}}function O(t){for(var n=arguments.length,e=new Array(1<n?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];if(this.__zooming){var i,o,a=E(this,e).event(t),u=t.changedTouches,c=u.length;for(s_(t),l&&clearTimeout(l),l=setTimeout(function(){l=null},b),i=0;i<c;++i)o=u[i],a.touch0&&a.touch0[2]===o.identifier?delete a.touch0:a.touch1&&a.touch1[2]===o.identifier&&delete a.touch1;a.touch1&&!a.touch0&&(a.touch0=a.touch1,delete a.touch1),a.touch0?a.touch0[1]=this.__zoom.invert(a.touch0[0]):(a.end(),2===a.taps&&(o=ye(o,this),Math.hypot(h[0]-o[0],h[1]-o[1])<w)&&(t=q(this).on("dblclick.zoom"))&&t.apply(this,arguments))}}return M.transform=function(t,n,e,r){var i=t.selection?t.selection():t;i.property("__zoom",v_),t!==i?S(t,n,e,r):i.interrupt().each(function(){E(this,arguments).event(r).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()})},M.scaleBy=function(t,n,e,r){M.scaleTo(t,function(){return this.__zoom.k*("function"==typeof n?n.apply(this,arguments):n)},e,r)},M.scaleTo=function(t,o,a,n){M.transform(t,function(){var t=p.apply(this,arguments),n=this.__zoom,e=null==a?A(t):"function"==typeof a?a.apply(this,arguments):a,r=n.invert(e),i="function"==typeof o?o.apply(this,arguments):o;return v(T(k(n,i),e,r),t,y)},a,n)},M.translateBy=function(t,n,e,r){M.transform(t,function(){return v(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),p.apply(this,arguments),y)},null,r)},M.translateTo=function(t,r,i,o,n){M.transform(t,function(){var t=p.apply(this,arguments),n=this.__zoom,e=null==o?A(t):"function"==typeof o?o.apply(this,arguments):o;return v(f_.translate(e[0],e[1]).scale(n.k).translate("function"==typeof r?-r.apply(this,arguments):-r,"function"==typeof i?-i.apply(this,arguments):-i),t,y)},o,n)},r.prototype={event:function(t){return t&&(this.sourceEvent=t),this},start:function(){return 1==++this.active&&(this.that.__zooming=this).emit("start"),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){var n=q(this.that).datum();e.call(t,this.that,new u_(t,{sourceEvent:this.sourceEvent,target:M,type:t,transform:this.that.__zoom,dispatch:e}),n)}},M.wheelDelta=function(t){return arguments.length?(c="function"==typeof t?t:a_(+t),M):c},M.filter=function(t){return arguments.length?(d="function"==typeof t?t:a_(!!t),M):d},M.touchable=function(t){return arguments.length?(n="function"==typeof t?t:a_(!!t),M):n},M.extent=function(t){return arguments.length?(p="function"==typeof t?t:a_([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),M):p},M.scaleExtent=function(t){return arguments.length?(f[0]=+t[0],f[1]=+t[1],M):[f[0],f[1]]},M.translateExtent=function(t){return arguments.length?(y[0][0]=+t[0][0],y[1][0]=+t[1][0],y[0][1]=+t[0][1],y[1][1]=+t[1][1],M):[[y[0][0],y[0][1]],[y[1][0],y[1][1]]]},M.constrain=function(t){return arguments.length?(v=t,M):v},M.duration=function(t){return arguments.length?(g=+t,M):g},M.interpolate=function(t){return arguments.length?(_=t,M):_},M.on=function(){var t=e.on.apply(e,arguments);return t===e?M:t},M.clickDistance=function(t){return arguments.length?(x=(t=+t)*t,M):Math.sqrt(x)},M.tapDistance=function(t){return arguments.length?(w=+t,M):w},M},u.zoomIdentity=f_,u.zoomTransform=l_});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
